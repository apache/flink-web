<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Flink Blog Feed</title>
<description>Flink Blog</description>
<link>https://flink.apache.org/blog</link>
<atom:link href="https://flink.apache.org/blog/feed.xml" rel="self" type="application/rss+xml" />

<item>
<title>Sharing is caring - Catalogs in Flink SQL</title>
<description>With an ever-growing number of people working with data, it&#39;s a common practice for companies to build self-service platforms with the goal of democratizing their access across different teams and — especially — to enable users from any background to be independent in their data needs. In such environments, metadata management becomes a crucial aspect. Without it, users often work blindly, spending too much time searching for datasets and their location, figuring out data formats and similar cumbersome tasks.

In this blog post, we want to give you a high level overview of catalogs in Flink. We&#39;ll describe why you should consider using them and what you can achieve with one in place. To round it up, we&#39;ll also showcase how simple it is to combine catalogs and Flink, in the form of an end-to-end example that you can try out yourself.

## Why do I need a catalog?

Frequently, companies start building a data platform with a metastore, catalog, or schema registry of some sort already in place. Those let you clearly separate making the data available from consuming it. That separation has a few benefits:

* **Improved productivity** - The most obvious one. Making data reusable and shifting the focus on building new models/pipelines rather than data cleansing and discovery.
* **Security** - You can control the access to certain features of the data. For example, you can make the schema of the dataset publicly available, but limit the actual access to the underlying data only to particular teams.
* **Compliance** - If you have all the metadata in a central entity, it&#39;s much easier to ensure compliance with GDPR and similar regulations and legal requirements.

## What is stored in a catalog?

Almost all data sets can be described by certain properties that must be known in order to consume them. Those include:

* **Schema** - It describes the actual contents of the data, what columns it has, what are the constraints (e.g. keys) on which the updates should be performed, which fields can act as time attributes, what are the rules for watermark generation and so on.

* **Location** - Does the data come from Kafka or a file in a filesystem? How do you connect to the external system? Which topic or file name do you use?

* **Format** - Is the data serialized as JSON, CSV, or maybe Avro records?

* **Statistics** - You can also store additional information that can be useful when creating an execution plan of your query. For example, you can choose the best join algorithm, based on the number of rows in joined datasets.

Catalogs don’t have to be limited to the metadata of datasets. You can usually store other objects that can be reused in different scenarios, such as:

* **Functions** - It&#39;s very common to have domain specific functions that can be helpful in different use cases. Instead of having to create them in each place separately, you can just create them once and share them with others.

* **Queries** - Those can be useful when you don’t want to persist a data set, but want to provide a recipe for creating it from other sources instead.

## Catalogs support in Flink SQL
Starting from version 1.9, Flink has a set of Catalog APIs that allows to integrate Flink with various catalog implementations. With the help of those APIs, you can query tables in Flink that were created in your external catalogs (e.g. Hive Metastore). Additionally, depending on the catalog implementation, you can create new objects such as tables or views from Flink, reuse them across different jobs, and possibly even use them in other tools compatible with that catalog. In other words, you can see catalogs as having a two-fold purpose:

  * Provide an out-of-the box integration with ecosystems such as RDBMSs or Hive that allows you to query external objects like tables, views, or functions with no additional connector configuration. The connector properties are automatically derived from the catalog itself.
  
  * Act as a persistent store for Flink-specific metadata. In this mode, we additionally store connector properties alongside the logical metadata (e.g. schema, object name). That approach enables you to, for example, store a full definition of a Kafka-backed table with records serialized with Avro in Hive that can be later on used by Flink. However, as it incorporates Flink-specific properties, it can not be used by other tools that leverage Hive Metastore. 

As of Flink 1.11, there are two catalog implementations supported by the community:

  1. A comprehensive Hive catalog

  2. A Postgres catalog (preview, read-only, for now)

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Flink does not store data at rest; it is a compute engine and requires other systems to consume input from and write its output. This means that Flink does not own the lifecycle of the data. Integration with Catalogs does not change that. Flink uses catalogs for metadata management only.
&lt;/div&gt;

All you need to do to start querying your tables defined in either of these metastores is to create the corresponding catalogs with connection parameters. Once this is done, you can use them the way you would in any relational database management system.

```sql
-- create a catalog which gives access to the backing Postgres installation
CREATE CATALOG postgres WITH (
    &#39;type&#39;=&#39;jdbc&#39;,
    &#39;property-version&#39;=&#39;1&#39;,
    &#39;base-url&#39;=&#39;jdbc:postgresql://postgres:5432/&#39;,
    &#39;default-database&#39;=&#39;postgres&#39;,
    &#39;username&#39;=&#39;postgres&#39;,
    &#39;password&#39;=&#39;example&#39;
);

-- create a catalog which gives access to the backing Hive installation
CREATE CATALOG hive WITH (
    &#39;type&#39;=&#39;hive&#39;,
    &#39;property-version&#39;=&#39;1&#39;,
    &#39;hive-version&#39;=&#39;2.3.6&#39;,
    &#39;hive-conf-dir&#39;=&#39;/opt/hive-conf&#39;
);

After creating the catalogs, you can confirm that they are available to Flink and also list the databases or tables in each of these catalogs:

```sql
&gt; show catalogs;
default_catalog
hive
postgres

-- switch the default catalog to Hive
&gt; use catalog hive;
&gt; show databases;
default -- hive&#39;s default database

&gt; show tables;
dev_orders

&gt; use catalog postgres;
&gt; show tables;
prod_customer
prod_nation
prod_rates
prod_region
region_stats

-- desribe a schema of a table in Postgres, the Postgres types are automatically mapped to
-- Flink&#39;s type system
&gt; describe prod_customer
root
 |-- c_custkey: INT NOT NULL
 |-- c_name: VARCHAR(25) NOT NULL
 |-- c_address: VARCHAR(40) NOT NULL
 |-- c_nationkey: INT NOT NULL
 |-- c_phone: CHAR(15) NOT NULL
 |-- c_acctbal: DOUBLE NOT NULL
 |-- c_mktsegment: CHAR(10) NOT NULL
 |-- c_comment: VARCHAR(117) NOT NULL
```

Now that you know which tables are available, you can write your first query.
In this scenario, we keep customer orders in Hive (``dev_orders``) because of their volume, and reference customer data in Postgres (``prod_customer``) to be able to easily update it. Let’s write a query that shows customers and their orders by region and order priority for a specific day.

```sql
USE CATALOG postgres;
SELECT
  r_name AS `region`,
  o_orderpriority AS `priority`,
  COUNT(DISTINCT c_custkey) AS `number_of_customers`,
  COUNT(o_orderkey) AS `number_of_orders`
FROM `hive`.`default`.dev_orders -- we need to fully qualify the table in hive because we set the
                                 -- current catalog to Postgres
JOIN prod_customer ON o_custkey = c_custkey
JOIN prod_nation ON c_nationkey = n_nationkey
JOIN prod_region ON n_regionkey = r_regionkey
WHERE
  FLOOR(o_ordertime TO DAY) = TIMESTAMP &#39;2020-04-01 0:00:00.000&#39;
  AND NOT o_orderpriority = &#39;4-NOT SPECIFIED&#39;
GROUP BY r_name, o_orderpriority
ORDER BY r_name, o_orderpriority;
```

Flink&#39;s catalog support also covers storing Flink-specific objects in external catalogs that might not be fully usable by the corresponding external tools. The most notable use case for this is, for example, storing a table that describes a Kafka topic in a Hive catalog. Take the following DDL statement, that contains a watermark declaration as well as a set of connector properties that are not recognizable by Hive. You won&#39;t be able to query the table with Hive, but it will be persisted and can be reused by different Flink jobs.

```sql
USE CATALOG hive;
CREATE TABLE prod_lineitem (
  l_orderkey INTEGER,
  l_partkey INTEGER,
  l_suppkey INTEGER,
  l_linenumber INTEGER,
  l_quantity DOUBLE,
  l_extendedprice DOUBLE,
  l_discount DOUBLE,
  l_tax DOUBLE,
  l_currency STRING,
  l_returnflag STRING,
  l_linestatus STRING,
  l_ordertime TIMESTAMP(3),
  l_shipinstruct STRING,
  l_shipmode STRING,
  l_comment STRING,
  l_proctime AS PROCTIME(),
  WATERMARK FOR l_ordertime AS l_ordertime - INTERVAL &#39;5&#39; SECONDS
) WITH (
  &#39;connector&#39;=&#39;kafka&#39;,
  &#39;topic&#39;=&#39;lineitem&#39;,
  &#39;scan.startup.mode&#39;=&#39;earliest-offset&#39;,
  &#39;properties.bootstrap.servers&#39;=&#39;kafka:9092&#39;,
  &#39;properties.group.id&#39;=&#39;testGroup&#39;,
  &#39;format&#39;=&#39;csv&#39;,
  &#39;csv.field-delimiter&#39;=&#39;|&#39;
);
```

With ``prod_lineitem`` stored in Hive, you can now write a query that will enrich the incoming stream with static data kept in Postgres. To illustrate how this works, let&#39;s calculate the item prices based on the current currency rates:

```sql
USE CATALOG postgres;
SELECT
  l_proctime AS `querytime`,
  l_orderkey AS `order`,
  l_linenumber AS `linenumber`,
  l_currency AS `currency`,
  rs_rate AS `cur_rate`,
  (l_extendedprice * (1 - l_discount) * (1 + l_tax)) / rs_rate AS `open_in_euro`
FROM hive.`default`.prod_lineitem
JOIN prod_rates FOR SYSTEM_TIME AS OF l_proctime ON rs_symbol = l_currency
WHERE
  l_linestatus = &#39;O&#39;;
```

The query above uses a `SYSTEM AS OF` [clause]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/streaming/temporal_tables.html#temporal-table) for executing a temporal join. If you&#39;d like to learn more about the different kind of joins you can do in Flink I highly encourage you to check [this documentation page]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/sql/queries.html#joins).

## Conclusion

Catalogs can be extremely powerful when building data platforms aimed at reusing the work of different teams in an organization. Centralizing the metadata is a common practice for improving productivity, security, and compliance when working with data.

Flink provides flexible metadata management capabilities, that aim at reducing the cumbersome, repetitive work needed before querying the data such as defining schemas, connection properties etc. As of version 1.11, Flink provides a native, comprehensive integration with Hive Metastore and a read-only version for Postgres catalogs.

You can get started with Flink and catalogs by reading [the docs]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/catalogs.html). If you want to play around with Flink SQL (e.g. try out how catalogs work in Flink yourself), you can check [this demo](https://github.com/fhueske/flink-sql-demo) prepared by our colleagues Fabian and Timo — it runs in a dockerized environment, and we used it for the examples in this blog post.
</description>
<pubDate>Thu, 23 Jul 2020 07:00:00 +0000</pubDate>
<link>https://flink.apache.org/2020/07/23/catalogs.html</link>
<guid isPermaLink="true">/2020/07/23/catalogs.html</guid>
</item>

<item>
<title>Apache Flink 1.11.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.11 series.

This release includes 44 fixes and minor improvements for Flink 1.11.0. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.11.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.11.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.11.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.11.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15794&#39;&gt;FLINK-15794&lt;/a&gt;] -         Rethink default value of kubernetes.container.image
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18324&#39;&gt;FLINK-18324&lt;/a&gt;] -         Translate updated data type and function page into Chinese
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18387&#39;&gt;FLINK-18387&lt;/a&gt;] -         Translate &amp;quot;BlackHole SQL Connector&amp;quot; page into Chinese
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18388&#39;&gt;FLINK-18388&lt;/a&gt;] -         Translate &amp;quot;CSV Format&amp;quot; page into Chinese
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18391&#39;&gt;FLINK-18391&lt;/a&gt;] -         Translate &amp;quot;Avro Format&amp;quot; page into Chinese
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18395&#39;&gt;FLINK-18395&lt;/a&gt;] -         Translate &amp;quot;ORC Format&amp;quot; page into Chinese
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18469&#39;&gt;FLINK-18469&lt;/a&gt;] -         Add Application Mode to release notes.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18524&#39;&gt;FLINK-18524&lt;/a&gt;] -         Scala varargs cause exception for new inference
&lt;/li&gt;
&lt;/ul&gt;
            
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15414&#39;&gt;FLINK-15414&lt;/a&gt;] -         KafkaITCase#prepare failed in travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16181&#39;&gt;FLINK-16181&lt;/a&gt;] -         IfCallGen will throw NPE for primitive types in blink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16572&#39;&gt;FLINK-16572&lt;/a&gt;] -         CheckPubSubEmulatorTest is flaky on Azure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17543&#39;&gt;FLINK-17543&lt;/a&gt;] -         Rerunning failed azure jobs fails when uploading logs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17636&#39;&gt;FLINK-17636&lt;/a&gt;] -         SingleInputGateTest.testConcurrentReadStateAndProcessAndClose: Trying to read from released RecoveredInputChannel
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18097&#39;&gt;FLINK-18097&lt;/a&gt;] -         History server doesn&amp;#39;t clean all job json files
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18419&#39;&gt;FLINK-18419&lt;/a&gt;] -         Can not create a catalog from user jar
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18434&#39;&gt;FLINK-18434&lt;/a&gt;] -         Can not select fields with JdbcCatalog
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18440&#39;&gt;FLINK-18440&lt;/a&gt;] -         ROW_NUMBER function: ROW/RANGE not allowed with RANK, DENSE_RANK or ROW_NUMBER functions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18461&#39;&gt;FLINK-18461&lt;/a&gt;] -         Changelog source can&amp;#39;t be insert into upsert sink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18470&#39;&gt;FLINK-18470&lt;/a&gt;] -         Tests RocksKeyGroupsRocksSingleStateIteratorTest#testMergeIteratorByte &amp;amp; RocksKeyGroupsRocksSingleStateIteratorTest#testMergeIteratorShort fail locally
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18471&#39;&gt;FLINK-18471&lt;/a&gt;] -         flink-runtime lists &amp;quot;org.uncommons.maths:uncommons-maths:1.2.2a&amp;quot; as a bundled dependency, but it isn&amp;#39;t
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18477&#39;&gt;FLINK-18477&lt;/a&gt;] -         ChangelogSocketExample does not work
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18478&#39;&gt;FLINK-18478&lt;/a&gt;] -         AvroDeserializationSchema does not work with types generated by avrohugger
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18485&#39;&gt;FLINK-18485&lt;/a&gt;] -         Kerberized YARN per-job on Docker test failed during unzip jce_policy-8.zip
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18519&#39;&gt;FLINK-18519&lt;/a&gt;] -         Propagate exception to client when execution fails for REST submission
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18520&#39;&gt;FLINK-18520&lt;/a&gt;] -         New Table Function type inference fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18529&#39;&gt;FLINK-18529&lt;/a&gt;] -         Query Hive table and filter by timestamp partition can fail
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18539&#39;&gt;FLINK-18539&lt;/a&gt;] -         StreamExecutionEnvironment#addSource(SourceFunction, TypeInformation) doesn&amp;#39;t use the user defined type information
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18573&#39;&gt;FLINK-18573&lt;/a&gt;] -         InfluxDB reporter cannot be loaded as plugin
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18583&#39;&gt;FLINK-18583&lt;/a&gt;] -         The _id field is incorrectly set to index in Elasticsearch6 DynamicTableSink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18585&#39;&gt;FLINK-18585&lt;/a&gt;] -         Dynamic index can not work in new DynamicTableSink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18591&#39;&gt;FLINK-18591&lt;/a&gt;] -         Fix the format issue for metrics web page
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18186&#39;&gt;FLINK-18186&lt;/a&gt;] -         Various updates on Kubernetes standalone document
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18422&#39;&gt;FLINK-18422&lt;/a&gt;] -         Update Prefer tag in documentation &amp;#39;Fault Tolerance training lesson&amp;#39;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18457&#39;&gt;FLINK-18457&lt;/a&gt;] -         Fix invalid links in &amp;quot;Detecting Patterns&amp;quot; page of &amp;quot;Streaming Concepts&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18472&#39;&gt;FLINK-18472&lt;/a&gt;] -         Local Installation Getting Started Guide
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18484&#39;&gt;FLINK-18484&lt;/a&gt;] -         RowSerializer arity error does not provide specific information about the mismatch
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18501&#39;&gt;FLINK-18501&lt;/a&gt;] -         Mapping of Pluggable Filesystems to scheme is not properly logged
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18526&#39;&gt;FLINK-18526&lt;/a&gt;] -         Add the configuration of Python UDF using Managed Memory in the doc of Pyflink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18532&#39;&gt;FLINK-18532&lt;/a&gt;] -         Remove Beta tag from MATCH_RECOGNIZE docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18561&#39;&gt;FLINK-18561&lt;/a&gt;] -         Build manylinux1 with better compatibility instead of manylinux2014 Python Wheel Packages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18593&#39;&gt;FLINK-18593&lt;/a&gt;] -         Hive bundle jar URLs are broken
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Test
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18534&#39;&gt;FLINK-18534&lt;/a&gt;] -         KafkaTableITCase.testKafkaDebeziumChangelogSource failed with &amp;quot;Topic &amp;#39;changelog_topic&amp;#39; already exists&amp;quot;
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18502&#39;&gt;FLINK-18502&lt;/a&gt;] -         Add the page &amp;#39;legacySourceSinks.zh.md&amp;#39;  into the directory &amp;#39;docs/dev/table&amp;#39; 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-18505&#39;&gt;FLINK-18505&lt;/a&gt;] -          Correct the content of &amp;#39;sourceSinks.zh.md&amp;#39; 
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 21 Jul 2020 18:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/07/21/release-1.11.1.html</link>
<guid isPermaLink="true">/news/2020/07/21/release-1.11.1.html</guid>
</item>

<item>
<title>Application Deployment in Flink: Current State and the new Application Mode</title>
<description>With the rise of stream processing and real-time analytics as a critical tool for modern 
businesses, an increasing number of organizations build platforms with Apache Flink at their
core and offer it internally as a service. Many talks with related topics from companies 
like [Uber](https://www.youtube.com/watch?v=VX3S9POGAdU), [Netflix](https://www.youtube.com/watch?v=VX3S9POGAdU)
and [Alibaba](https://www.youtube.com/watch?v=cH9UdK0yYjc) in the latest editions of Flink Forward further 
illustrate this trend. 

These platforms aim at simplifying application submission internally by lifting all the 
operational burden from the end user. To submit Flink applications, these platforms 
usually expose only a centralized or low-parallelism endpoint (*e.g.* a Web frontend) 
for application submission that we will call the *Deployer*.

One of the roadblocks that platform developers and maintainers often mention is that the 
Deployer can be a heavy resource consumer that is difficult to provision for. Provisioning 
for average load can lead to the Deployer service being overwhelmed with deployment 
requests (in the worst case, for all production applications in a short period of time), 
while planning based on top load leads to unnecessary costs. Building on this observation, 
Flink 1.11 introduces the [Application Mode](https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/#application-mode) 
as a deployment option, which allows for a lightweight, more scalable application 
submission process that manages to spread more evenly the application deployment load 
across the nodes in the cluster.

In order to understand the problem and how the Application Mode solves it, we start by 
describing briefly the current status of application execution in Flink, before 
describing the architectural changes introduced by the new deployment mode and how to 
leverage them.

# Application Execution in Flink

The execution of an application in Flink mainly involves three entities: the *Client*, 
the *JobManager* and the *TaskManagers*. The Client is responsible for submitting the application to the 
cluster, the JobManager is responsible for the necessary bookkeeping during execution, 
and the TaskManagers are the ones doing the actual computation. For more details please 
refer to [Flink&#39;s Architecture](https://ci.apache.org/projects/flink/flink-docs-stable/concepts/flink-architecture.html)
documentation page. 

## Current Deployment Modes

Before the introduction of the Application Mode in version 1.11, Flink allowed users to execute an application either on a 
*Session* or a *Per-Job Cluster*. The differences between the two have to do with the cluster 
lifecycle and the resource isolation guarantees they provide.

### Session Mode

Session Mode assumes an already running cluster and uses the resources of that cluster to 
execute any submitted application. Applications executed in the same (session) cluster use,
and consequently compete for, the same resources. This has the advantage that you do not 
pay the resource overhead of spinning up a full cluster for every submitted job. But, if 
one of the jobs misbehaves or brings down a TaskManager, then all jobs running on that 
TaskManager will be affected by the failure. Apart from a negative impact on the job that 
caused the failure, this implies a potential massive recovery process with all the 
restarting jobs accessing the file system concurrently and making it unavailable to other 
services. Additionally, having a single cluster running multiple jobs implies more load 
for the JobManager, which is responsible for the bookkeeping of all the jobs in the 
cluster. This mode is ideal for short jobs where startup latency is of high importance, 
*e.g.* interactive queries.

### Per-Job Mode

In Per-Job Mode, the available cluster manager framework (*e.g.* YARN or Kubernetes) is 
used to spin up a Flink cluster for each submitted job, which is available to that job 
only. When the job finishes, the cluster is shut down and any lingering resources 
(*e.g.* files) are cleaned up. This mode allows for better resource isolation, as a 
misbehaving job cannot affect any other job. In addition, it spreads the load of 
bookkeeping across multiple entities, as each application has its own JobManager. 
Given the aforementioned resource isolation concerns of the Session Mode, users often 
opt for the Per-Job Mode for long-running jobs which are willing to accept some increase 
in startup latency in favor of resilience.

To summarize, in Session Mode, the cluster lifecycle is independent of any job running on 
the cluster and all jobs running on the cluster share its resources. The per-job mode 
chooses to pay the price of spinning up a cluster for every submitted job, in order to 
provide better resource isolation guarantees as the resources are not shared across jobs. 
In this case, the lifecycle of the cluster is bound to that of the job.

## Application Submission

Flink application execution consists of two stages: *pre-flight*, when the users’ `main()`
method is called; and *runtime*, which is triggered as soon as the user code calls `execute()`.
The `main()` method constructs the user program using one of Flink’s APIs 
(DataStream API, Table API, DataSet API). When the `main()` method calls `env.execute()`, 
the user-defined pipeline is translated into a form that Flink&#39;s runtime can understand, 
called the *job graph*, and it is shipped to the cluster.

Despite their differences, both session and per-job modes execute the application’s `main()` 
method, *i.e.* the *pre-flight* phase, on the client side.[^1]

[^1]: The only exceptions are the Web Submission and the Standalone per-job implementation.

This is usually not a problem for individual users who already have all the dependencies
of their jobs locally, and then submit their applications through a client running on
their machine. But in the case of submission through a remote entity like the Deployer,
this process includes:

 * downloading the application’s dependencies locally, 

 * executing the main()method to extract the job graph, 

 * ship the job graph and its dependencies to the cluster for execution and, 

 * potentially, wait for the result. 

This makes the Client a heavy resource consumer as it may need substantial network
bandwidth to download dependencies and ship binaries to the cluster, and CPU cycles to
execute the `main()` method. This problem is even more pronounced as more users share
the same Client.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-07-14-application-mode/session-per-job.png&quot; width=&quot;75%&quot; alt=&quot;Session and Per-Job Mode&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

The figure above illustrates the two deployment modes using 3 applications depicted in
&lt;span style=&quot;color:red&quot;&gt;red&lt;/span&gt;, &lt;span style=&quot;color:blue&quot;&gt;blue&lt;/span&gt; and &lt;span style=&quot;color:green&quot;&gt;green&lt;/span&gt;. 
Each one has a parallelism of 3. The black rectangles represent 
different processes: TaskManagers, JobManagers and the Deployer; and we assume a single 
Deployer process in all scenarios. The colored triangles represent the load of the 
submission process, while the colored rectangles represent the load of the TaskManager 
and JobManager processes. As shown in the figure, the Deployer in both per-job and 
session mode share the same load. Their difference lies in the distribution of the 
tasks and the JobManager load. In the Session Mode, there is a single JobManager for 
all the jobs in the cluster while in the per-job mode, there is one for each job. In 
addition, tasks in Session Mode are assigned randomly to TaskManagers while in Per-Job 
Mode, each TaskManager can only have tasks of a single job.

# Application Mode

&lt;img style=&quot;float: right;margin-left:10px;margin-right: 15px;&quot; src=&quot;{{ site.baseurl }}/img/blog/2020-07-14-application-mode/application.png&quot; width=&quot;320px&quot; alt=&quot;Application Mode&quot;/&gt;

The Application Mode builds on the above observations and tries to combine the resource
isolation of the per-job mode with a lightweight and scalable application submission 
process. To achieve this, it creates a cluster *per submitted application*, but this 
time, the `main()` method of the application is executed on the JobManager. 

Creating a cluster per application can be seen as creating a session cluster shared 
only among the jobs of a particular application and torn down when the application 
finishes. With this architecture, the Application Mode provides the same resource 
isolation and load balancing guarantees as the Per-Job Mode, but at the granularity of 
a whole application. This makes sense, as jobs belonging to the same application are 
expected to be correlated and treated as a unit.

Executing the `main()` method on the JobManager allows saving the CPU cycles required 
for extracting the job graph, but also the bandwidth required on the client for 
downloading the dependencies locally and shipping the job graph and its dependencies 
to the cluster. Furthermore, it spreads the network load more evenly, as there is one 
JobManager per application. This is illustrated in the figure above, where we have the 
same scenario as in the session and per-job deployment mode section, but this time 
the client load has shifted to the JobManager of each application.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
In the Application Mode, the main() method is executed on the cluster and not on the Client, as in the other modes. 
This may have implications for your code as, for example, any paths you register in your 
environment using the registerCachedFile() must be accessible by the JobManager of 
your application.
&lt;/div&gt;

Compared to the Per-Job Mode, the Application Mode allows the submission of applications
consisting of multiple jobs. The order of job execution is not affected by the deployment
mode but by the call used to launch the job. Using the blocking `execute()` method 
establishes an order and will lead to the execution of the “next” job being postponed 
until “this” job finishes. In contrast, the non-blocking `executeAsync()` method will 
immediately continue to submit the “next” job as soon as the current job is submitted.

## Reducing Network Requirements

As described above, by executing the application&#39;s `main()` method on the JobManager, 
the Application Mode manages to save a lot of the resources previously required during 
job submission. But there is still room for improvement. 

Focusing on YARN, which already supports all the optimizations mentioned here[^2], and
even with the Application Mode in place, the Client is still required to send the user 
jar to the JobManager. In addition, *for each application*, the Client has to ship to 
the cluster the &quot;flink-dist&quot; directory which contains the binaries of the framework 
itself, including the `flink-dist.jar`, `lib/` and `plugin/` directories. These two can 
account for a substantial amount of bandwidth on the client side. Furthermore, shipping 
the same flink-dist binaries on every submission is both a waste of bandwidth but also 
of storage space which can be alleviated by simply allowing applications to share the 
same binaries.

[^2]: Support for Kubernetes will come soon.

In Flink 1.11, we introduce options that allow the user to:

 1. Specify a remote path to a directory where YARN can find the Flink distribution binaries, and

 2. Specify a remote path where YARN can find the user jar.

For 1., we leverage YARN’s distributed cache and allow applications to share these 
binaries. So, if an application happens to find copies of Flink on the local storage 
of its TaskManager due to a previous application that was executed on the same 
TaskManager, it will not even have to download it internally.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Both optimizations are available to all deployment modes on YARN, and not only the Application Mode.
&lt;/div&gt;

# Example: Application Mode on Yarn

For a full description, please refer to the official Flink documentation and more 
specifically to the page that refers to your cluster management framework, *e.g.* 
[YARN](https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/yarn_setup.html#run-an-application-in-application-mode) 
or [Kubernetes](https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/native_kubernetes.html#flink-kubernetes-application).
Here we will give some examples around YARN, where all the above features are available. 

To launch an application in Application Mode, you can use:

&lt;pre&gt;&lt;code&gt;&lt;b&gt;./bin/flink run-application -t yarn-application&lt;/b&gt; ./MyApplication.jar&lt;/code&gt;&lt;/pre&gt;

With this command, all configuration parameters, such as the path to a savepoint to 
be used to bootstrap the application’s state or the required JobManager/TaskManager 
memory sizes, can be specified by their configuration option, prefixed by `-D`. For 
a catalog of the available configuration options, please refer to Flink’s 
[configuration page](https://ci.apache.org/projects/flink/flink-docs-stable/ops/config.html).

As an example, the command to specify the memory sizes of the JobManager and the 
TaskManager would look like:

&lt;pre&gt;&lt;code&gt;./bin/flink run-application -t yarn-application \
    &lt;b&gt;-Djobmanager.memory.process.size=2048m&lt;/b&gt; \
    &lt;b&gt;-Dtaskmanager.memory.process.size=4096m&lt;/b&gt; \
    ./MyApplication.jar
&lt;/code&gt;&lt;/pre&gt;

As discussed earlier, the above will make sure that your application’s `main()` method 
will be executed on the JobManager. 

To further save the bandwidth of shipping the Flink distribution to the cluster, consider
pre-uploading the Flink distribution to a location accessible by YARN and using the 
`yarn.provided.lib.dirs` configuration option, as shown below:

&lt;pre&gt;&lt;code&gt;./bin/flink run-application -t yarn-application \
    -Djobmanager.memory.process.size=2048m \
    -Dtaskmanager.memory.process.size=4096m \
    &lt;b&gt;-Dyarn.provided.lib.dirs=&quot;hdfs://myhdfs/remote-flink-dist-dir&quot;&lt;/b&gt; \
    ./MyApplication.jar
&lt;/code&gt;&lt;/pre&gt;

Finally, in order to further save the bandwidth required to submit your application jar,
you can pre-upload it to HDFS, and specify the remote path that points to 
`./MyApplication.jar`, as shown below:

&lt;pre&gt;&lt;code&gt;./bin/flink run-application -t yarn-application \
    -Djobmanager.memory.process.size=2048m \
    -Dtaskmanager.memory.process.size=4096m \
    -Dyarn.provided.lib.dirs=&quot;hdfs://myhdfs/remote-flink-dist-dir&quot; \
    &lt;b&gt;hdfs://myhdfs/jars/MyApplication.jar&lt;/b&gt;
&lt;/code&gt;&lt;/pre&gt;

This will make the job submission extra lightweight as the needed Flink jars and the 
application jar are going to be picked up from the specified remote locations rather 
than be shipped to the cluster by the Client. The only thing the Client will ship to 
the cluster is the configuration of your application which includes all the 
aforementioned paths.

# Conclusion

We hope that this discussion helped you understand the differences between the various 
deployment modes offered by Flink and will help you to make informed decisions about 
which one is suitable in your own setup. Feel free to play around with them and report 
any issues you may find. If you have any questions or requests, do not hesitate to post 
them in the [mailing lists](https://wints.github.io/flink-web//community.html#mailing-lists)
and, hopefully, see you (virtually) at one of our conferences or meetups soon!
</description>
<pubDate>Tue, 14 Jul 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/07/14/application-mode.html</link>
<guid isPermaLink="true">/news/2020/07/14/application-mode.html</guid>
</item>

<item>
<title>Apache Flink 1.11.0 Release Announcement</title>
<description>The Apache Flink community is proud to announce the release of Flink 1.11.0! More than 200 contributors worked on over 1.3k issues to bring significant improvements to usability as well as new features to Flink users across the whole API stack. Some highlights that we&#39;re particularly excited about are:

* The core engine is introducing **unaligned checkpoints**, a major change to Flink&#39;s fault tolerance mechanism that improves checkpointing performance under heavy backpressure.

* A **new Source API** that simplifies the implementation of (custom) sources by unifying batch and streaming execution, as well as offloading internals such as event-time handling, watermark generation or idleness detection to Flink.

* Flink SQL is introducing **Support for Change Data Capture (CDC)** to easily consume and interpret database changelogs from tools like Debezium. The renewed **FileSystem Connector** also expands the set of use cases and formats supported in the Table API/SQL, enabling scenarios like streaming data directly from Kafka to Hive.

* Multiple performance optimizations to PyFlink, including support for **vectorized User-defined Functions (Pandas UDFs)**. This improves interoperability with libraries like Pandas and NumPy, making Flink more powerful for data science and ML workloads.

Read on for all major new features and improvements, important changes to be aware of and what to expect moving forward!

{% toc %}

The binary distribution and source artifacts are now available on the updated [Downloads page]({{ site.baseurl }}/downloads.html) of the Flink website, and the most recent distribution of PyFlink is available on [PyPI](https://pypi.org/project/apache-flink/). Please review the [release notes]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/release-notes/flink-1.11.html) carefully, and check the complete [release changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?version=12346364&amp;styleName=Html&amp;projectId=12315522) and [updated documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/flink-docs-release-1.11/) for more details. 

We encourage you to download the release and share your feedback with the community through the [Flink mailing lists](https://flink.apache.org/community.html#mailing-lists) or [JIRA](https://issues.apache.org/jira/projects/FLINK/summary).

## New Features and Improvements

### Unaligned Checkpoints (Beta)

Triggering a checkpoint in Flink will cause a [checkpoint barrier]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/internals/stream_checkpointing.html#barriers) to flow from the sources of your topology all the way towards the sinks. For operators that receive more than one input stream, the barriers flowing through each channel need to be aligned before the operator can snapshot its state and forward the checkpoint barrier — typically, this alignment will take just a few milliseconds to complete, but it can become a bottleneck in backpressured pipelines as:

 * Checkpoint barriers will flow much slower through backpressured channels, effectively blocking the remaining channels and their upstream operators during checkpointing;

 * Slow checkpoint barrier propagation leads to longer checkpointing times and can, worst case, result in little to no progress in the application.

To improve the performance of checkpointing under backpressure scenarios, the community is rolling out the first iteration of unaligned checkpoints ([FLIP-76](https://cwiki.apache.org/confluence/display/FLINK/FLIP-76%3A+Unaligned+Checkpoints)) with Flink 1.11. Compared to the original checkpointing mechanism (Fig. 1), this approach doesn’t wait for barrier alignment across input channels, instead allowing barriers to overtake in-flight records (i.e., data stored in buffers) and forwarding them downstream before the synchronous part of the checkpoint takes place (Fig. 2).

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;figure&gt;
		&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-07-06-release-1.11.0/image1.gif&quot; width=&quot;600px&quot; alt=&quot;Aligned Checkpoints&quot;/&gt;
		&lt;br/&gt;&lt;br/&gt;
		&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.1:&lt;/b&gt; Aligned Checkpoints&lt;/i&gt;&lt;/figcaption&gt;
	  &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;figure&gt;
		&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-07-06-release-1.11.0/image2.png&quot; width=&quot;600px&quot; alt=&quot;Unaligned Checkpoints&quot;/&gt;
		&lt;br/&gt;&lt;br/&gt;
		&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.2:&lt;/b&gt; Unaligned Checkpoints&lt;/i&gt;&lt;/figcaption&gt;
	  &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

Because in-flight records have to be persisted as part of the snapshot, unaligned checkpoints will lead to increased checkpoints sizes. On the upside, **checkpointing times are heavily reduced**, so users will see more progress (even in unstable environments) as more up-to-date checkpoints will lighten the recovery process. You can learn more about the current limitations of unaligned checkpoints in the [documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/ops/state/checkpoints.html#unaligned-checkpoints), and track the improvement work planned for this feature in [FLINK-14551](https://issues.apache.org/jira/browse/FLINK-14551). 

As with any beta feature, we appreciate early feedback that you might want to share with the community after giving unaligned checkpoints a try!

&lt;span class=&quot;label label-info&quot;&gt;Info&lt;/span&gt; To enable this feature, you need to configure the [``enableUnalignedCheckpoints``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/streaming/api/environment/CheckpointConfig.html) option in your [checkpoint config]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/stream/state/checkpointing.html#enabling-and-configuring-checkpointing). Please note that unaligned checkpoints can only be enabled if ``checkpointingMode`` is set to ``CheckpointingMode.EXACTLY_ONCE``.

### Unified Watermark Generators

So far, watermark generation (prev. also called _assignment_) relied on two different interfaces: [``AssignerWithPunctuatedWatermarks``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/streaming/api/functions/AssignerWithPunctuatedWatermarks.html) and [``AssignerWithPeriodicWatermarks``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/streaming/api/functions/AssignerWithPeriodicWatermarks.html); that were closely intertwined with timestamp extraction. This made it difficult to implement long-requested features like support for idleness detection, besides leading to code duplication and maintenance burden. With [FLIP-126](https://cwiki.apache.org/confluence/display/FLINK/FLIP-126%3A+Unify+%28and+separate%29+Watermark+Assigners), the legacy watermark assigners are unified into a single interface: the [``WatermarkGenerator``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/api/common/eventtime/WatermarkGenerator.html); and detached from the [``TimestampAssigner``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/api/common/eventtime/TimestampAssigner.html). 

This gives users more control over watermark emission and simplifies the implementation of new connectors that need to support watermark assignment and timestamp extraction at the source (see _[New Data Source API](#new-data-source-api-beta)_). Multiple [strategies for watermarking]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11//dev/event_timestamps_watermarks.html#introduction-to-watermark-strategies) are available out-of-the-box as convenience methods in Flink 1.11 (e.g. [``forBoundedOutOfOrderness``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/api/common/eventtime/WatermarkStrategy.html#forBoundedOutOfOrderness-java.time.Duration-), [``forMonotonousTimestamps``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/api/common/eventtime/WatermarkStrategy.html#forMonotonousTimestamps--)), though you can also choose to customize your own.

**Support for Watermark Idleness Detection**

The [``WatermarkStrategy.withIdleness()``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/api/common/eventtime/WatermarkStrategy.html#withIdleness-java.time.Duration-) method allows you to mark a stream as idle if no events arrive within a configured time (i.e. a timeout duration), which in turn allows handling event time skew properly and preventing idle partitions from holding back the event time progress of the entire application. Users can already benefit from **per-partition idleness detection** in the Kafka connector, which has been adapted to use the new interfaces ([FLINK-17669](https://issues.apache.org/jira/browse/FLINK-17669)).

&lt;span class=&quot;label label-info&quot;&gt;Note&lt;/span&gt; [FLIP-126](https://cwiki.apache.org/confluence/display/FLINK/FLIP-126%3A+Unify+%28and+separate%29+Watermark+Assigners) introduces no breaking changes, but we recommend that users give preference to the new ``WatermarkGenerator`` interface moving forward, in preparation for the deprecation of the legacy watermark assigners in future releases.

### New Data Source API (Beta)

Up to this point, writing a production-grade source connector for Flink was a non-trivial task that required users to be somewhat familiar with Flink internals and account for implementation details like event time assignment, watermark generation or idleness detection in their code. Flink 1.11 introduces a new Data Source API ([FLIP-27](https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface)) to overcome these limitations, as well as the need to rewrite separate code for batch and streaming execution.

&lt;center&gt;
	&lt;figure&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-07-06-release-1.11.0/image3.png&quot; width=&quot;600px&quot; alt=&quot;Data Source API&quot;/&gt;
	&lt;/figure&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

Separating the work of split discovery and the actual reading of the consumed data (i.e. the [_splits_]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/stream/sources.html#data-source-concepts)) in different components — resp. the ``SplitEnumerator`` and ``SourceReader`` — allows mixing and matching different enumeration strategies and split readers. 

As an example, the existing Kafka connector has multiple strategies for partition discovery that are intermingled with the rest of the code. With the new interfaces in place, it would only need a single reader implementation and there could be several split enumerators for the different partition discovery strategies.

**Batch and Streaming Unification**

Source connectors implemented using the Data Source API will be able to work both as a bounded (_batch_) and unbounded (_streaming_) source. The difference between both cases is minimal: for bounded input, the ``SplitEnumerator`` will generate a fixed set of splits and each split is finite; for unbounded input, either the splits are not finite or the ``SplitEnumerator`` keeps generating new splits.

**Implicit Watermark and Event Time Handling**

The ``TimestampAssigner`` and ``WatermarkGenerator`` run transparently as part of the ``SourceReader`` component, so users also don’t have to implement any timestamp extraction or watermark generation code.

&lt;span class=&quot;label label-info&quot;&gt;Note&lt;/span&gt; The existing source connectors have not yet been reimplemented using the Data Source API — this is planned for upcoming releases. If you’re looking to implement a new source, please refer to the [Data Source documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/stream/sources.html#data-sources) and [the tips on source development]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/stream/sources.html#the-data-source-api).

### Application Mode Deployments

Prior to Flink 1.11, jobs in a Flink application could either be submitted to a long-running [Flink Session Cluster]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/concepts/flink-architecture.html#flink-session-cluster) (_session mode_) or a dedicated [Flink Job Cluster]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/concepts/flink-architecture.html#flink-job-cluster) (_job mode_). For both these modes, the ``main()`` method of user programs runs on the _client_ side. This presents some challenges: on one hand, if the client is part of a large installation, it can easily become a bottleneck for ``JobGraph`` generation; and on the other, it’s not a good fit for containerized environments like Docker or Kubernetes.

From this release on, Flink gets an additional deployment mode: [Application Mode]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/ops/deployment/#application-mode) ([FLIP-85](https://cwiki.apache.org/confluence/display/FLINK/FLIP-85+Flink+Application+Mode)); where the ``main()`` method runs on the cluster, rather than the client. The job submission becomes a one-step process: you package your application logic and dependencies into an executable job JAR and the cluster entrypoint ([``ApplicationClusterEntryPoint``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/client/deployment/application/ApplicationClusterEntryPoint.html)) is responsible for calling the ``main()`` method to extract the ``JobGraph``. 

In Flink 1.11, the community worked to already support _application mode_ in Kubernetes ([FLINK-10934](https://issues.apache.org/jira/browse/FLINK-10934)).

### Other Improvements

**Unified Memory Configuration for JobManagers ([FLIP-116](https://jira.apache.org/jira/browse/FLINK-16614))**

Following the work started in Flink 1.10 to improve memory management and configuration, this release introduces a new memory model that aligns the [JobManagers’ configuration options]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/ops/memory/mem_setup_jobmanager.html) and terminology with that introduced in [FLIP-49](https://cwiki.apache.org/confluence/display/FLINK/FLIP-49%3A+Unified+Memory+Configuration+for+TaskExecutors) for TaskManagers. This affects all deployment types: standalone, YARN, Mesos and the new active Kubernetes integration. 

&lt;span class=&quot;label label-danger&quot;&gt;Attention&lt;/span&gt; Reusing a previous Flink configuration without any adjustments can result in differently computed memory parameters for the JVM and, as a result, performance changes or even failures. Make sure to check the [migration guide](https://ci.apache.org/projects/flink/flink-docs-master/ops/memory/mem_migration.html#migrate-job-manager-memory-configuration) if you’re planning to update to the latest version.

**Improvements to the Flink WebUI ([FLIP-75](https://cwiki.apache.org/confluence/display/FLINK/FLIP-75%3A+Flink+Web+UI+Improvement+Proposal))**

In Flink 1.11, the community kicked off a series of improvements to the Flink WebUI. The first to roll out are better TaskManager and JobManager log display ([FLIP-103](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=147427143)), as well as a new thread dump utility ([FLINK-14816](https://issues.apache.org/jira/browse/FLINK-14816)). Some additional work planned for upcoming releases includes better backpressure detection, more flexible and configurable exception display and support for displaying the history of subtask failure attempts.

**Docker Image Unification ([FLIP-111](https://cwiki.apache.org/confluence/display/FLINK/FLIP-111%3A+Docker+image+unification))**

With this release, all Docker-related resources have been consolidated into [apache/flink-docker](https://github.com/apache/flink-docker) and the entry point script has been extended to allow users to run the default Docker image in different modes without the need to create a custom image. The [updated documentation](https://ci.apache.org/projects/flink/flink-docs-master/ops/deployment/docker.html#customize-flink-image) describes in detail how to use and customize the official Flink Docker image for different environments and deployment modes.

&lt;hr&gt;

### Table API/SQL: Support for Change Data Capture (CDC)

Change Data Capture (CDC) has become a popular pattern to capture committed changes from a database and propagate those changes to downstream consumers, for example to keep multiple datastores in sync and avoid common pitfalls such as [dual writes](https://thorben-janssen.com/dual-writes/). Being able to easily ingest and interpret these changelogs into the Table API/SQL has been a highly demanded feature in the Flink community — and it’s now possible with Flink 1.11.

To extend the scope of the Table API/SQL to use cases like CDC, Flink 1.11 introduces new table source and sink interfaces with **changelog mode** (see _[New TableSource and TableSink Interfaces](#other-improvements-to-the-table-apisql)_) and support for the [Debezium](https://debezium.io/) and [Canal](https://github.com/alibaba/canal) formats ([FLIP-105](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=147427289)). This means that dynamic tables sources are no longer limited to append-only operations and can ingest these external changelogs (``INSERT`` events), interpret them into change operations (``INSERT``, ``UPDATE``, ``DELETE`` events) and emit them downstream with the change type.

&lt;center&gt;
	&lt;figure&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-07-06-release-1.11.0/image4.png&quot; width=&quot;500px&quot; alt=&quot;CDC&quot;/&gt;
	&lt;/figure&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

Users have to specify either ``“format=debezium-json”`` or ``“format=canal-json”`` in their ``CREATE TABLE`` statement to consume changelogs using SQL DDL. 

```sql
CREATE TABLE my_table (
  ...
) WITH (
  &#39;connector&#39;=&#39;...&#39;, -- e.g. &#39;kafka&#39;
  &#39;format&#39;=&#39;debezium-json&#39;,
  &#39;debezium-json.schema-include&#39;=&#39;true&#39; -- default: false (Debezium can be configured to include or exclude the message schema)
  &#39;debezium-json.ignore-parse-errors&#39;=&#39;true&#39; -- default: false
);
```

Flink 1.11 only supports Kafka as a changelog source out-of-the-box and JSON-encoded changelogs, with Avro (Debezium) and Protobuf (Canal) planned for future releases. There are also plans to support MySQL binlogs and Kafka compacted topics as sources, as well as to extend changelog support to batch execution.

&lt;span class=&quot;label label-danger&quot;&gt;Attention&lt;/span&gt; There is a known issue ([FLINK-18461](https://issues.apache.org/jira/browse/FLINK-18461)) that prevents changelog sources from being used to write to upsert sinks (e.g. MySQL, HBase, Elasticsearch). This will be fixed in the next patch release (1.11.1).

### Table API/SQL: JDBC Catalog Interface and Postgres Catalog

Flink 1.11 introduces a generic JDBC catalog interface ([FLIP-93](https://cwiki.apache.org/confluence/display/FLINK/FLIP-93%3A+JDBC+catalog+and+Postgres+catalog)) that enables users of the Table API/SQL to **derive table schemas automatically** from connections to relational databases over [JDBC]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/connect.html#jdbc-connector). This eliminates the previous need for manual schema definition and type conversion, and also allows to check for schema errors at compile time instead of runtime. 

The first implementation, rolling out with the new release, is the [Postgres catalog]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/catalogs.html#postgrescatalog).

### Table API/SQL: FileSystem Connector with Support for Avro, ORC and Parquet

To improve the user experience for end-to-end streaming ETL use cases, the Flink community worked on a new FileSystem Connector for the Table API/SQL ([FLIP-115](https://cwiki.apache.org/confluence/display/FLINK/FLIP-115%3A+Filesystem+connector+in+Table)). The implementation is based on Flink’s [FileSystem abstraction]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/ops/filesystems/index.html) and reuses [StreamingFileSink]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/connectors/streamfile_sink.html) to ensure the same set of capabilities and consistent behaviour with the DataStream API. 

This also means that Table API/SQL users can now make use of all formats already supported by StreamingFileSink, like (Avro) Parquet, as well as the new formats introduced with this release, like Avro ([FLINK-11395](https://issues.apache.org/jira/browse/FLINK-11395)) and Orc ([FLINK-10114](https://issues.apache.org/jira/browse/FLINK-10114)).

```sql
CREATE TABLE my_table (
  column_name1 INT,
  column_name2 STRING,
  ...
  part_name1 INT,
  part_name2 STRING
) PARTITIONED BY (part_name1, part_name2) WITH (
  &#39;connector&#39; = &#39;filesystem&#39;,         
  &#39;path&#39; = &#39;file:///path/to/file,
  &#39;format&#39; = &#39;...&#39;,  -- supported formats: Avro, ORC, Parquet, CSV, JSON         
  ...
);

```

The new all-rounder FileSystem Connector transparently handles batch and streaming execution, provides exactly-once guarantees and has full partition support, greatly expanding the scope of usage of the [legacy connector]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/connect.html#file-system-connector). This allows users to easily implement common use cases like **directly streaming data from Kafka to Hive**. 

You can track the upcoming improvements to the FileSystem Connector in [FLINK-17778](https://issues.apache.org/jira/browse/FLINK-17778).

### Table API/SQL: Support for Python UDFs

Prior to this release, users of the Table API/SQL were limited to defining UDFs in either Java or Scala. In Flink 1.11, the community worked on expanding the usage scope of the Python language beyond PyFlink and providing support for Python UDFs in the SQL DDL syntax ([FLIP-106](https://cwiki.apache.org/confluence/display/FLINK/FLIP-106%3A+Support+Python+UDF+in+SQL+Function+DDL)), as well as the SQL Client ([FLIP-114](https://cwiki.apache.org/confluence/display/FLINK/FLIP-114%3A+Support+Python+UDF+in+SQL+Client)). Users can also register Python UDFs in the system catalog via SQL DDL or the Java Catalog API, so that functions can be shared between jobs.

### Other Improvements to the Table API/SQL

**DDL and DML Compatibility for the Hive Connector ([FLIP-123](https://cwiki.apache.org/confluence/display/FLINK/FLIP-123%3A+DDL+and+DML+compatibility+for+Hive+connector))**

Starting from Flink 1.11, users can write SQL statements directly using Hive syntax (HiveQL) in the Table API/SQL and the SQL Client. For this purpose, an additional dialect was introduced and users can now dynamically switch between Flink (``default``) and Hive (``hive``) on a per-statement basis. For a complete list of supported DDL and DML statements, check the Hive dialect [documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/hive/hive_dialect.html#hive-dialect).

**Extensions and Improvements to the Flink SQL Syntax**

* Flink 1.11 introduces the concept of [primary key constraints]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/sql/create.html#create-table) to leverage runtime optimizations in Flink SQL DDL ([FLIP-87](https://cwiki.apache.org/confluence/display/FLINK/FLIP+87%3A+Primary+key+constraints+in+Table+API));

* View objects are now fully supported in SQL DDL using the ``CREATE``/``ALTER``/``DROP VIEW`` statements ([FLIP-71](https://cwiki.apache.org/confluence/display/FLINK/FLIP-71%3A+E2E+View+support+in+FLINK+SQL));

* Users can now specify or override table options in their DQL/DML statements using [dynamic table options](https://ci.apache.org/projects/flink/flink-docs-master/dev/table/sql/hints.html#dynamic-table-options) ([FLIP-113](https://cwiki.apache.org/confluence/display/FLINK/FLIP-113%3A+Supports+Dynamic+Table+Options+for+Flink+SQL)).

* To make connector properties less verbose and improve exception handling, some key properties have been refactored ([FLIP-122](https://cwiki.apache.org/confluence/display/FLINK/FLIP-122%3A+New+Connector+Property+Keys+for+New+Factory)). This change does not break compatibility, so users can still use the old property keys.

**New TableSource and TableSink Interfaces ([FLIP-95](https://cwiki.apache.org/confluence/display/FLINK/FLIP-95%3A+New+TableSource+and+TableSink+interfaces))**

Flink 1.11 introduces new table source and sink interfaces (resp. [``DynamicTableSource``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/table/connector/source/DynamicTableSource.html) and [``DynamicTableSink``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/table/connector/sink/DynamicTableSink.html)) that unify batch and streaming execution, provide more efficient data processing with the Blink planner and offer support for handling changelogs (see _[Support for Change Data Capture (CDC)](#table-apisql-support-for-change-data-capture-cdc)_). The new interfaces also make it easier for users to [implement custom connectors]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/sourceSinks.html#full-stack-example) or modify existing ones. For an end-to-end example on how to implement a custom scan table source with a decoding format that supports changelog semantics, check out the [documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/sourceSinks.html#full-stack-example).

&lt;span class=&quot;label label-info&quot;&gt;Note&lt;/span&gt; Although compatibility is not immediately affected, we recommend that Table API/SQL users update any sources and sinks to the new interface stack.

**Refactored TableEnvironment Interface ([FLIP-84](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=134745878))**

The semantics to describe similar behaviours in the ``TableEnvironment`` and ``Table`` interfaces have diverged over time, leading to an inconsistent and sometimes unclear user experience. To improve this and make programming more fluent in the Table API/SQL, Flink 1.11 introduces new methods that unify behaviours like execution triggering (e.g. ``executeSql()``) and result representation (e.g. [``print()``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/table/api/TableResult.html#print--), [``collect()``]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/api/java/org/apache/flink/table/api/TableResult.html#collect--)), and also lay the groundwork for important features like [multi-statement execution support](https://lists.apache.org/thread.html/r076e63bf6c8ed42d1b9ed2b406029696274a3a90cc360bc3a03e65d2%40%3Cdev.flink.apache.org%3E) in future releases.

&lt;span class=&quot;label label-info&quot;&gt;Note&lt;/span&gt; The methods deprecated with FLIP-84 will not be immediately removed, but we recommend that users adopt the newly introduced methods. For a complete list of new and deprecated methods, check the “Summary” section of [FLIP-84](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=134745878).

**New Type Inference for Table API UDFs ([FLIP-65](https://cwiki.apache.org/confluence/display/FLINK/FLIP-65%3A+New+type+inference+for+Table+API+UDFs))**

In Flink 1.9, the community started working on a [new data type system]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/types.html#data-types) for the Table API to improve its compliance with the SQL standard ([FLIP-37](https://cwiki.apache.org/confluence/display/FLINK/FLIP-37%3A+Rework+of+the+Table+API+Type+System)). This work is now close to being completed in Flink 1.11, with the exposure of Table API UDFs to the new type system (scalar and table functions, with aggregate functions planned for the next release).

&lt;hr&gt;

### PyFlink: Support for Pandas UDFs

Up to this release, Python UDFs in PyFlink only supported scalar values of standard Python types. This presented some limitations:

 * High serialization/deserialization overhead in the process of transferring data between the JVM and the Python processes;

 * Hard to integrate with common Python libraries for high-performance numerical processing like pandas and NumPy.

To overcome these limitations, the community introduced support for (scalar) **vectorized Python UDFs** based on [pandas](https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html) in Flink 1.11 ([FLIP-97](https://cwiki.apache.org/confluence/display/FLINK/FLIP-97%3A+Support+Scalar+Vectorized+Python+UDF+in+PyFlink)). The performance of vectorized UDFs is usually much higher, as the serialization/deserialization overhead is minimized by falling back to [Apache Arrow](https://arrow.apache.org/); and handling ``pandas.Series`` as input/output allows to take full advantage of the pandas and NumPy libraries. This makes Pandas UDFs a popular solution to parallelize Machine Learning and other large-scale, distributed data science workloads (e.g. feature engineering, distributed model application).

```python
@udf(input_types=[DataTypes.BIGINT(), DataTypes.BIGINT()], result_type=DataTypes.BIGINT(), udf_type=&quot;pandas&quot;)
def add(i, j):
  return i + j
```

To mark a UDF as a Pandas UDF, you only need to add an extra parameter ``udf_type=”pandas”`` in the udf decorator, as described in the [documentation](https://ci.apache.org/projects/flink/flink-docs-master/dev/table/python/vectorized_python_udfs.html#vectorized-user-defined-functions).

### Other Improvements to PyFlink

**Conversion fromPandas/toPandas ([FLIP-120](https://cwiki.apache.org/confluence/display/FLINK/FLIP-120%3A+Support+conversion+between+PyFlink+Table+and+Pandas+DataFrame))**

Arrow is also supported as an optimization to convert between PyFlink tables and [``pandas.DataFrames``](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html), enabling users to switch processing engines seamlessly without the need for an intermediate connector. For examples on how to use the new ``fromPandas()`` and ``toPandas()`` methods in PyFlink, check out the [documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/python/conversion_of_pandas.html#conversions-between-pyflink-table-and-pandas-dataframe).

**Support for User-defined Table Functions (UDTFs) ([FLINK-14500](https://jira.apache.org/jira/browse/FLINK-14500))**

From Flink 1.11, you can define and register custom [UDTFs]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/dev/table/python/python_udfs.html#table-functions) in PyFlink. Similar to a Python UDF, a UDTF takes zero, one or multiple scalar values as input, but can return an arbitrary number of rows as output instead of a single value.

**Cython Performance Optimization for UDFs ([FLIP-121](https://cwiki.apache.org/confluence/display/FLINK/FLIP-121%3A+Support+Cython+Optimizing+Python+User+Defined+Function))**

[Cython](https://cython.readthedocs.io/en/latest/src/quickstart/cythonize.html) is a compiled superset of the Python language that is often used to improve the performance of large-scale numeric processing in Python, as it optimizes execution to machine code-level speed and pairs well with popular C-based libraries like NumPy. From Flink 1.11, you can build [PyFlink with Cython support]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/flinkDev/building.html#build-pyflink) and “Cythonize” your Python UDFs to substantially improve code execution speed (up to 30x faster, compared to Python UDFs in Flink 1.10).

**User-defined Metrics in Python UDFs ([FLIP-112](https://cwiki.apache.org/confluence/display/FLINK/FLIP-112%3A+Support+User-Defined+Metrics+in++Python+UDF))**

To make it easier for users to monitor and debug the execution of Python UDFs, PyFlink now allows gathering and exposing metrics to external systems, as well as defining user scopes and variables. You can access the metrics system from a UDF by calling ``function_context.get_metric_group()`` in the open method, as described in the [documentation](https://ci.apache.org/projects/flink/flink-docs-master/dev/table/python/metrics.html#registering-metrics).

&lt;hr&gt;

## Important Changes

 * [[FLINK-17339](https://jira.apache.org/jira/browse/FLINK-17339)] The Blink planner is the **default** in the Table API/SQL starting from Flink 1.11. This was already the case for the SQL Client since Flink 1.10. The old Flink planner is still supported, but not actively developed.

 * [[FLINK-5763](https://issues.apache.org/jira/browse/FLINK-5763)] Savepoints now contain all their state inside a single directory (both metadata and program state). This makes it straightforward to figure out which files make up the state of a savepoint and allows users to **relocate savepoints** by simply moving a directory.

 * [[FLINK-16408](https://issues.apache.org/jira/browse/FLINK-16408)] To reduce pressure on the JVM metaspace, the user code class loader is being reused by a ``TaskExecutor`` as long as there is at least a single slot allocated for the respective job. This changes Flink&#39;s recovery behaviour slightly, so that it will not reload static fields.

* [[FLINK-11086](https://issues.apache.org/jira/browse/FLINK-11086)] Flink now supports Hadoop versions above **Hadoop 3.0.0**. Note that the Flink project does not provide any updated &quot;flink-shaded-hadoop-\*&quot; jars. Users need to provide Hadoop dependencies through the ``HADOOP_CLASSPATH`` environment variable (recommended) or the lib/ folder.

* [[FLINK-16963](https://issues.apache.org/jira/browse/FLINK-16963)] All ``MetricReporters`` that come with Flink have been converted to plugins. These should no longer be placed into ``/lib`` (which may result in dependency conflicts), but ``/plugins/&lt;some_directory&gt;`` instead.

* [[FLINK-12639](https://issues.apache.org/jira/browse/FLINK-12639)] The Flink **documentation** is undergoing some **rework**, so you might notice that the navigation and organization of content look slightly different starting from Flink 1.11.


## Release Notes

Please review the [release notes]({{ site.DOCS_BASE_URL }}flink-docs-release-1.11/release-notes/flink-1.11.html) carefully for a detailed list of changes and new features if you plan to upgrade your setup to Flink 1.11. This version is API-compatible with previous 1.x releases for APIs annotated with the @Public annotation.

## List of Contributors

The Apache Flink community would like to thank all the 200+ contributors that have made this release possible:

Aitozi, Alexander Fedulov, Alexey Trenikhin, Aljoscha Krettek, Andrey Zagrebin, Arvid Heise, Ayush Saxena, Bairos, Bartosz Krasinski, Benchao Li, Benoit Hanotte, Benoît Paris, Bhagavan Das, Canbin Zheng, Cedric Chen, Chesnay Schepler, Colm O hEigeartaigh, Congxian Qiu, CrazyTomatoOo, Danish Amjad, Danny Chan, David Anderson, Dawid Wysakowicz, Dian Fu, Dominik Wosiński, Echo Lee, Ethan Marsh, Etienne Chauchot, Fabian Hueske, Fabian Paul, Flavio Pompermaier, Gao Yun, Gary Yao, Ghildiyal, Grebennikov Roman, GuoWei Ma, Guru Prasad, Gyula Fora, Hequn Cheng, Hu Guang, HuFeiHu, HuangXingBo, Igal Shilman, Ismael Juma, Jacob Sevart, Jark Wu, Jaskaran Bindra, Jason K, Jeff Yang, Jeff Zhang, Jerry Wang, Jiangjie (Becket) Qin, Jiayi, Jiayi Liao, Jiayi-Liao, Jincheng Sun, Jing Zhang, Jingsong Lee, JingsongLi, Jun Qin, JunZhang, Jörn Kottmann, Kevin Bohinski, Konstantin Knauf, Kostas Kloudas, Kurt Young, Leonard Xu, Lining Jing, Liupengcheng, LululuAlu, Marta Paes Moreira, Matt Welke, Max Kuklinski, Maximilian Michels, Nico Kruber, Niels Basjes, Oleksandr Nitavskyi, Paul Lam, Paul Lin, PengFei Li, PengchengLiu, Piotr Nowojski, Prem Santosh, Qingsheng Ren, Rafi Aroch, Raymond Farrelly, Richard Deurwaarder, Robert Metzger, RocMarshal, Roey Shem Tov, Roman, Roman Khachatryan, Rong Rong, RoyRuan, Rui Li, Seth Wiesman, Shaobin.Ou, Shengkai, Shuiqiang Chen, Shuo Cheng, Sivaprasanna, Sivaprasanna S, SteNicholas, Stefan Richter, Stephan Ewen, Steve OU, Steve Whelan, Tartarus, Terry Wang, Thomas Weise, Till Rohrmann, Timo Walther, TsReaper, Tzu-Li (Gordon) Tai, Victor Wong, Wei Zhong, Weike DONG, Xiaogang Zhou, Xintong Song, Xu Bai, Xuannan, Yadong Xie, Yang Wang, Yangze Guo, Yichao Yang, Ying, Yu Li, Yuan Mei, Yun Gao, Yun Tang, Yuval Itzchakov, Zakelly, Zhao, Zhenghua Gao, Zhijiang, Zhu Zhu, acqua.csq, austin ce, azagrebin, bdine, bowen.li, caoyingjie, caozhen, caozhen1937, chaojianok, chen, chendonglin, comsir, cpugputpu, czhang2, dianfu, edu05, eduardowt, fangliang, felixzheng, fmyblack, gauss, gk0916, godfrey he, godfreyhe, guliziduo, guowei.mgw, hehuiyuan, hequn8128, hpeter, huangxingbo, huzheng, ifndef-SleePy, jingwen-ywb, jrthe42, kevin.cyj, klion26, lamber-ken, leesf, libenchao, lijiewang.wlj, liuyongvs, lsy, lumen, machinedoll, mans2singh, molsionmo, oliveryunchang, openinx, paul8263, ptmagic, qqibrow, sev7e0, shuai-xu, shuai.xu, shuiqiangchen, snuyanzin, spafka, sunhaibotb, sunjincheng121, testfixer, tison, vinoyang, vthinkxie, wangtong, wangxianghu, wangxiyuan, wangxlong, wangyang0918, wenlong.lwl, whlwanghailong, william, windWheel, wooplevip, wuxuyang, xushiwei, xuyang1706, yanghua, yangyichao-mango, yuzhao.cyz, zentol, zhanglibing, zhangmang, zhangzhanchun, zhengcanbin, zhengshuli, zhenxianyimeng, zhijiang, zhongyong jin, zhule, zhuxiaoshang, zjuwangg, zoudan, zoudaokoulife, zzchun, “lzh576177775”, 骚sir, 厉颖, 张军, 曹建华, 漫步云端
</description>
<pubDate>Mon, 06 Jul 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/07/06/release-1.11.0.html</link>
<guid isPermaLink="true">/news/2020/07/06/release-1.11.0.html</guid>
</item>

<item>
<title>Flink on Zeppelin Notebooks for Interactive Data Analysis - Part 2</title>
<description>In a previous post, we introduced the basics of Flink on Zeppelin and how to do Streaming ETL. In this second part of the &quot;Flink on Zeppelin&quot; series of posts, I will share how to 
perform streaming data visualization via Flink on Zeppelin and how to use Apache Flink UDFs in Zeppelin. 

# Streaming Data Visualization

With [Zeppelin](https://zeppelin.apache.org/), you can build a real time streaming dashboard without writing any line of javascript/html/css code.

Overall, Zeppelin supports 3 kinds of streaming data analytics:

* Single Mode
* Update Mode
* Append Mode

### Single Mode
Single mode is used for cases when the result of a SQL statement is always one row, such as the following example. 
The output format is translated in HTML, and you can specify a paragraph local property template for the final output content template. 
And you can use `{i}` as placeholder for the {i}th column of the result.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-23-flink-on-zeppelin-part2/flink_single_mode.gif&quot; width=&quot;80%&quot; alt=&quot;Single Mode&quot;/&gt;
&lt;/center&gt;

### Update Mode
Update mode is suitable for the cases when the output format is more than one row, 
and will always be continuously updated. Here’s one example where we use ``GROUP BY``.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-23-flink-on-zeppelin-part2/flink_update_mode.gif&quot; width=&quot;80%&quot; alt=&quot;Update Mode&quot;/&gt;
&lt;/center&gt;

### Append Mode
Append mode is suitable for the cases when the output data is always appended. 
For instance, the example below uses a tumble window.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-23-flink-on-zeppelin-part2/flink_append_mode.gif&quot; width=&quot;80%&quot; alt=&quot;Append Mode&quot;/&gt;
&lt;/center&gt;

# UDF

SQL is a very powerful language, especially in expressing data flow. But most of the time, you need to handle complicated business logic that cannot be expressed by SQL.
In these cases UDFs (user-defined functions) come particularly handy. In Zeppelin, you can write Scala or Python UDFs, while you can also import Scala, Python and Java UDFs.
Here are 2 examples of Scala and Python UDFs:

* Scala UDF

```scala
%flink

class ScalaUpper extends ScalarFunction {
def eval(str: String) = str.toUpperCase
}
btenv.registerFunction(&quot;scala_upper&quot;, new ScalaUpper())

```
 
* Python UDF

```python

%flink.pyflink

class PythonUpper(ScalarFunction):
def eval(self, s):
 return s.upper()

bt_env.register_function(&quot;python_upper&quot;, udf(PythonUpper(), DataTypes.STRING(), DataTypes.STRING()))

```

After you define the UDFs, you can use them directly in SQL:

* Use Scala UDF in SQL

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-23-flink-on-zeppelin-part2/flink_scala_udf.png&quot; width=&quot;100%&quot; alt=&quot;Scala UDF&quot;/&gt;
&lt;/center&gt;

* Use Python UDF in SQL

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-23-flink-on-zeppelin-part2/flink_python_udf.png&quot; width=&quot;100%&quot; alt=&quot;Python UDF&quot;/&gt;
&lt;/center&gt;

# Summary

In this post, we explained how to perform streaming data visualization via Flink on Zeppelin and how to use UDFs. 
Besides that, you can do more in Zeppelin with Flink, such as batch processing, Hive integration and more.
You can check the following articles for more details and here&#39;s a list of [Flink on Zeppelin tutorial videos](https://www.youtube.com/watch?v=YxPo0Fosjjg&amp;list=PL4oy12nnS7FFtg3KV1iS5vDb0pTz12VcX) for your reference.

# References

* [Apache Zeppelin official website](http://zeppelin.apache.org)
* Flink on Zeppelin tutorials - [Part 1](https://medium.com/@zjffdu/flink-on-zeppelin-part-1-get-started-2591aaa6aa47)
* Flink on Zeppelin tutorials - [Part 2](https://medium.com/@zjffdu/flink-on-zeppelin-part-2-batch-711731df5ad9)
* Flink on Zeppelin tutorials - [Part 3](https://medium.com/@zjffdu/flink-on-zeppelin-part-3-streaming-5fca1e16754)
* Flink on Zeppelin tutorials - [Part 4](https://medium.com/@zjffdu/flink-on-zeppelin-part-4-advanced-usage-998b74908cd9)
* [Flink on Zeppelin tutorial videos](https://www.youtube.com/watch?v=YxPo0Fosjjg&amp;list=PL4oy12nnS7FFtg3KV1iS5vDb0pTz12VcX) 
</description>
<pubDate>Tue, 23 Jun 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/ecosystem/2020/06/23/flink-on-zeppelin-part2.html</link>
<guid isPermaLink="true">/ecosystem/2020/06/23/flink-on-zeppelin-part2.html</guid>
</item>

<item>
<title>Flink on Zeppelin Notebooks for Interactive Data Analysis - Part 1</title>
<description>The latest release of [Apache Zeppelin](https://zeppelin.apache.org/) comes with a redesigned interpreter for Apache Flink (version Flink 1.10+ is only supported moving forward) 
that allows developers to use Flink directly on Zeppelin notebooks for interactive data analysis. I wrote 2 posts about how to use Flink in Zeppelin. This is part-1 where I explain how the Flink interpreter in Zeppelin works, 
and provide a tutorial for running Streaming ETL with Flink on Zeppelin.

# The Flink Interpreter in Zeppelin 0.9

The Flink interpreter can be accessed and configured from Zeppelin’s interpreter settings page. 
The interpreter has been refactored so that Flink users can now take advantage of Zeppelin to write Flink applications in three languages, 
namely Scala, Python (PyFlink) and SQL (for both batch &amp; streaming executions). 
Zeppelin 0.9 now comes with the Flink interpreter group, consisting of the below five interpreters: 

* %flink     - Provides a Scala environment
* %flink.pyflink   - Provides a python environment
* %flink.ipyflink   - Provides an ipython environment
* %flink.ssql     - Provides a stream sql environment
* %flink.bsql     - Provides a batch sql environment

Not only has the interpreter been extended to support writing Flink applications in three languages, but it has also extended the available execution modes for Flink that now include:

* Running Flink in Local Mode
* Running Flink in Remote Mode
* Running Flink in Yarn Mode


You can find more information about how to get started with Zeppelin and all the execution modes for Flink applications in [Zeppelin notebooks](https://github.com/apache/zeppelin/tree/master/notebook/Flink%20Tutorial) in this post. 


# Flink on Zeppelin for Stream processing

Performing stream processing jobs with Apache Flink on Zeppelin allows you to run most major streaming cases, 
such as streaming ETL and real time data analytics, with the use of Flink SQL and specific UDFs. 
Below we showcase how you can execute streaming ETL using Flink on Zeppelin: 

You can use Flink SQL to perform streaming ETL by following the steps below 
(for the full tutorial, please refer to the [Flink Tutorial/Streaming ETL tutorial](https://github.com/apache/zeppelin/blob/master/notebook/Flink%20Tutorial/4.%20Streaming%20ETL_2EYD56B9B.zpln) of the Zeppelin distribution):

* Step 1. Create source table to represent the source data.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-15-flink-on-zeppelin/create_source.png&quot; width=&quot;80%&quot; alt=&quot;Create Source Table&quot;/&gt;
&lt;/center&gt;

* Step 2. Create a sink table to represent the processed data.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-15-flink-on-zeppelin/create_sink.png&quot; width=&quot;80%&quot; alt=&quot;Create Sink Table&quot;/&gt;
&lt;/center&gt;

* Step 3. After creating the source and sink table, we can insert them to our statement to trigger the stream processing job as the following: 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-15-flink-on-zeppelin/etl.png&quot; width=&quot;80%&quot; alt=&quot;ETL&quot;/&gt;
&lt;/center&gt;

* Step 4. After initiating the streaming job, you can use another SQL statement to query the sink table to verify the results of your job. Here you can see the top 10 records which will be refreshed every 3 seconds.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-15-flink-on-zeppelin/preview.png&quot; width=&quot;80%&quot; alt=&quot;Preview&quot;/&gt;
&lt;/center&gt;

# Summary

In this post, we explained how the redesigned Flink interpreter works in Zeppelin 0.9.0 and provided some examples for performing streaming ETL jobs with 
Flink and Zeppelin. In the next post, I will talk about how to do streaming data visualization via Flink on Zeppelin.
Besides that, you can find an additional [tutorial for batch processing with Flink on Zeppelin](https://medium.com/@zjffdu/flink-on-zeppelin-part-2-batch-711731df5ad9) as well as using Flink on Zeppelin for 
more advance operations like resource isolation, job concurrency &amp; parallelism, multiple Hadoop &amp; Hive environments and more on our series of posts on Medium.
And here&#39;s a list of [Flink on Zeppelin tutorial videos](https://www.youtube.com/watch?v=YxPo0Fosjjg&amp;list=PL4oy12nnS7FFtg3KV1iS5vDb0pTz12VcX) for your reference.


# References

* [Apache Zeppelin official website](http://zeppelin.apache.org)
* Flink on Zeppelin tutorials - [Part 1](https://medium.com/@zjffdu/flink-on-zeppelin-part-1-get-started-2591aaa6aa47)
* Flink on Zeppelin tutorials - [Part 2](https://medium.com/@zjffdu/flink-on-zeppelin-part-2-batch-711731df5ad9)
* Flink on Zeppelin tutorials - [Part 3](https://medium.com/@zjffdu/flink-on-zeppelin-part-3-streaming-5fca1e16754)
* Flink on Zeppelin tutorials - [Part 4](https://medium.com/@zjffdu/flink-on-zeppelin-part-4-advanced-usage-998b74908cd9)
* [Flink on Zeppelin tutorial videos](https://www.youtube.com/watch?v=YxPo0Fosjjg&amp;list=PL4oy12nnS7FFtg3KV1iS5vDb0pTz12VcX) 
</description>
<pubDate>Mon, 15 Jun 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/06/15/flink-on-zeppelin-part1.html</link>
<guid isPermaLink="true">/news/2020/06/15/flink-on-zeppelin-part1.html</guid>
</item>

<item>
<title>Flink Community Update - June&#39;20</title>
<description>And suddenly it’s June. The previous month has been calm on the surface, but quite hectic underneath — the final testing phase for Flink 1.11 is moving at full speed, Stateful Functions 2.1 is out in the wild and Flink has made it into Google Season of Docs 2020. 

To top it off, a piece of good news: [Flink Forward](https://www.flink-forward.org/global-2020) is back on October 19-22 as a free virtual event!

{% toc %}

# The Past Month in Flink

## Flink Stateful Functions 2.1 Release

It might seem like [Stateful Functions 2.0 was announced](https://flink.apache.org/news/2020/04/07/release-statefun-2.0.0.html) only a handful of weeks ago (and it was!), but the Flink community has just released Stateful Functions 2.1! This release introduces two new features: state expiration for any kind of persisted state and support for UNIX Domain Sockets (UDS) to improve the performance of inter-container communication in co-located deployments; as well as other important changes that improve the overall stability and testability of the project. You can read the [announcement blogpost](https://flink.apache.org/news/2020/06/09/release-statefun-2.1.0.html) for more details on the release!

As the community around StateFun grows, the release cycle will follow this pattern of smaller and more frequent releases to incorporate user feedback and allow for faster iteration. If you’d like to get involved, we’re always [looking for new contributors](https://github.com/apache/flink-statefun#contributing) — especially around SDKs for other languages (e.g. Go, Rust, Javascript).

&lt;hr&gt;

## Testing is ON for Flink 1.11

Things have been pretty quiet in the Flink community, as all efforts shifted to testing the newest features shipping with Flink 1.11. While we wait for a voting Release Candidate (RC) to be out, you can check the progress of testing in [this JIRA burndown board](https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=364&amp;projectKey=FLINK) and learn more about some of the [upcoming features](https://flink.apache.org/news/2020/05/07/community-update.html#warming-up-for-flink-111) in these Flink Forward videos:

* [Rethinking of fault tolerance in Flink: what lies ahead?](https://www.youtube.com/watch?v=ssEmeLcL5Uk)

* [It’s finally here: Python on Flink &amp; Flink on Zeppelin](https://www.youtube.com/watch?v=t7fAN3xNJ3Q)

* [A deep dive into Flink SQL](https://www.youtube.com/watch?v=KDD8e4GE12w)

* [Production-Ready Flink and Hive Integration - what story you can tell now?](https://www.youtube.com/watch?v=4ce1H9CRyEc)

We encourage the wider community to also get involved in testing once the voting RC is out. Keep an eye on the [@dev mailing list](https://flink.apache.org/community.html#mailing-lists) for updates!

&lt;hr&gt;

## Flink Minor Releases

### Flink 1.10.1

The community released Flink 1.10.1, covering some outstanding bugs in Flink 1.10. You can find more in the [announcement blogpost](https://flink.apache.org/news/2020/05/12/release-1.10.1.html)!

&lt;hr&gt;

## New Committers and PMC Members

The Apache Flink community has welcomed **2 new Committers** since the last update. Congratulations!

### New Committers

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars3.githubusercontent.com/u/4471524?s=400&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;Benchao Li&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars0.githubusercontent.com/u/6509172?s=400&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;Xintong Song&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
	
# The Bigger Picture

## Flink Forward Global Virtual Conference 2020

After a first successful [virtual conference](https://www.youtube.com/playlist?list=PLDX4T_cnKjD0ngnBSU-bYGfgVv17MiwA7) last April, Flink Forward will be hosting a second free virtual edition on October 19-22. This time around, the conference will feature two days of hands-on training and two full days of conference talks!

Got a Flink story to share? Maybe your recent adventures with Stateful Functions? The [Call for Presentations is now open](https://www.flink-forward.org/global-2020/call-for-presentations) and accepting submissions from the community until **June 19th, 11:59 PM CEST**.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-06-10-community-update/FlinkForward_Banner_CFP_Global_2020.png&quot; width=&quot;600px&quot; alt=&quot;Flink Forward Global 2020&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;hr&gt;

## Google Season of Docs 2020

In the last update, we announced that Flink was applying to [Google Season of Docs (GSoD)](https://developers.google.com/season-of-docs) again this year. The good news: we’ve made it into the shortlist of accepted projects! This represents an invaluable opportunity for the Flink community to collaborate with technical writers to improve the Table API &amp; SQL documentation. We’re honored to have seen a great number of people reach out over the last couple of weeks, and look forward to receiving applications from this week on!

If you’re interested in learning more about our project idea or want to get involved in GSoD as a technical writer, check out the [announcement blogpost](https://flink.apache.org/news/2020/05/04/season-of-docs.html) and [submit your application](https://developers.google.com/season-of-docs/docs/tech-writer-application-hints). The deadline for GSoD applications is **July 9th, 18:00 UTC**.

&lt;hr&gt;

If you’d like to keep a closer eye on what’s happening in the community, subscribe to the Flink [@community mailing list](https://flink.apache.org/community.html#mailing-lists) to get fine-grained weekly updates, upcoming event announcements and more.</description>
<pubDate>Thu, 11 Jun 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/06/11/community-update.html</link>
<guid isPermaLink="true">/news/2020/06/11/community-update.html</guid>
</item>

<item>
<title>Stateful Functions 2.1.0 Release Announcement</title>
<description>The Apache Flink community is happy to announce the release of Stateful Functions (StateFun) 2.1.0! This release introduces new features around state expiration and performance improvements for co-located deployments, as well as other important changes that improve the stability and testability of the project. As the community around StateFun grows, the release cycle will follow this pattern of smaller and more frequent releases to incorporate user feedback and allow for faster iteration.

The binary distribution and source artifacts are now available on the updated [Downloads](https://flink.apache.org/downloads.html) page of the Flink website, and the most recent Python SDK distribution is available on [PyPI](https://pypi.org/project/apache-flink-statefun/). For more details, check the complete [release changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12347861) and the [updated documentation](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.1/). We encourage you to download the release and share your feedback with the community through the [Flink mailing lists](https://flink.apache.org/community.html#mailing-lists) or [JIRA](https://issues.apache.org/jira/browse/FLINK-18016?jql=project%20%3D%20FLINK%20AND%20component%20%3D%20%22Stateful%20Functions%22%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC)!

{% toc %}


## New Features and Improvements

### Support for State Time-To-Live (TTL)

Being able to define state expiration and a state cleanup strategy is a useful feature for stateful applications — for example, to keep state size from growing indefinitely or to work with sensitive data. In previous StateFun versions, users could implement this behavior manually using [delayed messages](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.0/sdk/java.html#sending-delayed-messages) as state expiration callbacks. For StateFun 2.1, the community has worked on enabling users to configure any persisted state to expire and be purged after a given duration (i.e. the state time-to-live) ([FLINK-17644](https://issues.apache.org/jira/browse/FLINK-17644), [FLINK-17875](https://issues.apache.org/jira/browse/FLINK-17875)).

Persisted state can be configured to expire after the last _write_ operation (``AFTER_WRITE``) or after the last _read or write_ operation (``AFTER_READ_AND_WRITE``). For the [Java SDK](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.1/sdk/java.html#state-expiration), users can configure State TTL in the definition of their persisted fields:

```java
@Persisted
PersistedValue&lt;Integer&gt; table = PersistedValue.of(
    &quot;my-value&quot;,
    Integer.class,
    Expiration.expireAfterWriting(Duration.ofHours(1)));
```

For [remote functions](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.1/concepts/distributed_architecture.html#remote-functions) using e.g. the Python SDK, users can configure State TTL in their ``module.yaml``:

```
functions:
  - function:
     states:
       - name: xxxx
         expireAfter: 5min # optional key
```

&lt;div class=&quot;alert alert-info&quot;&gt;
	&lt;b&gt;Note:&lt;/b&gt;
	The state expiration mode for remote functions is currently restricted to AFTER_READ_AND_WRITE, and the actual TTL being set is the longest duration across all registered state, not for each individual state entry. This is planned to be improved in upcoming releases (&lt;a href=&quot;https://issues.apache.org/jira/browse/FLINK-17954&quot;&gt;FLINK-17954&lt;/a&gt;).
&lt;/div&gt;

### Improved Performance with UNIX Domain Sockets (UDS)

Stateful functions can be [deployed in multiple ways](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.1/concepts/distributed_architecture.html#deployment-styles-for-functions), even within the same application. For deployments where functions are [co-located](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.1/concepts/distributed_architecture.html#co-located-functions) with the Flink StateFun workers, it’s common to use Kubernetes to deploy pods consisting of a Flink StateFun container and the function sidecar container, communicating via the pod-local network. To improve the performance of such deployments, StateFun 2.1 allows using [Unix Domain Sockets](https://troydhanson.github.io/network/Unix_domain_sockets.html) (UDS) to communicate between containers in the same pod (i.e. the same machine) ([FLINK-17611](https://issues.apache.org/jira/browse/FLINK-17611)), which drastically reduces the overhead of going through the network stack.

Users can [enable transport via UDS](https://ci.apache.org/projects/flink/flink-statefun-docs-master/sdk/modules.html#defining-functions) in a remote module by specifying the following in their ``module.yaml``:

```
functions:
  - function:
     spec:
       - endpoint: http(s)+unix://&lt;socket-file-path&gt;/&lt;serve-url-path&gt;
```

## Important Changes

* [[FLINK-17712](https://issues.apache.org/jira/browse/FLINK-17712)] The Flink version in StateFun 2.1 has been upgraded to 1.10.1, the most recent patch version.

* [[FLINK-17533](https://issues.apache.org/jira/browse/FLINK-17533)] StateFun 2.1 now supports concurrent checkpoints, which means applications will no longer fail on savepoints that are triggered concurrently to a checkpoint.

* [[FLINK-16928](https://issues.apache.org/jira/browse/FLINK-16928)] StateFun 2.0 was using the Flink legacy scheduler due to a [bug in Flink 1.10](https://issues.apache.org/jira/browse/FLINK-16927). In 2.1, this change is reverted to using the new Flink scheduler again.

* [[FLINK-17516](https://issues.apache.org/jira/browse/FLINK-17516)] The coverage for end-to-end StateFun tests has been extended to also include exactly-once semantics verification (with failure recovery).

## Release Notes

Please review the [release notes](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12347861) for a detailed list of changes and new features if you plan to upgrade your setup to Stateful Functions 2.1.

## List of Contributors

The Apache Flink community would like to thank all contributors that have made this release possible:

abc863377, Authuir, Chesnay Schepler, Congxian Qiu, David Anderson, Dian Fu, Francesco Guardiani, Igal Shilman, Marta Paes Moreira, Patrick Wiener, Rafi Aroch, Seth Wiesman, Stephan Ewen, Tzu-Li (Gordon) Tai

If you’d like to get involved, we’re always [looking for new contributors](https://github.com/apache/flink-statefun#contributing) — especially around SDKs for other languages like Go, Rust or Javascript.</description>
<pubDate>Tue, 09 Jun 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/06/09/release-statefun-2.1.0.html</link>
<guid isPermaLink="true">/news/2020/06/09/release-statefun-2.1.0.html</guid>
</item>

<item>
<title>Apache Flink 1.10.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.10 series.

This release includes 158 fixes and minor improvements for Flink 1.10.0. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.10.1.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
FLINK-16684 changed the builders of the StreamingFileSink to make them compilable in Scala. This change is source compatible but binary incompatible. If using the StreamingFileSink, please recompile your user code against 1.10.1 before upgrading.
&lt;/div&gt;

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
FLINK-16683 Flink no longer supports starting clusters with .bat scripts. Users should instead use environments like WSL or Cygwin and work with the .sh scripts.
&lt;/div&gt;

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.10.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.10.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.10.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14126&#39;&gt;FLINK-14126&lt;/a&gt;] -         Elasticsearch Xpack Machine Learning doesn&amp;#39;t support ARM
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15143&#39;&gt;FLINK-15143&lt;/a&gt;] -         Create document for FLIP-49 TM memory model and configuration guide
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15561&#39;&gt;FLINK-15561&lt;/a&gt;] -         Unify Kerberos credentials checking
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15790&#39;&gt;FLINK-15790&lt;/a&gt;] -         Make FlinkKubeClient and its implementations asynchronous
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15817&#39;&gt;FLINK-15817&lt;/a&gt;] -         Kubernetes Resource leak while deployment exception happens
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16049&#39;&gt;FLINK-16049&lt;/a&gt;] -         Remove outdated &amp;quot;Best Practices&amp;quot; section from Application Development Section
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16131&#39;&gt;FLINK-16131&lt;/a&gt;] -         Translate &amp;quot;Amazon S3&amp;quot; page of &amp;quot;File Systems&amp;quot; into Chinese
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16389&#39;&gt;FLINK-16389&lt;/a&gt;] -         Bump Kafka 0.10 to 0.10.2.2
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2336&#39;&gt;FLINK-2336&lt;/a&gt;] -         ArrayIndexOufOBoundsException in TypeExtractor when mapping
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10918&#39;&gt;FLINK-10918&lt;/a&gt;] -         incremental Keyed state with RocksDB throws cannot create directory error in windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11193&#39;&gt;FLINK-11193&lt;/a&gt;] -         Rocksdb timer service factory configuration option is not settable per job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13483&#39;&gt;FLINK-13483&lt;/a&gt;] -         PrestoS3FileSystemITCase.testDirectoryListing fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14038&#39;&gt;FLINK-14038&lt;/a&gt;] -         ExecutionGraph deploy failed due to akka timeout
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14311&#39;&gt;FLINK-14311&lt;/a&gt;] -         Streaming File Sink end-to-end test failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14316&#39;&gt;FLINK-14316&lt;/a&gt;] -         Stuck in &amp;quot;Job leader ... lost leadership&amp;quot; error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15417&#39;&gt;FLINK-15417&lt;/a&gt;] -         Remove the docker volume or mount when starting Mesos e2e cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15669&#39;&gt;FLINK-15669&lt;/a&gt;] -         SQL client can&amp;#39;t cancel flink job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15772&#39;&gt;FLINK-15772&lt;/a&gt;] -         Shaded Hadoop S3A with credentials provider end-to-end test fails on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15811&#39;&gt;FLINK-15811&lt;/a&gt;] -         StreamSourceOperatorWatermarksTest.testNoMaxWatermarkOnAsyncCancel fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15812&#39;&gt;FLINK-15812&lt;/a&gt;] -         HistoryServer archiving is done in Dispatcher main thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15838&#39;&gt;FLINK-15838&lt;/a&gt;] -         Dangling CountDownLatch.await(timeout)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15852&#39;&gt;FLINK-15852&lt;/a&gt;] -         Job is submitted to the wrong session cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15904&#39;&gt;FLINK-15904&lt;/a&gt;] -         Make Kafka Consumer work with activated &amp;quot;disableGenericTypes()&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15936&#39;&gt;FLINK-15936&lt;/a&gt;] -         TaskExecutorTest#testSlotAcceptance deadlocks
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15953&#39;&gt;FLINK-15953&lt;/a&gt;] -         Job Status is hard to read for some Statuses
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16013&#39;&gt;FLINK-16013&lt;/a&gt;] -         List and map config options could not be parsed correctly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16014&#39;&gt;FLINK-16014&lt;/a&gt;] -         S3 plugin ClassNotFoundException SAXParser
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16025&#39;&gt;FLINK-16025&lt;/a&gt;] -         Service could expose blob server port mismatched with JM Container
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16026&#39;&gt;FLINK-16026&lt;/a&gt;] -         Travis failed due to python setup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16047&#39;&gt;FLINK-16047&lt;/a&gt;] -         Blink planner produces wrong aggregate results with state clean up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16067&#39;&gt;FLINK-16067&lt;/a&gt;] -         Flink&amp;#39;s CalciteParser swallows error position information
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16068&#39;&gt;FLINK-16068&lt;/a&gt;] -         table with keyword-escaped columns and computed_column_expression columns
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16070&#39;&gt;FLINK-16070&lt;/a&gt;] -         Blink planner can not extract correct unique key for UpsertStreamTableSink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16108&#39;&gt;FLINK-16108&lt;/a&gt;] -         StreamSQLExample is failed if running in blink planner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16111&#39;&gt;FLINK-16111&lt;/a&gt;] -         Kubernetes deployment does not respect &amp;quot;taskmanager.cpu.cores&amp;quot;.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16113&#39;&gt;FLINK-16113&lt;/a&gt;] -         ExpressionReducer shouldn&amp;#39;t escape the reduced string value
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16115&#39;&gt;FLINK-16115&lt;/a&gt;] -         Aliyun oss filesystem could not work with plugin mechanism
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16139&#39;&gt;FLINK-16139&lt;/a&gt;] -         Co-location constraints are not reset on task recovery in DefaultScheduler
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16161&#39;&gt;FLINK-16161&lt;/a&gt;] -         Statistics zero should be unknown in HiveCatalog
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16170&#39;&gt;FLINK-16170&lt;/a&gt;] -         SearchTemplateRequest ClassNotFoundException when use flink-sql-connector-elasticsearch7
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16220&#39;&gt;FLINK-16220&lt;/a&gt;] -         JsonRowSerializationSchema throws cast exception : NullNode cannot be cast to ArrayNode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16231&#39;&gt;FLINK-16231&lt;/a&gt;] -         Hive connector is missing jdk.tools exclusion against Hive 2.x.x
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16234&#39;&gt;FLINK-16234&lt;/a&gt;] -         Fix unstable cases in StreamingJobGraphGeneratorTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16241&#39;&gt;FLINK-16241&lt;/a&gt;] -         Remove the license and notice file in flink-ml-lib module on release-1.10 branch
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16242&#39;&gt;FLINK-16242&lt;/a&gt;] -         BinaryGeneric serialization error cause checkpoint failure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16262&#39;&gt;FLINK-16262&lt;/a&gt;] -         Class loader problem with FlinkKafkaProducer.Semantic.EXACTLY_ONCE and usrlib directory
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16269&#39;&gt;FLINK-16269&lt;/a&gt;] -         Generic type can not be matched when convert table to stream.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16281&#39;&gt;FLINK-16281&lt;/a&gt;] -         parameter &amp;#39;maxRetryTimes&amp;#39; can not work in JDBCUpsertTableSink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16301&#39;&gt;FLINK-16301&lt;/a&gt;] -         Annoying &amp;quot;Cannot find FunctionDefinition&amp;quot; messages with SQL for f_proctime or =
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16308&#39;&gt;FLINK-16308&lt;/a&gt;] -         SQL connector download links are broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16313&#39;&gt;FLINK-16313&lt;/a&gt;] -         flink-state-processor-api: surefire execution unstable on Azure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16331&#39;&gt;FLINK-16331&lt;/a&gt;] -         Remove source licenses for old WebUI
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16345&#39;&gt;FLINK-16345&lt;/a&gt;] -         Computed column can not refer time attribute column
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16360&#39;&gt;FLINK-16360&lt;/a&gt;] -          connector on hive 2.0.1 don&amp;#39;t  support type conversion from STRING to VARCHAR
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16371&#39;&gt;FLINK-16371&lt;/a&gt;] -         HadoopCompressionBulkWriter fails with &amp;#39;java.io.NotSerializableException&amp;#39;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16373&#39;&gt;FLINK-16373&lt;/a&gt;] -         EmbeddedLeaderService: IllegalStateException: The RPC connection is already closed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16413&#39;&gt;FLINK-16413&lt;/a&gt;] -         Reduce hive source parallelism when limit push down
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16414&#39;&gt;FLINK-16414&lt;/a&gt;] -         create udaf/udtf function using sql casuing ValidationException: SQL validation failed. null
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16433&#39;&gt;FLINK-16433&lt;/a&gt;] -         TableEnvironmentImpl doesn&amp;#39;t clear buffered operations when it fails to translate the operation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16435&#39;&gt;FLINK-16435&lt;/a&gt;] -         Replace since decorator with versionadd to mark the version an API was introduced
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16467&#39;&gt;FLINK-16467&lt;/a&gt;] -         MemorySizeTest#testToHumanReadableString() is not portable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16526&#39;&gt;FLINK-16526&lt;/a&gt;] -         Fix exception when computed column expression references a keyword column name
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16541&#39;&gt;FLINK-16541&lt;/a&gt;] -         Document of table.exec.shuffle-mode is incorrect
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16550&#39;&gt;FLINK-16550&lt;/a&gt;] -         HadoopS3* tests fail with NullPointerException exceptions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16560&#39;&gt;FLINK-16560&lt;/a&gt;] -         Forward Configuration in PackagedProgramUtils#getPipelineFromProgram
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16567&#39;&gt;FLINK-16567&lt;/a&gt;] -         Get the API error of the StreamQueryConfig on Page &amp;quot;Query Configuration&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16573&#39;&gt;FLINK-16573&lt;/a&gt;] -         Kinesis consumer does not properly shutdown RecordFetcher threads
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16576&#39;&gt;FLINK-16576&lt;/a&gt;] -         State inconsistency on restore with memory state backends
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16626&#39;&gt;FLINK-16626&lt;/a&gt;] -         Prevent REST handler from being closed more than once
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16632&#39;&gt;FLINK-16632&lt;/a&gt;] -         SqlDateTimeUtils#toSqlTimestamp(String, String) may yield incorrect result
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16635&#39;&gt;FLINK-16635&lt;/a&gt;] -         Incompatible okio dependency in flink-metrics-influxdb module
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16646&#39;&gt;FLINK-16646&lt;/a&gt;] -         flink read orc file throw a NullPointerException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16647&#39;&gt;FLINK-16647&lt;/a&gt;] -         Miss file extension when inserting to hive table with compression
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16652&#39;&gt;FLINK-16652&lt;/a&gt;] -         BytesColumnVector should init buffer in Hive 3.x
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16662&#39;&gt;FLINK-16662&lt;/a&gt;] -         Blink Planner failed to generate JobGraph for POJO DataStream converting to Table (Cannot determine simple type name)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16664&#39;&gt;FLINK-16664&lt;/a&gt;] -         Unable to set DataStreamSource parallelism to default (-1)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16675&#39;&gt;FLINK-16675&lt;/a&gt;] -         TableEnvironmentITCase. testClearOperation fails on travis nightly build
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16684&#39;&gt;FLINK-16684&lt;/a&gt;] -         StreamingFileSink builder does not work with Scala
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16696&#39;&gt;FLINK-16696&lt;/a&gt;] -         Savepoint trigger documentation is insufficient
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16703&#39;&gt;FLINK-16703&lt;/a&gt;] -         AkkaRpcActor state machine does not record transition to terminating state.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16705&#39;&gt;FLINK-16705&lt;/a&gt;] -         LocalExecutor tears down MiniCluster before client can retrieve JobResult
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16718&#39;&gt;FLINK-16718&lt;/a&gt;] -         KvStateServerHandlerTest leaks Netty ByteBufs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16727&#39;&gt;FLINK-16727&lt;/a&gt;] -         Fix cast exception when having time point literal as parameters
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16732&#39;&gt;FLINK-16732&lt;/a&gt;] -         Failed to call Hive UDF with constant return value
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16740&#39;&gt;FLINK-16740&lt;/a&gt;] -         OrcSplitReaderUtil::logicalTypeToOrcType fails to create decimal type with precision &amp;lt; 10
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16759&#39;&gt;FLINK-16759&lt;/a&gt;] -         HiveModuleTest failed to compile on release-1.10
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16767&#39;&gt;FLINK-16767&lt;/a&gt;] -         Failed to read Hive table with RegexSerDe
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16771&#39;&gt;FLINK-16771&lt;/a&gt;] -         NPE when filtering by decimal column
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16821&#39;&gt;FLINK-16821&lt;/a&gt;] -         Run Kubernetes test failed with invalid named &amp;quot;minikube&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16822&#39;&gt;FLINK-16822&lt;/a&gt;] -         The config set by SET command does not work
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16825&#39;&gt;FLINK-16825&lt;/a&gt;] -         PrometheusReporterEndToEndITCase should rely on path returned by DownloadCache
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16836&#39;&gt;FLINK-16836&lt;/a&gt;] -         Losing leadership does not clear rpc connection in JobManagerLeaderListener
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16860&#39;&gt;FLINK-16860&lt;/a&gt;] -         Failed to push filter into OrcTableSource when upgrading to 1.9.2
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16888&#39;&gt;FLINK-16888&lt;/a&gt;] -         Re-add jquery license file under &amp;quot;/licenses&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16901&#39;&gt;FLINK-16901&lt;/a&gt;] -         Flink Kinesis connector NOTICE should have contents of AWS KPL&amp;#39;s THIRD_PARTY_NOTICES file manually merged in
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16913&#39;&gt;FLINK-16913&lt;/a&gt;] -         ReadableConfigToConfigurationAdapter#getEnum throws UnsupportedOperationException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16916&#39;&gt;FLINK-16916&lt;/a&gt;] -         The logic of NullableSerializer#copy is wrong
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16944&#39;&gt;FLINK-16944&lt;/a&gt;] -         Compile error in. DumpCompiledPlanTest and PreviewPlanDumpTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16980&#39;&gt;FLINK-16980&lt;/a&gt;] -         Python UDF doesn&amp;#39;t work with protobuf 3.6.1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16981&#39;&gt;FLINK-16981&lt;/a&gt;] -         flink-runtime tests are crashing the JVM on Java11 because of PowerMock
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17062&#39;&gt;FLINK-17062&lt;/a&gt;] -         Fix the conversion from Java row type to Python row type
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17066&#39;&gt;FLINK-17066&lt;/a&gt;] -         Update pyarrow version bounds less than 0.14.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17093&#39;&gt;FLINK-17093&lt;/a&gt;] -         Python UDF doesn&amp;#39;t work when the input column is from composite field
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17107&#39;&gt;FLINK-17107&lt;/a&gt;] -         CheckpointCoordinatorConfiguration#isExactlyOnce() is inconsistent with StreamConfig#getCheckpointMode()
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17114&#39;&gt;FLINK-17114&lt;/a&gt;] -         When the pyflink job runs in local mode and the command &amp;quot;python&amp;quot; points to Python 2.7, the startup of the Python UDF worker will fail.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17124&#39;&gt;FLINK-17124&lt;/a&gt;] -         The PyFlink Job runs into infinite loop if the Python UDF imports job code
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17152&#39;&gt;FLINK-17152&lt;/a&gt;] -         FunctionDefinitionUtil generate wrong resultType and  acc type of AggregateFunctionDefinition
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17308&#39;&gt;FLINK-17308&lt;/a&gt;] -         ExecutionGraphCache cachedExecutionGraphs not cleanup cause OOM Bug
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17313&#39;&gt;FLINK-17313&lt;/a&gt;] -         Validation error when insert decimal/varchar with precision into sink using TypeInformation of row
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17334&#39;&gt;FLINK-17334&lt;/a&gt;] -          Flink does not support HIVE UDFs with primitive return types
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17338&#39;&gt;FLINK-17338&lt;/a&gt;] -         LocalExecutorITCase.testBatchQueryCancel test timeout
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17359&#39;&gt;FLINK-17359&lt;/a&gt;] -         Entropy key is not resolved if flink-s3-fs-hadoop is added as a plugin
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17403&#39;&gt;FLINK-17403&lt;/a&gt;] -         Fix invalid classpath in BashJavaUtilsITCase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17471&#39;&gt;FLINK-17471&lt;/a&gt;] -         Move LICENSE and NOTICE files to root directory of python distribution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17483&#39;&gt;FLINK-17483&lt;/a&gt;] -         Update flink-sql-connector-elasticsearch7 NOTICE file to correctly reflect bundled dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17496&#39;&gt;FLINK-17496&lt;/a&gt;] -         Performance regression with amazon-kinesis-producer 0.13.1 in Flink 1.10.x
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17499&#39;&gt;FLINK-17499&lt;/a&gt;] -         LazyTimerService used to register timers via State Processing API incorrectly mixes event time timers with processing time timers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17514&#39;&gt;FLINK-17514&lt;/a&gt;] -         TaskCancelerWatchdog does not kill TaskManager
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        New Feature
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17275&#39;&gt;FLINK-17275&lt;/a&gt;] -         Add core training exercises
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9656&#39;&gt;FLINK-9656&lt;/a&gt;] -         Environment java opts for flink run
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15094&#39;&gt;FLINK-15094&lt;/a&gt;] -         Warning about using private constructor of java.nio.DirectByteBuffer in Java 11
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15584&#39;&gt;FLINK-15584&lt;/a&gt;] -         Give nested data type of ROWs in ValidationException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15616&#39;&gt;FLINK-15616&lt;/a&gt;] -         Move boot error messages from python-udf-boot.log to taskmanager&amp;#39;s log file
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15989&#39;&gt;FLINK-15989&lt;/a&gt;] -         Rewrap OutOfMemoryError in allocateUnpooledOffHeap with better message
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16018&#39;&gt;FLINK-16018&lt;/a&gt;] -         Improve error reporting when submitting batch job (instead of AskTimeoutException)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16125&#39;&gt;FLINK-16125&lt;/a&gt;] -         Make zookeeper.connect optional for Kafka connectors
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16167&#39;&gt;FLINK-16167&lt;/a&gt;] -         Update documentation about python shell execution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16191&#39;&gt;FLINK-16191&lt;/a&gt;] -         Improve error message on Windows when RocksDB Paths are too long
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16280&#39;&gt;FLINK-16280&lt;/a&gt;] -         Fix sample code errors in the documentation about elasticsearch connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16288&#39;&gt;FLINK-16288&lt;/a&gt;] -         Setting the TTL for discarding task pods on Kubernetes.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16293&#39;&gt;FLINK-16293&lt;/a&gt;] -         Document using plugins in Kubernetes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16343&#39;&gt;FLINK-16343&lt;/a&gt;] -         Improve exception message when reading an unbounded source in batch mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16406&#39;&gt;FLINK-16406&lt;/a&gt;] -         Increase default value for JVM Metaspace to minimise its OutOfMemoryError
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16538&#39;&gt;FLINK-16538&lt;/a&gt;] -         Restructure Python Table API documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16604&#39;&gt;FLINK-16604&lt;/a&gt;] -         Column key in JM configuration is too narrow
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16683&#39;&gt;FLINK-16683&lt;/a&gt;] -         Remove scripts for starting Flink on Windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16697&#39;&gt;FLINK-16697&lt;/a&gt;] -         Disable JMX rebinding
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16763&#39;&gt;FLINK-16763&lt;/a&gt;] -         Should not use BatchTableEnvironment for Python UDF in the document of flink-1.10
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16772&#39;&gt;FLINK-16772&lt;/a&gt;] -         Bump derby to 10.12.1.1+ or exclude it
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16790&#39;&gt;FLINK-16790&lt;/a&gt;] -         enables the interpretation of backslash escapes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16862&#39;&gt;FLINK-16862&lt;/a&gt;] -         Remove example url in quickstarts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16874&#39;&gt;FLINK-16874&lt;/a&gt;] -         Respect the dynamic options when calculating memory options in taskmanager.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16942&#39;&gt;FLINK-16942&lt;/a&gt;] -         ES 5 sink should allow users to select netty transport client
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17065&#39;&gt;FLINK-17065&lt;/a&gt;] -         Add documentation about the Python versions supported for PyFlink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17125&#39;&gt;FLINK-17125&lt;/a&gt;] -         Add a Usage Notes Page to Answer Common Questions Encountered by PyFlink Users
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17254&#39;&gt;FLINK-17254&lt;/a&gt;] -         Improve the PyFlink documentation and examples to use SQL DDL for source/sink definition
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17276&#39;&gt;FLINK-17276&lt;/a&gt;] -         Add checkstyle to training exercises
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17277&#39;&gt;FLINK-17277&lt;/a&gt;] -         Apply IntelliJ recommendations to training exercises
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17278&#39;&gt;FLINK-17278&lt;/a&gt;] -         Add Travis to the training exercises
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17279&#39;&gt;FLINK-17279&lt;/a&gt;] -         Use gradle build scans for training exercises
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17316&#39;&gt;FLINK-17316&lt;/a&gt;] -         Have HourlyTips solutions use TumblingEventTimeWindows.of
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15741&#39;&gt;FLINK-15741&lt;/a&gt;] -         Fix TTL docs after enabling RocksDB compaction filter by default (needs Chinese translation)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15933&#39;&gt;FLINK-15933&lt;/a&gt;] -         update content of how generic table schema is stored in hive via HiveCatalog
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15991&#39;&gt;FLINK-15991&lt;/a&gt;] -         Create Chinese documentation for FLIP-49 TM memory model
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16004&#39;&gt;FLINK-16004&lt;/a&gt;] -         Exclude flink-rocksdb-state-memory-control-test jars from the dist
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16454&#39;&gt;FLINK-16454&lt;/a&gt;] -         Update the copyright year in NOTICE files
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16530&#39;&gt;FLINK-16530&lt;/a&gt;] -         Add documentation about &amp;quot;GROUPING SETS&amp;quot; and &amp;quot;CUBE&amp;quot; support in streaming mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16592&#39;&gt;FLINK-16592&lt;/a&gt;] -         The doc of Streaming File Sink has a mistake of grammar
&lt;/li&gt;
&lt;/ul&gt;

</description>
<pubDate>Tue, 12 May 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/05/12/release-1.10.1.html</link>
<guid isPermaLink="true">/news/2020/05/12/release-1.10.1.html</guid>
</item>

<item>
<title>Flink Community Update - May&#39;20</title>
<description>Can you smell it? It’s release month! It took a while, but now that we’re [all caught up with the past](https://flink.apache.org/news/2020/04/01/community-update.html), the Community Update is here to stay. This time around, we’re warming up for Flink 1.11 and peeping back to the month of April in the Flink community — with the release of Stateful Functions 2.0, a new self-paced Flink training and some efforts to improve the Flink documentation experience.

Last month also marked the debut of Flink Forward Virtual Conference 2020: what did you think? If you missed it altogether or just want to recap some of the sessions, the [videos](https://www.youtube.com/playlist?list=PLDX4T_cnKjD0ngnBSU-bYGfgVv17MiwA7) and [slides](https://www.slideshare.net/FlinkForward) are now available!

{% toc %}

# The Past Month in Flink

## Flink Stateful Functions 2.0 is out!

In the beginning of April, the Flink community announced the [release of Stateful Functions 2.0](https://flink.apache.org/news/2020/04/07/release-statefun-2.0.0.html) — the first as part of the Apache Flink project. From this release, you can use Flink as the base of a (stateful) serverless platform with out-of-the-box consistent and scalable state, and efficient messaging between functions. You can even run your stateful functions on platforms like AWS Lambda, as Gordon ([@tzulitai](https://twitter.com/tzulitai)) demonstrated in [his Flink Forward talk](https://www.youtube.com/watch?v=tuSylBadNSo&amp;list=PLDX4T_cnKjD0ngnBSU-bYGfgVv17MiwA7&amp;index=27&amp;t=8s).

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-05-06-community-update/2020-05-06-community-update_2.png&quot; width=&quot;550px&quot; alt=&quot;Stateful Functions&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

It’s been encouraging to see so many questions about Stateful Functions popping up in the [mailing list](https://lists.apache.org/list.html?user@flink.apache.org:lte=3M:statefun) and Stack Overflow! If you’d like to get involved, we’re always [looking for new contributors](https://github.com/apache/flink-statefun#contributing) — especially around SDKs for other languages like Go, Javascript and Rust.

&lt;hr&gt;

## Warming up for Flink 1.11

The final preparations for the release of Flink 1.11 are well underway, with the feature freeze scheduled for May 15th, and there’s a lot of new features and improvements to look out for:

* On the **usability** side, you can expect a big focus on smoothing data ingestion with contributions like support for Change Data Capture (CDC) in the Table API/SQL ([FLIP-105](https://cwiki.apache.org/confluence/display/FLINK/FLIP-105%3A+Support+to+Interpret+and+Emit+Changelog+in+Flink+SQL)), easy streaming data ingestion into Apache Hive ([FLIP-115](https://cwiki.apache.org/confluence/display/FLINK/FLIP-115%3A+Filesystem+connector+in+Table)) or support for Pandas DataFrames in PyFlink ([FLIP-120](https://cwiki.apache.org/confluence/display/FLINK/FLIP-120%3A+Support+conversion+between+PyFlink+Table+and+Pandas+DataFrame)). A great deal of effort has also gone into maturing PyFlink, with the introduction of user defined metrics in Python UDFs ([FLIP-112](https://cwiki.apache.org/confluence/display/FLINK/FLIP-112%3A+Support+User-Defined+Metrics+in++Python+UDF)) and the extension of Python UDF support beyond the Python Table API ([FLIP-106](https://cwiki.apache.org/confluence/display/FLINK/FLIP-106%3A+Support+Python+UDF+in+SQL+Function+DDL),[FLIP-114](https://cwiki.apache.org/confluence/display/FLINK/FLIP-114%3A+Support+Python+UDF+in+SQL+Client)).

* On the **operational** side, the much anticipated new Source API ([FLIP-27](https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface)) will unify batch and streaming sources, and improve out-of-the-box event-time behavior; while unaligned checkpoints ([FLIP-76](https://cwiki.apache.org/confluence/display/FLINK/FLIP-76%3A+Unaligned+Checkpoints)) and changes to network memory management will allow to speed up checkpointing under backpressure — this is part of a bigger effort to rethink fault tolerance that will introduce many other non-trivial changes to Flink. You can learn more about it in [this](https://youtu.be/ssEmeLcL5Uk) recent Flink Forward talk!

Throw into the mix improvements around type systems, the WebUI, metrics reporting, supported formats and...we can&#39;t wait! To get an overview of the ongoing developments, have a look at [this thread](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/ANNOUNCE-Development-progress-of-Apache-Flink-1-11-tp40718.html). We encourage the community to get involved in testing once an RC (Release Candidate) is out. Keep an eye on the [@dev mailing list](https://flink.apache.org/community.html#mailing-lists) for updates!

&lt;hr&gt;

## Flink Minor Releases

### Flink 1.9.3

The community released Flink 1.9.3, covering some outstanding bugs from Flink 1.9! You can find more in the [announcement blogpost]((https://flink.apache.org/news/2020/04/24/release-1.9.3.html)).

### Flink 1.10.1

Also in the pipeline is the release of Flink 1.10.1, already in the [RC voting](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/VOTE-Release-1-10-1-release-candidate-2-td41019.html) phase. So, you can expect Flink 1.10.1 to be released soon!

&lt;hr&gt;

## New Committers and PMC Members

The Apache Flink community has welcomed **3 PMC Members** and **2 new Committers** since the last update. Congratulations!

### New PMC Members

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars2.githubusercontent.com/u/6242259?s=400&amp;u=6e39f4fdbabc8ce4ccde9125166f791957d3ae80&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/dwysakowicz&quot;&gt;Dawid Wysakowicz&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars1.githubusercontent.com/u/4971479?s=400&amp;u=49d4f217e26186606ab13a17a23a038b62b86682&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/HequnC&quot;&gt;Hequn Cheng&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars3.githubusercontent.com/u/12387855?s=400&amp;u=37edbfccb6908541f359433f420f9f1bc25bc714&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;Zhijiang Wang&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

### New Committers

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars3.githubusercontent.com/u/11538663?s=400&amp;u=f4643f1981e2a8f8a1962c34511b0d32a31d9502&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/snntrable&quot;&gt;Konstantin Knauf&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-3&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;img class=&quot;img-circle&quot; src=&quot;https://avatars1.githubusercontent.com/u/1891970?s=400&amp;u=b7718355ceb1f4a8d1e554c3ae7221e2f32cc8e0&amp;v=4&quot; width=&quot;90&quot; height=&quot;90&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/sjwiesman&quot;&gt;Seth Wiesman&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;hr&gt;
	
# The Bigger Picture

## A new self-paced Apache Flink training

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

This week, the Flink website received the invaluable contribution of a self-paced training course curated by David ([@alpinegizmo](https://twitter.com/alpinegizmo)) — or, what used to be the entire training materials under [training.ververica.com](training.ververica.com). The new materials guide you through the very basics of Flink and the DataStream API, and round off every concepts section with hands-on exercises to help you better assimilate what you learned.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-05-06-community-update/2020-05-06-community-update_1.png&quot; width=&quot;1000px&quot; alt=&quot;Self-paced Flink Training&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:140%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

Whether you&#39;re new to Flink or just looking to strengthen your foundations, this training is the most comprehensive way to get started and is now completely open source: [https://flink.apache.org/training.html](https://flink.apache.org/training.html). For now, the materials are only available in English, but the community intends to also provide a Chinese translation in the future.

&lt;hr&gt;

## Google Season of Docs 2020

Google Season of Docs (GSOD) is a great initiative organized by [Google Open Source](https://opensource.google.com/) to pair technical writers with mentors to work on documentation for open source projects. Last year, the Flink community submitted [an application](https://flink.apache.org/news/2019/04/17/sod.html) that unfortunately didn’t make the cut — but we are trying again! This time, with a project idea to improve the Table API &amp; SQL documentation:

**1) Restructure the Table API &amp; SQL Documentation**

Reworking the current documentation structure would allow to:

* Lower the entry barrier to Flink for non-programmatic (i.e. SQL) users.

* Make the available features more easily discoverable.

* Improve the flow and logical correlation of topics.

[FLIP-60](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=127405685) contains a detailed proposal on how to reorganize the existing documentation, which can be used as a starting point.

**2) Extend the Table API &amp; SQL Documentation**

Some areas of the documentation have insufficient detail or are not [accessible](https://flink.apache.org/contributing/docs-style.html#general-guiding-principles) for new Flink users. Examples of topics and sections that require attention are: planners, built-in functions, connectors, overview and concepts sections. There is a lot of work to be done and the technical writer could choose what areas to focus on — these improvements could then be added to the documentation rework umbrella issue ([FLINK-12639](https://issues.apache.org/jira/browse/FLINK-12639)).

If you’re interested in learning more about this project idea or want to get involved in GSoD as a technical writer, check out the [announcement blogpost](https://flink.apache.org/news/2020/05/04/season-of-docs.html).

&lt;hr&gt;

# ...and something to read!

Events across the globe have pretty much come to a halt, so we’ll leave you with some interesting resources to read and explore instead. In addition to this written content, you can also recap the sessions from the [Flink Forward Virtual Conference](https://www.youtube.com/playlist?list=PLDX4T_cnKjD0ngnBSU-bYGfgVv17MiwA7)!

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Links&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon glyphicon-bookmark&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Blogposts&lt;/td&gt;
      &lt;td&gt;&lt;ul&gt;
		  &lt;li&gt;&lt;a href=&quot;https://medium.com/@abdelkrim.hadjidj/event-driven-supply-chain-for-crisis-with-flinksql-be80cb3ad4f9&quot;&gt;Event-Driven Supply Chain for Crisis with FlinkSQL and Zeppelin&lt;/a&gt;&lt;/li&gt;
		  &lt;/ul&gt;
		  &lt;ul&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/04/21/memory-management-improvements-flink-1.10.html&quot;&gt;Memory Management Improvements with Apache Flink 1.10&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/04/15/flink-serialization-tuning-vol-1.html&quot;&gt;Flink Serialization Tuning Vol. 1: Choosing your Serializer — if you can&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	  &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon-console&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Tutorials&lt;/td&gt;
      &lt;td&gt;&lt;ul&gt;
      	  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/2020/04/09/pyflink-udf-support-flink.html&quot;&gt;PyFlink: Introducing Python Support for UDFs in Flink&#39;s Table API&lt;/a&gt;&lt;/li&gt;
      	  &lt;li&gt;&lt;a href=&quot;https://dev.to/morsapaes/flink-stateful-functions-where-to-start-2j39&quot;&gt;Flink Stateful Functions: where to start?&lt;/a&gt;&lt;/li&gt;
		  &lt;/ul&gt;
	  &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon glyphicon-certificate&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Flink Packages&lt;/td&gt;
      &lt;td&gt;&lt;ul&gt;&lt;p&gt;&lt;a href=&quot;https://flink-packages.org/&quot;&gt;Flink Packages&lt;/a&gt; is a website where you can explore (and contribute to) the Flink &lt;br /&gt; ecosystem of connectors, extensions, APIs, tools and integrations. &lt;b&gt;New in:&lt;/b&gt; &lt;/p&gt;
      	  &lt;li&gt;&lt;a href=&quot;https://flink-packages.org/packages/spillable-state-backend-for-flink&quot;&gt;Spillable State Backend for Flink&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink-packages.org/packages/flink-memory-calculator&quot;&gt;Flink Memory Calculator&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink-packages.org/packages/ververica-platform-community-edition&quot;&gt;Ververica Platform Community Edition&lt;/a&gt;&lt;/li&gt;
		  &lt;/ul&gt;
	  &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

If you’d like to keep a closer eye on what’s happening in the community, subscribe to the Flink [@community mailing list](https://flink.apache.org/community.html#mailing-lists) to get fine-grained weekly updates, upcoming event announcements and more.</description>
<pubDate>Thu, 07 May 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/05/07/community-update.html</link>
<guid isPermaLink="true">/news/2020/05/07/community-update.html</guid>
</item>

<item>
<title>Applying to Google Season of Docs 2020</title>
<description>The Flink community is thrilled to share that the project is applying again to [Google Season of Docs](https://developers.google.com/season-of-docs/) (GSoD) this year! If you’re unfamiliar with the program, GSoD is a great initiative organized by [Google Open Source](https://opensource.google.com/) to pair technical writers with mentors to work on documentation for open source projects. The [first edition](https://developers.google.com/season-of-docs/docs/2019/participants) supported over 40 projects, including some other cool Apache Software Foundation (ASF) members like Apache Airflow and Apache Cassandra.

# Why Apply?

As one of the most active projects in the ASF, Flink is experiencing a boom in contributions and some major changes to its codebase. And, while the project has also seen a significant increase in activity when it comes to writing, reviewing and translating documentation, it’s hard to keep up with the pace.

&lt;center&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-05-04-season-of-docs/2020-04-30-season-of-docs_1.png&quot; width=&quot;650px&quot; alt=&quot;GitHub 1&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

Since last year, the community has been working on [FLIP-42](https://cwiki.apache.org/confluence/display/FLINK/FLIP-42%3A+Rework+Flink+Documentation) to improve the documentation experience and bring a more accessible information architecture to Flink. After [some discussion](https://www.mail-archive.com/dev@flink.apache.org/msg36987.html), we agreed that GSoD would be a valuable opportunity to double down on this effort and collaborate with someone who is passionate about technical writing...and Flink!

# How can you contribute?

If working shoulder to shoulder with the Flink community on documentation sounds exciting, we’d love to hear from you! You can read more about our idea for this year’s project below and, depending on whether it is accepted, [apply](https://developers.google.com/season-of-docs/docs/tech-writer-guide) as a technical writer. If you have any questions or just want to know more about the project idea, ping us at [dev@flink.apache.org](https://flink.apache.org/community.html#mailing-lists)!

&lt;div class=&quot;alert alert-info&quot;&gt;
	Please &lt;a href=&quot;mailto:dev-subscribe@flink.apache.org&quot;&gt;subscribe&lt;/a&gt; to the Apache Flink mailing list before reaching out.
	If you are not subscribed then responses to your message will not go through.
	You can always &lt;a href=&quot;mailto:dev-unsubscribe@flink.apache.org&quot;&gt;unsubscribe&lt;/a&gt; at any time. 
&lt;/div&gt;

## Project: Improve the Table API &amp; SQL Documentation

[Apache Flink](https://flink.apache.org/) is a stateful stream processor supporting a broad set of use cases and featuring APIs at different levels of abstraction that allow users to trade off expressiveness and usability, as well as work with their language of choice (Java/Scala, SQL or Python). The Table API &amp; SQL are Flink’s high-level relational abstractions and focus on data analytics use cases. A core principle is that either API can be used to process static (batch) and continuous (streaming) data with the same syntax and yielding the same results.

As the Flink community works on extending the scope of the Table API &amp; SQL, a lot of new features are being added and some underlying structures are also being refactored. At the same time, the documentation for these APIs is growing onto a somewhat unruly structure and has potential for improvement in some areas. 

The project has two main workstreams: restructuring and extending the Table API &amp; SQL documentation. These can be worked on by one person as a bigger effort or assigned to different technical writers.

**1) Restructure the Table API &amp; SQL Documentation**

Reworking the current documentation structure would allow to:

* Lower the entry barrier to Flink for non-programmatic (i.e. SQL) users.
* Make the available features more easily discoverable.
* Improve the flow and logical correlation of topics.

[FLIP-60](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=127405685) contains a detailed proposal on how to reorganize the existing documentation, which can be used as a starting point.


**2) Extend the Table API &amp; SQL Documentation**

Some areas of the documentation have insufficient detail or are not [accessible](https://flink.apache.org/contributing/docs-style.html#general-guiding-principles) for new Flink users. Examples of topics and sections that require attention are: planners, built-in functions, connectors, overview and concepts sections. There is a lot of work to be done and the technical writer could choose what areas to focus on — these improvements could then be added to the documentation rework umbrella issue ([FLINK-12639](https://issues.apache.org/jira/browse/FLINK-12639)).

### Project Mentors 

* [Aljoscha Krettek](https://twitter.com/aljoscha) (Apache Flink and Apache Beam PMC Member)
* [Seth Wiesman](https://twitter.com/sjwiesman) (Apache Flink Committer)

### Related Resources

* FLIP-60: [https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=127405685](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=127405685)

* Table API &amp; SQL Documentation: [https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/)

* How to Contribute Documentation: [https://flink.apache.org/contributing/contribute-documentation.html](https://flink.apache.org/contributing/contribute-documentation.html)

* Documentation Style Guide: [https://flink.apache.org/contributing/docs-style.html](https://flink.apache.org/contributing/docs-style.html)

We look forward to receiving feedback on this GSoD application and also to continue improving the documentation experience for Flink users. Join us!
</description>
<pubDate>Mon, 04 May 2020 06:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/05/04/season-of-docs.html</link>
<guid isPermaLink="true">/news/2020/05/04/season-of-docs.html</guid>
</item>

<item>
<title>Apache Flink 1.9.3 Released</title>
<description>The Apache Flink community released the third bugfix version of the Apache Flink 1.9 series.

This release includes 38 fixes and minor improvements for Flink 1.9.2. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.9.3.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.9.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.3&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15143&#39;&gt;FLINK-15143&lt;/a&gt;] -         Create document for FLIP-49 TM memory model and configuration guide
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16389&#39;&gt;FLINK-16389&lt;/a&gt;] -         Bump Kafka 0.10 to 0.10.2.2
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11193&#39;&gt;FLINK-11193&lt;/a&gt;] -         Rocksdb timer service factory configuration option is not settable per job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14316&#39;&gt;FLINK-14316&lt;/a&gt;] -         Stuck in &amp;quot;Job leader ... lost leadership&amp;quot; error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14560&#39;&gt;FLINK-14560&lt;/a&gt;] -         The value of taskmanager.memory.size in flink-conf.yaml is set to zero will cause taskmanager not to work 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15010&#39;&gt;FLINK-15010&lt;/a&gt;] -         Temp directories flink-netty-shuffle-* are not cleaned up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15085&#39;&gt;FLINK-15085&lt;/a&gt;] -         HistoryServer dashboard config json out of sync
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15386&#39;&gt;FLINK-15386&lt;/a&gt;] -         SingleJobSubmittedJobGraphStore.putJobGraph has a logic error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15575&#39;&gt;FLINK-15575&lt;/a&gt;] -         Azure Filesystem Shades Wrong Package &amp;quot;httpcomponents&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15638&#39;&gt;FLINK-15638&lt;/a&gt;] -         releasing/create_release_branch.sh does not set version in flink-python/pyflink/version.py
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15812&#39;&gt;FLINK-15812&lt;/a&gt;] -         HistoryServer archiving is done in Dispatcher main thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15844&#39;&gt;FLINK-15844&lt;/a&gt;] -         Removal of JobWithJars.buildUserCodeClassLoader method without Configuration breaks backwards compatibility
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15863&#39;&gt;FLINK-15863&lt;/a&gt;] -         Fix docs stating that savepoints are relocatable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16047&#39;&gt;FLINK-16047&lt;/a&gt;] -         Blink planner produces wrong aggregate results with state clean up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16242&#39;&gt;FLINK-16242&lt;/a&gt;] -         BinaryGeneric serialization error cause checkpoint failure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16308&#39;&gt;FLINK-16308&lt;/a&gt;] -         SQL connector download links are broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16373&#39;&gt;FLINK-16373&lt;/a&gt;] -         EmbeddedLeaderService: IllegalStateException: The RPC connection is already closed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16573&#39;&gt;FLINK-16573&lt;/a&gt;] -         Kinesis consumer does not properly shutdown RecordFetcher threads
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16576&#39;&gt;FLINK-16576&lt;/a&gt;] -         State inconsistency on restore with memory state backends
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16696&#39;&gt;FLINK-16696&lt;/a&gt;] -         Savepoint trigger documentation is insufficient
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16703&#39;&gt;FLINK-16703&lt;/a&gt;] -         AkkaRpcActor state machine does not record transition to terminating state.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16836&#39;&gt;FLINK-16836&lt;/a&gt;] -         Losing leadership does not clear rpc connection in JobManagerLeaderListener
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16860&#39;&gt;FLINK-16860&lt;/a&gt;] -         Failed to push filter into OrcTableSource when upgrading to 1.9.2
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16916&#39;&gt;FLINK-16916&lt;/a&gt;] -         The logic of NullableSerializer#copy is wrong
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-17062&#39;&gt;FLINK-17062&lt;/a&gt;] -         Fix the conversion from Java row type to Python row type
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14278&#39;&gt;FLINK-14278&lt;/a&gt;] -         Pass in ioExecutor into AbstractDispatcherResourceManagerComponentFactory
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15908&#39;&gt;FLINK-15908&lt;/a&gt;] -         Add description of support &amp;#39;pip install&amp;#39; to 1.9.x documents
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15909&#39;&gt;FLINK-15909&lt;/a&gt;] -         Add PyPI release process into the subsequent release of 1.9.x 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15938&#39;&gt;FLINK-15938&lt;/a&gt;] -         Idle state not cleaned in StreamingJoinOperator and StreamingSemiAntiJoinOperator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16018&#39;&gt;FLINK-16018&lt;/a&gt;] -         Improve error reporting when submitting batch job (instead of AskTimeoutException)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16031&#39;&gt;FLINK-16031&lt;/a&gt;] -         Improve the description in the README file of PyFlink 1.9.x
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16167&#39;&gt;FLINK-16167&lt;/a&gt;] -         Update documentation about python shell execution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16280&#39;&gt;FLINK-16280&lt;/a&gt;] -         Fix sample code errors in the documentation about elasticsearch connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16697&#39;&gt;FLINK-16697&lt;/a&gt;] -         Disable JMX rebinding
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16862&#39;&gt;FLINK-16862&lt;/a&gt;] -         Remove example url in quickstarts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16942&#39;&gt;FLINK-16942&lt;/a&gt;] -         ES 5 sink should allow users to select netty transport client
&lt;/li&gt;
&lt;/ul&gt;
            
&lt;h2&gt;        Task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11767&#39;&gt;FLINK-11767&lt;/a&gt;] -         Introduce new TypeSerializerUpgradeTestBase, new PojoSerializerUpgradeTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-16454&#39;&gt;FLINK-16454&lt;/a&gt;] -         Update the copyright year in NOTICE files
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Fri, 24 Apr 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/04/24/release-1.9.3.html</link>
<guid isPermaLink="true">/news/2020/04/24/release-1.9.3.html</guid>
</item>

<item>
<title>Memory Management Improvements with Apache Flink 1.10</title>
<description>Apache Flink 1.10 comes with significant changes to the memory model of the Task Managers and configuration options for your Flink applications. These recently-introduced changes make Flink more adaptable to all kinds of deployment environments (e.g. Kubernetes, Yarn, Mesos), providing strict control over its memory consumption. In this post, we describe Flink’s memory model, as it stands in Flink 1.10, how to set up and manage memory consumption of your Flink applications and the recent changes the community implemented in the latest Apache Flink release. 

## Introduction to Flink’s memory model

Having a clear understanding of Apache Flink’s memory model allows you to manage resources for the various workloads more efficiently. The following diagram illustrates the main memory components in Flink:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-21-memory-management-improvements-flink-1.10/total-process-memory.svg&quot; width=&quot;400px&quot; alt=&quot;Flink: Total Process Memory&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Flink: Total Process Memory&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

The Task Manager process is a JVM process. On a high level, its memory consists of the *JVM Heap* and *Off-Heap* memory. These types of memory are consumed by Flink directly or by JVM for its specific purposes (i.e. metaspace etc.). There are two major memory consumers within Flink: the user code of job operator tasks and the framework itself consuming memory for internal data structures, network buffers, etc.

**Please note that** the user code has direct access to all memory types: *JVM Heap, Direct* and *Native memory*. Therefore, Flink cannot really control its allocation and usage. There are however two types of Off-Heap memory which are consumed by tasks and controlled explicitly by Flink:

- *Managed Memory* (Off-Heap)
- *Network Buffers*

The latter is part of the *JVM Direct Memory*, allocated for user record data exchange between operator tasks.

## How to set up Flink memory

With the latest release of Flink 1.10 and in order to provide better user experience, the framework comes with both high-level and fine-grained tuning of memory components. There are essentially three alternatives to setting up memory in Task Managers.

The first two — and simplest — alternatives are configuring one of the two following options for total memory available for the JVM process of the Task Manager:

- *Total Process Memory*: total memory consumed by the Flink Java application (including user code) and by the JVM to run the whole process.
- *Total Flink Memory*: only memory consumed by the Flink Java application, including user code but excluding memory allocated by JVM to run it

It is advisable to configure the *Total Flink Memory* for standalone deployments where explicitly declaring how much memory is given to Flink is a common practice, while the outer *JVM overhead* is of little interest. For the cases of deploying Flink in containerized environments (such as [Kubernetes](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/deployment/kubernetes.html), [Yarn](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/deployment/yarn_setup.html) or [Mesos](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/deployment/mesos.html)), the *Total Process Memory* option is recommended instead, because it becomes the size for the total memory of the requested container. Containerized environments usually strictly enforce this memory limit. 

If you want more fine-grained control over the size of *JVM Heap* and *Managed Memory* (Off-Heap), there is also a second alternative to configure both *[Task Heap](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_setup.html#task-operator-heap-memory)* and *[Managed Memory](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_setup.html#managed-memory)*. This alternative gives a clear separation between the heap memory and any other memory types.

In line with the community’s efforts to [unify batch and stream processing](https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html), this model works universally for both scenarios. It allows sharing the *JVM Heap* memory between the user code of operator tasks in any workload and the heap state backend in stream processing scenarios. In a similar way, the *Managed Memory* can be used for batch spilling and for the RocksDB state backend in streaming.

The remaining memory components are automatically adjusted either based on their default values or additionally configured parameters. Flink also checks the overall consistency. You can find more information about the different memory components in the corresponding [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_detail.html). Additionally, you can try different configuration options with the [configuration spreadsheet](https://docs.google.com/spreadsheets/d/1mJaMkMPfDJJ-w6nMXALYmTc4XxiV30P5U7DzgwLkSoE/edit#gid=0) of [FLIP-49](https://cwiki.apache.org/confluence/display/FLINK/FLIP-49%3A+Unified+Memory+Configuration+for+TaskExecutors) and check the corresponding results for your individual case.

If you are migrating from a Flink version older than 1.10, we suggest following the steps in the [migration guide](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_migration.html) of the Flink documentation.

## Other components

While configuring Flink’s memory, the size of different memory components can either be fixed with the value of the respective option or tuned using multiple options. Below we provide some more insight about the memory setup.

### Fractions of the Total Flink Memory

This method allows a proportional breakdown of the *Total Flink Memory* where the [Managed Memory](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_setup.html#managed-memory) (if not set explicitly) and [Network Buffers](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_detail.html#capped-fractionated-components) can take certain fractions of it. The remaining memory is then assigned to the [Task Heap](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_setup.html#task-operator-heap-memory) (if not set explicitly) and other fixed *JVM Heap* and *Off-Heap components*. The following picture represents an example of such a setup:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-21-memory-management-improvements-flink-1.10/flink-memory-setup.svg&quot; width=&quot;800px&quot; alt=&quot;Flink: Example of Memory Setup&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Flink: Example of Memory Setup&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

**Please note that**

- Flink will verify that the size of the derived *Network Memory* is between its minimum and maximum value, otherwise Flink’s startup will fail. The maximum and minimum limits have default values which can be overwritten by the respective configuration options.
- In general, the configured fractions are treated by Flink as hints. Under certain scenarios, the derived value might not match the fraction. For example, if the *Total Flink Memory* and the *Task Heap* are configured to fixed values, the *Managed Memory* will get a certain fraction and the *Network Memory* will get the remaining memory which might not exactly match its fraction.

### More hints to control the container memory limit

The heap and direct memory usage are managed by the JVM. There are also many other possible sources of native memory consumption in Apache Flink or its user applications which are not managed by Flink or the JVM. Controlling their limits is often difficult which complicates debugging of potential memory leaks. If Flink’s process allocates too much memory in an unmanaged way, it can often result in killing Task Manager containers in containerized environments. In this case, it may be hard to understand which type of memory consumption has exceeded its limit. Flink 1.10 introduces some specific tuning options to clearly represent such components. Although Flink cannot always enforce strict limits and borders among them, the idea here is to explicitly plan the memory usage. Below we provide some examples of how memory setup can prevent containers exceeding their memory limit:

- [RocksDB state cannot grow too big](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_tuning.html#rocksdb-state-backend). The memory consumption of RocksDB state backend is accounted for in the *Managed Memory*. RocksDB respects its limit by default (only since Flink 1.10). You can increase the *Managed Memory* size to improve RocksDB’s performance or decrease it to save resources.

- [User code or its dependencies consume significant off-heap memory](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_setup.html#configure-off-heap-memory-direct-or-native). Tuning the *Task Off-Heap* option can assign additional direct or native memory to the user code or any of its dependencies. Flink cannot control native allocations but it sets the limit for *JVM Direct* memory allocations. The *Direct* memory limit is enforced by the JVM.

- [JVM metaspace requires additional memory](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_detail.html#jvm-parameters). If you encounter `OutOfMemoryError: Metaspace`, Flink provides an option to increase its limit and the JVM will ensure that it is not exceeded.

- [JVM requires more internal memory](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/memory/mem_detail.html#capped-fractionated-components). There is no direct control over certain types of JVM process allocations but Flink provides *JVM Overhead* options. The options allow declaring an additional amount of memory, anticipated for those allocations and not covered by other options.

## Conclusion

The latest Flink release (Flink 1.10) introduces some significant changes to Flink’s memory configuration, making it possible to manage your application memory and debug Flink significantly better than before. Future developments in this area also include adopting a similar memory model for the job manager process in [FLIP-116](https://cwiki.apache.org/confluence/display/FLINK/FLIP+116%3A+Unified+Memory+Configuration+for+Job+Managers), so stay tuned for more additions and features in upcoming releases. If you have any suggestions or questions for the community, we encourage you to sign up to the Apache Flink [mailing lists](https://flink.apache.org/community.html#mailing-lists) and become part of the discussion there.
</description>
<pubDate>Tue, 21 Apr 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/04/21/memory-management-improvements-flink-1.10.html</link>
<guid isPermaLink="true">/news/2020/04/21/memory-management-improvements-flink-1.10.html</guid>
</item>

<item>
<title>Flink Serialization Tuning Vol. 1: Choosing your Serializer — if you can</title>
<description>Almost every Flink job has to exchange data between its operators and since these records may not only be sent to another instance in the same JVM but instead to a separate process, records need to be serialized to bytes first. Similarly, Flink’s off-heap state-backend is based on a local embedded RocksDB instance which is implemented in native C++ code and thus also needs transformation into bytes on every state access. Wire and state serialization alone can easily cost a lot of your job’s performance if not executed correctly and thus, whenever you look into the profiler output of your Flink job, you will most likely see serialization in the top places for using CPU cycles.

Since serialization is so crucial to your Flink job, we would like to highlight Flink’s serialization stack in a series of blog posts starting with looking at the different ways Flink can serialize your data types.

{% toc %}

# Recap: Flink Serialization

Flink handles [data types and serialization](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/types_serialization.html) with its own type descriptors, generic type extraction, and type serialization framework. We recommend reading through the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/types_serialization.html) first in order to be able to follow the arguments we present below. In essence, Flink tries to infer information about your job’s data types for wire and state serialization, and to be able to use grouping, joining, and aggregation operations by referring to individual field names, e.g. 
`stream.keyBy(“ruleId”)` or 
`dataSet.join(another).where(&quot;name&quot;).equalTo(&quot;personName&quot;)`. It also allows optimizations in the serialization format as well as reducing unnecessary de/serializations (mainly in certain Batch operations as well as in the SQL/Table APIs).


# Choice of Serializer

Apache Flink&#39;s out-of-the-box serialization can be roughly divided into the following groups:

- **Flink-provided special serializers** for basic types (Java primitives and their boxed form), arrays, composite types (tuples, Scala case classes, Rows), and a few auxiliary types (Option, Either, Lists, Maps, …),

- **POJOs**; a public, standalone class with a public no-argument constructor and all non-static, non-transient fields in the class hierarchy either public or with a public getter- and a setter-method; see [POJO Rules](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/types_serialization.html#rules-for-pojo-types),

- **Generic types**; user-defined data types that are not recognized as a POJO and then serialized via [Kryo](https://github.com/EsotericSoftware/kryo).

Alternatively, you can also register [custom serializers](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/custom_serializers.html) for user-defined data types. This includes writing your own serializers or integrating other serialization systems like [Google Protobuf](https://developers.google.com/protocol-buffers/) or [Apache Thrift](https://thrift.apache.org/) via [Kryo](https://github.com/EsotericSoftware/kryo). Overall, this gives quite a number of different options of serializing user-defined data types and we will elaborate seven of them in the sections below.


## PojoSerializer

As outlined above, if your data type is not covered by a specialized serializer but follows the [POJO Rules](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/types_serialization.html#rules-for-pojo-types), it will be serialized with the [PojoSerializer](https://github.com/apache/flink/blob/release-1.10.0/flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializer.java) which uses Java reflection to access an object’s fields. It is fast, generic, Flink-specific, and supports [state schema evolution](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/stream/state/schema_evolution.html) out of the box. If a composite data type cannot be serialized as a POJO, you will find the following message (or similar) in your cluster logs:

&gt; 15:45:51,460 INFO  org.apache.flink.api.java.typeutils.TypeExtractor             - Class … cannot be used as a POJO type because not all fields are valid POJO fields, and must be processed as GenericType. Please read the Flink documentation on &quot;Data Types &amp; Serialization&quot; for details of the effect on performance.


This means, that the PojoSerializer will not be used, but instead Flink will fall back to Kryo for serialization (see below). We will have a more detailed look into a few (more) situations that can lead to unexpected Kryo fallbacks in the second part of this blog post series.


## Tuple Data Types

Flink comes with a predefined set of tuple types which all have a fixed length and contain a set of strongly-typed fields of potentially different types. There are implementations for `Tuple0`, `Tuple1&lt;T0&gt;`, …, `Tuple25&lt;T0, T1, ..., T24&gt;` and they may serve as easy-to-use wrappers that spare the creation of POJOs for each and every combination of objects you need to pass between computations. With the exception of `Tuple0`, these are serialized and deserialized with the [TupleSerializer](https://github.com/apache/flink/blob/release-1.10.0/flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/TupleSerializer.java) and the according fields’ serializers. Since tuple classes are completely under the control of Flink, both actions can be performed without reflection by accessing the appropriate fields directly. This certainly is a (performance) advantage when working with tuples instead of POJOs. Tuples, however, are not as flexible and certainly less descriptive in code.


&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
 Since `Tuple0` does not contain any data and therefore is probably a bit special anyway, it will use a special serializer implementation: [Tuple0Serializer](https://github.com/apache/flink/blob/release-1.10.0/flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/Tuple0Serializer.java).
&lt;/div&gt;

## Row Data Types

Row types are mainly used by the Table and SQL APIs of Flink. A `Row` groups an arbitrary number of objects together similar to the tuples above. These fields are not strongly typed and may all be of different types. Because field types are missing, Flink’s type extraction cannot automatically extract type information and users of a `Row` need to manually tell Flink about the row&#39;s field types. The [RowSerializer](https://github.com/apache/flink/blob/release-1.10.0/flink-core/src/main/java/org/apache/flink/api/java/typeutils/runtime/RowSerializer.java) will then make use of these types for efficient serialization.

Row type information can be provided in two ways:

- you can have your source or operator implement `ResultTypeQueryable&lt;Row&gt;`:

```java
public static class RowSource implements SourceFunction&lt;Row&gt;, ResultTypeQueryable&lt;Row&gt; {
  // ...

  @Override
  public TypeInformation&lt;Row&gt; getProducedType() {
    return Types.ROW(Types.INT, Types.STRING, Types.OBJECT_ARRAY(Types.STRING));
  }
}
```

- you can provide the types when building the job graph by using `SingleOutputStreamOperator#returns()`

```java
DataStream&lt;Row&gt; sourceStream =
    env.addSource(new RowSource())
        .returns(Types.ROW(Types.INT, Types.STRING, Types.OBJECT_ARRAY(Types.STRING)));
```

&lt;div class=&quot;alert alert-warning&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-warning&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Warning&lt;/span&gt;
If you fail to provide the type information for a `Row`, Flink identifies that `Row` is not a valid POJO type according to the rules above and falls back to Kryo serialization (see below) which you will also see in the logs as:

`13:10:11,148 INFO  org.apache.flink.api.java.typeutils.TypeExtractor             - Class class org.apache.flink.types.Row cannot be used as a POJO type because not all fields are valid POJO fields, and must be processed as GenericType. Please read the Flink documentation on &quot;Data Types &amp; Serialization&quot; for details of the effect on performance.`
&lt;/div&gt;

## Avro

Flink offers built-in support for the [Apache Avro](http://avro.apache.org/) serialization framework (currently using version 1.8.2) by adding the `org.apache.flink:flink-avro` dependency into your job. Flink’s [AvroSerializer](https://github.com/apache/flink/blob/release-1.10.0/flink-formats/flink-avro/src/main/java/org/apache/flink/formats/avro/typeutils/AvroSerializer.java) can then use Avro’s specific, generic, and reflective data serialization and make use of Avro’s performance and flexibility, especially in terms of [evolving the schema](https://avro.apache.org/docs/current/spec.html#Schema+Resolution) when the classes change over time.

### Avro Specific

Avro specific records will be automatically detected by checking that the given type’s type hierarchy contains the `SpecificRecordBase` class. You can either specify your concrete Avro type, or—if you want to be more generic and allow different types in your operator—use the `SpecificRecordBase` type (or a subtype) in your user functions, in `ResultTypeQueryable#getProducedType()`, or in `SingleOutputStreamOperator#returns()`. Since specific records use generated Java code, they are strongly typed and allow direct access to the fields via known getters and setters.

&lt;div class=&quot;alert alert-warning&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-warning&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Warning&lt;/span&gt; If you specify the Flink type as `SpecificRecord` and not `SpecificRecordBase`, Flink will not see this as an Avro type. Instead, it will use Kryo to de/serialize any objects which may be considerably slower. 
&lt;/div&gt;

### Avro Generic

Avro’s `GenericRecord` types cannot, unfortunately, be used automatically since they require the user to [specify a schema](https://avro.apache.org/docs/1.8.2/gettingstartedjava.html#Serializing+and+deserializing+without+code+generation) (either manually or by retrieving it from some schema registry). With that schema, you can provide the right type information by either of the following options just like for the Row Types above:

- implement `ResultTypeQueryable&lt;GenericRecord&gt;`:

```java
public static class AvroGenericSource implements SourceFunction&lt;GenericRecord&gt;, ResultTypeQueryable&lt;GenericRecord&gt; {
  private final GenericRecordAvroTypeInfo producedType;

  public AvroGenericSource(Schema schema) {
    this.producedType = new GenericRecordAvroTypeInfo(schema);
  }
  
  @Override
  public TypeInformation&lt;GenericRecord&gt; getProducedType() {
    return producedType;
  }
}
```
- provide type information when building the job graph by using `SingleOutputStreamOperator#returns()`

```java
DataStream&lt;GenericRecord&gt; sourceStream =
    env.addSource(new AvroGenericSource())
        .returns(new GenericRecordAvroTypeInfo(schema));
```
Without this type information, Flink will fall back to Kryo for serialization which would serialize the schema into every record, over and over again. As a result, the serialized form will be bigger and more costly to create.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
 Since Avro’s `Schema` class is not serializable, it can not be sent around as is. You can work around this by converting it to a String and parsing it back when needed. If you only do this once on initialization, there is practically no difference to sending it directly.
&lt;/div&gt;

### Avro Reflect

The third way of using Avro is to exchange Flink’s PojoSerializer (for POJOs according to the rules above) for Avro’s reflection-based serializer. This can be enabled by calling

```java
env.getConfig().enableForceAvro();
```

## Kryo

Any class or object which does not fall into the categories above or is covered by a Flink-provided special serializer is de/serialized with a fallback to [Kryo](https://github.com/EsotericSoftware/kryo) (currently version 2.24.0) which is a powerful and generic serialization framework in Java. Flink calls such a type a *generic type* and you may stumble upon `GenericTypeInfo` when debugging code. If you are using Kryo serialization, make sure to register your types with kryo:

```java
env.getConfig().registerKryoType(MyCustomType.class);
```
Registering types adds them to an internal map of classes to tags so that, during serialization, Kryo does not have to add the fully qualified class names as a prefix into the serialized form. Instead, Kryo uses these (integer) tags to identify the underlying classes and reduce serialization overhead.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Flink will store Kryo serializer mappings from type registrations in its checkpoints and savepoints and will retain them across job (re)starts.
&lt;/div&gt;

### Disabling Kryo

If desired, you can disable the Kryo fallback, i.e. the ability to serialize generic types, by calling

```java
env.getConfig().disableGenericTypes();
```

This is mostly useful for finding out where these fallbacks are applied and replacing them with better serializers. If your job has any generic types with this configuration, it will fail with

&gt; Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException: Generic types have been disabled in the ExecutionConfig and type … is treated as a generic type.

If you cannot immediately see from the type where it is being used, this log message also gives you a stacktrace that can be used to set breakpoints and find out more details in your IDE.


## Apache Thrift (via Kryo)

In addition to the variants above, Flink also allows you to [register other type serialization frameworks](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/custom_serializers.html#register-a-custom-serializer-for-your-flink-program) with Kryo. After adding the appropriate dependencies from the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/custom_serializers.html#register-a-custom-serializer-for-your-flink-program) (`com.twitter:chill-thrift` and `org.apache.thrift:libthrift`), you can use [Apache Thrift](https://thrift.apache.org/) like the following:

```java
env.getConfig().addDefaultKryoSerializer(MyCustomType.class, TBaseSerializer.class);
```

This only works if generic types are not disabled and `MyCustomType` is a Thrift-generated data type. If the data type is not generated by Thrift, Flink will fail at runtime with an exception like this:

&gt; java.lang.ClassCastException: class MyCustomType cannot be cast to class org.apache.thrift.TBase (MyCustomType and org.apache.thrift.TBase are in unnamed module of loader &#39;app&#39;)

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Please note that `TBaseSerializer` can be registered as a default Kryo serializer as above (and as specified in [its documentation](https://github.com/twitter/chill/blob/v0.7.6/chill-thrift/src/main/java/com/twitter/chill/thrift/TBaseSerializer.java)) or via `registerTypeWithKryoSerializer`. In practice, we found both ways working. We also saw no difference between registering Thrift classes in addition to the call above. Both may be different in your scenario.
&lt;/div&gt;

## Protobuf (via Kryo)

In a way similar to Apache Thrift, [Google Protobuf](https://developers.google.com/protocol-buffers/) may be [registered as a custom serializer](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/custom_serializers.html#register-a-custom-serializer-for-your-flink-program) after adding the right dependencies (`com.twitter:chill-protobuf` and `com.google.protobuf:protobuf-java`):

```java
env.getConfig().registerTypeWithKryoSerializer(MyCustomType.class, ProtobufSerializer.class);
```
This will work as long as generic types have not been disabled (this would disable Kryo for good). If `MyCustomType` is not a Protobuf-generated class, your Flink job will fail at runtime with the following exception:

&gt; java.lang.ClassCastException: class `MyCustomType` cannot be cast to class com.google.protobuf.Message (`MyCustomType` and com.google.protobuf.Message are in unnamed module of loader &#39;app&#39;)

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Please note that `ProtobufSerializer` can be registered as a default Kryo serializer (as specified in the [Protobuf documentation](https://github.com/twitter/chill/blob/v0.7.6/chill-thrift/src/main/java/com/twitter/chill/thrift/TBaseSerializer.java)) or via `registerTypeWithKryoSerializer` (as presented here). In practice, we found both ways working. We also saw no difference between registering your Protobuf classes in addition to the call above. Both may be different in your scenario.
&lt;/div&gt;

# State Schema Evolution

Before taking a closer look at the performance of each of the serializers described above, we would like to emphasize that performance is not everything that counts inside a real-world Flink job. Types for storing state, for example, should be able to evolve their schema (add/remove/change fields) throughout the lifetime of the job without losing previous state. This is what Flink calls [State Schema Evolution](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/state/schema_evolution.html). Currently, as of Flink 1.10, there are only two serializers that support out-of-the-box schema evolution: POJO and Avro. For anything else, if you want to change the state schema, you will have to either implement your own [custom serializers](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/stream/state/custom_serialization.html) or use the [State Processor API](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/libs/state_processor_api.html) to modify your state for the new code.

# Performance Comparison

With so many options for serialization, it is actually not easy to make the right choice. We already saw some technical advantages and disadvantages of each of them outlined above. Since serializers are at the core of your Flink jobs and usually also sit on the hot path (per record invocations), let us actually take a deeper look into their performance with the help of the Flink benchmarks project at [https://github.com/dataArtisans/flink-benchmarks](https://github.com/dataArtisans/flink-benchmarks). This project adds a few micro-benchmarks on top of Flink (some more low-level than others) to track performance regressions and improvements. Flink’s continuous benchmarks for monitoring the serialization stack’s performance are implemented in [SerializationFrameworkMiniBenchmarks.java](https://github.com/dataArtisans/flink-benchmarks/blob/master/src/main/java/org/apache/flink/benchmark/SerializationFrameworkMiniBenchmarks.java). This is only a subset of all available serialization benchmarks though and you will find the complete set in [SerializationFrameworkAllBenchmarks.java](https://github.com/dataArtisans/flink-benchmarks/blob/master/src/main/java/org/apache/flink/benchmark/full/SerializationFrameworkAllBenchmarks.java). All of these use the same definition of a small POJO that may cover average use cases. Essentially (without constructors, getters, and setters), these are the data types that it uses for evaluating performance:

```java
public class MyPojo {
  public int id;
  private String name;
  private String[] operationNames;
  private MyOperation[] operations;
  private int otherId1;
  private int otherId2;
  private int otherId3;
  private Object someObject;
}
public class MyOperation {
  int id;
  protected String name;
}
```

This is mapped to tuples, rows, Avro specific records, Thrift and Protobuf representations appropriately and sent through a simple Flink job at parallelism 4 where the data type is used during network communication like this:

```java
env.setParallelism(4);
env.addSource(new PojoSource(RECORDS_PER_INVOCATION, 10))
    .rebalance()
    .addSink(new DiscardingSink&lt;&gt;());
```
After running this through the [jmh](http://openjdk.java.net/projects/code-tools/jmh/) micro-benchmarks defined in [SerializationFrameworkAllBenchmarks.java](https://github.com/dataArtisans/flink-benchmarks/blob/master/src/main/java/org/apache/flink/benchmark/full/SerializationFrameworkAllBenchmarks.java), I retrieved the following performance results for Flink 1.10 on my machine (in number of operations per millisecond):
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-15-flink-serialization-performance-results.svg&quot; width=&quot;800px&quot; alt=&quot;Communication between the Flink operator and the Python execution environment&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

A few takeaways from these numbers:

- The default fallback from POJO to Kryo reduces performance by 75%.&lt;br&gt;
  Registering types with Kryo significantly improves its performance with only 64% fewer operations than by using a POJO.

- Avro GenericRecord and SpecificRecord are roughly serialized at the same speed.

- Avro Reflect serialization is even slower than Kryo default (-45%).

- Tuples are the fastest, closely followed by Rows. Both leverage fast specialized serialization code based on direct access without Java reflection.

- Using a (nested) Tuple instead of a POJO may speed up your job by 42% (but is less flexible!).
 Having code-generation for the PojoSerializer ([FLINK-3599](https://jira.apache.org/jira/browse/FLINK-3599)) may actually close that gap (or at least move closer to the RowSerializer). If you feel like giving the implementation a go, please give the Flink community a note and we will see whether we can make that happen.

- If you cannot use POJOs, try to define your data type with one of the serialization frameworks that generate specific code for it: Protobuf, Avro, Thrift (in that order, performance-wise).

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt; As with all benchmarks, please bear in mind that these numbers only give a hint on Flink’s serializer performance in a specific scenario. They may be different with your data types but the rough classification is probably the same. If you want to be sure, please verify the results with your data types. You should be able to copy from `SerializationFrameworkAllBenchmarks.java` to set up your own micro-benchmarks or integrate different serialization benchmarks into your own tooling.
&lt;/div&gt;

# Conclusion

In the sections above, we looked at how Flink performs serialization for different sorts of data types and elaborated the technical advantages and disadvantages. For data types used in Flink state, you probably want to leverage either POJO or Avro types which, currently, are the only ones supporting state evolution out of the box and allow your stateful application to develop over time. POJOs are usually faster in the de/serialization while Avro may support more flexible schema evolution and may integrate better with external systems. Please note, however, that you can use different serializers for external vs. internal components or even state vs. network communication.

The fastest de/serialization is achieved with Flink’s internal tuple and row serializers which can access these types&#39; fields directly without going via reflection. With roughly 30% decreased throughput as compared to tuples, Protobuf and POJO types do not perform too badly on their own and are more flexible and maintainable. Avro (specific and generic) records as well as Thrift data types further reduce performance by 20% and 30%, respectively. You definitely want to avoid Kryo as that reduces throughput further by around 50% and more!

The next article in this series will use this finding as a starting point to look into a few common pitfalls and obstacles of avoiding Kryo, how to get the most out of the PojoSerializer, and a few more tuning techniques with respect to serialization. Stay tuned for more.
</description>
<pubDate>Wed, 15 Apr 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/04/15/flink-serialization-tuning-vol-1.html</link>
<guid isPermaLink="true">/news/2020/04/15/flink-serialization-tuning-vol-1.html</guid>
</item>

<item>
<title>PyFlink: Introducing Python Support for UDFs in Flink&#39;s Table API</title>
<description>Flink 1.9 introduced the Python Table API, allowing developers and data engineers to write Python Table API jobs for Table transformations and analysis, such as Python ETL or aggregate jobs. However, Python users faced some limitations when it came to support for Python UDFs in Flink 1.9, preventing them from extending the system’s built-in functionality. 

In Flink 1.10, the community further extended the support for Python by adding Python UDFs in PyFlink. Additionally, both the Python UDF environment and dependency management are now supported, allowing users to import third-party libraries in the UDFs, leveraging Python&#39;s rich set of third-party libraries. 


# Python Support for UDFs in Flink 1.10

Before diving into how you can define and use Python UDFs, we explain the motivation and background behind how UDFs work in PyFlink and provide some additional context about the implementation of our approach. Below we give a brief introduction on the PyFlink architecture from job submission, all the way to executing the Python UDF.

The PyFlink architecture mainly includes two parts — local and cluster — as shown in the architecture visual below. The local phase is the compilation of the job, and the cluster is the execution of the job.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-09-pyflink-udfs/pyflink-udf-architecture.png&quot; width=&quot;600px&quot; alt=&quot;PyFlink UDF Architecture&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

For the local part, the Python API is a mapping of the Java API:  each time Python executes a method in the figure above, it will synchronously call the method corresponding to Java through Py4J, and finally generate a Java JobGraph, before submitting it to the cluster.

For the cluster part, just like ordinary Java jobs, the JobMaster schedules tasks to TaskManagers. The tasks that include Python UDF in a TaskManager involve the execution of Java and Python operators. In the Python UDF operator, various gRPC services are used to provide different communications between the Java VM and the Python VM, such as DataService for data transmissions, StateService for state requirements, and Logging and Metrics Services. These services are built on Beam&#39;s Fn API. While currently only Process mode is supported for Python workers, support for Docker mode and External service mode is also considered for future Flink releases.

# How to use PyFlink with UDFs in Flink 1.10

This section provides some Python user defined function (UDF) examples, including how to install PyFlink, how to define/register/invoke UDFs in PyFlink and how to execute the job.


## Install PyFlink
Using Python in Apache Flink requires installing PyFlink. PyFlink is available through PyPI and can be easily installed using pip: 

```bash
$ python -m pip install apache-flink
```
&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Please note that Python 3.5 or higher is required to install and run PyFlink
&lt;/div&gt;

&lt;br&gt;

## Define a Python UDF

There are many ways to define a Python scalar function, besides extending the base class `ScalarFunction`. The following example shows the different ways of defining a Python scalar function that takes two columns of `BIGINT` as input parameters and returns the sum of them as the result.

```python
# option 1: extending the base class `ScalarFunction`
class Add(ScalarFunction):
  def eval(self, i, j):
    return i + j

add = udf(Add(), [DataTypes.BIGINT(), DataTypes.BIGINT()], DataTypes.BIGINT())

# option 2: Python function
@udf(input_types=[DataTypes.BIGINT(), DataTypes.BIGINT()], result_type=DataTypes.BIGINT())
def add(i, j):
  return i + j

# option 3: lambda function
add = udf(lambda i, j: i + j, [DataTypes.BIGINT(), DataTypes.BIGINT()], DataTypes.BIGINT())

# option 4: callable function
class CallableAdd(object):
  def __call__(self, i, j):
    return i + j

add = udf(CallableAdd(), [DataTypes.BIGINT(), DataTypes.BIGINT()], DataTypes.BIGINT())

# option 5: partial function
def partial_add(i, j, k):
  return i + j + k

add = udf(functools.partial(partial_add, k=1), [DataTypes.BIGINT(), DataTypes.BIGINT()],
          DataTypes.BIGINT())
```

## Register a Python UDF

```python
# register the Python function
table_env.register_function(&quot;add&quot;, add)
```

## Invoke a Python UDF

```python
# use the function in Python Table API
my_table.select(&quot;add(a, b)&quot;)
```

Below, you can find a complete example of using Python UDF.

```python
from pyflink.datastream import StreamExecutionEnvironment
from pyflink.table import StreamTableEnvironment, DataTypes
from pyflink.table.descriptors import Schema, OldCsv, FileSystem
from pyflink.table.udf import udf

env = StreamExecutionEnvironment.get_execution_environment()
env.set_parallelism(1)
t_env = StreamTableEnvironment.create(env)

add = udf(lambda i, j: i + j, [DataTypes.BIGINT(), DataTypes.BIGINT()], DataTypes.BIGINT())

t_env.register_function(&quot;add&quot;, add)

t_env.connect(FileSystem().path(&#39;/tmp/input&#39;)) \
    .with_format(OldCsv()
                 .field(&#39;a&#39;, DataTypes.BIGINT())
                 .field(&#39;b&#39;, DataTypes.BIGINT())) \
    .with_schema(Schema()
                 .field(&#39;a&#39;, DataTypes.BIGINT())
                 .field(&#39;b&#39;, DataTypes.BIGINT())) \
    .create_temporary_table(&#39;mySource&#39;)

t_env.connect(FileSystem().path(&#39;/tmp/output&#39;)) \
    .with_format(OldCsv()
                 .field(&#39;sum&#39;, DataTypes.BIGINT())) \
    .with_schema(Schema()
                 .field(&#39;sum&#39;, DataTypes.BIGINT())) \
    .create_temporary_table(&#39;mySink&#39;)

t_env.from_path(&#39;mySource&#39;)\
    .select(&quot;add(a, b)&quot;) \
    .insert_into(&#39;mySink&#39;)

t_env.execute(&quot;tutorial_job&quot;)
```

## Submit the job

Firstly, you need to prepare the input data in the “/tmp/input” file. For example,

`$ echo &quot;1,2&quot; &gt; /tmp/input`

Next, you can run this example on the command line,

`$ python python_udf_sum.py`

The command builds and runs the Python Table API program in a local mini-cluster. You can also submit the Python Table API program to a remote cluster using different command lines, (see more details [here](https://ci.apache.org/projects/flink/flink-docs-release-1.10/ops/cli.html#job-submission-examples)).

Finally, you can see the execution result on the command line:

`$ cat /tmp/output
 3`


## Python UDF dependency management

In many cases, you would like to import third-party dependencies in the Python UDF. The example below provides detailed guidance on how to manage such dependencies.

Suppose you want to use the `mpmath` to perform the sum of the example above. The Python UDF may look like:

```python
@udf(input_types=[DataTypes.BIGINT(), DataTypes.BIGINT()], result_type=DataTypes.BIGINT())
def add(i, j):
    from mpmath import fadd # add third-party dependency
    return int(fadd(i, j))
```

To make it available on the worker node that does not contain the dependency, you can specify the dependencies with the following commands and API:

```bash
$ cd /tmp
$ echo mpmath==1.1.0 &gt; requirements.txt
$ pip download -d cached_dir -r requirements.txt --no-binary :all:
```

```python
t_env.set_python_requirements(&quot;/tmp/requirements.txt&quot;, &quot;/tmp/cached_dir&quot;)
```

A `requirements.txt` file that defines the third-party dependencies is used. If the dependencies cannot be accessed in the cluster, then you can specify a directory containing the installation packages of these dependencies by using the parameter &quot;`requirements_cached_dir`&quot;, as illustrated in the example above. The dependencies will be uploaded to the cluster and installed offline. 


# Conclusion &amp; Upcoming work

In this blog post, we introduced the architecture of Python UDFs in PyFlink and provided some examples on how to define, register and invoke UDFs. Flink 1.10 brings Python support in the framework to new levels, allowing Python users to write even more magic with their preferred language. The community is actively working towards continuously improving the functionality and performance of PyFlink. Future work in upcoming releases will introduce support for Pandas UDFs in scalar and aggregate functions, add support to use Python UDFs through the SQL client to further expand the usage scope of Python UDFs, provide support for a Python ML Pipeline API and finally work towards even more performance improvements. The picture below provides more details on the roadmap for succeeding releases. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-09-pyflink-udfs/roadmap-of-pyflink.png&quot; width=&quot;600px&quot; alt=&quot;Roadmap of PyFlink&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;
</description>
<pubDate>Thu, 09 Apr 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/2020/04/09/pyflink-udf-support-flink.html</link>
<guid isPermaLink="true">/2020/04/09/pyflink-udf-support-flink.html</guid>
</item>

<item>
<title>Stateful Functions 2.0 - An Event-driven Database on Apache Flink</title>
<description>Today, we are announcing the release of Stateful Functions (StateFun) 2.0 — the first release of Stateful Functions as part of the Apache Flink project.
This release marks a big milestone: Stateful Functions 2.0 is not only an API update, but the **first version of an event-driven database** that is built on Apache Flink.

Stateful Functions 2.0 makes it possible to combine StateFun’s powerful approach to state and composition with the elasticity, rapid scaling/scale-to-zero and rolling upgrade capabilities of FaaS implementations like AWS Lambda and modern resource orchestration frameworks like Kubernetes. 

With these features, Stateful Functions 2.0 addresses [two of the most cited shortcomings](https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf) of many FaaS setups today: consistent state and efficient messaging between functions.

{% toc %}


## An Event-driven Database

When Stateful Functions joined Apache Flink at the beginning of this year, the project had started as a library on top of Flink to build general-purpose event-driven applications. Users would implement _functions_ that receive and send messages, and maintain state in persistent variables. Flink provided the runtime with efficient exactly-once state and messaging. Stateful Functions 1.0 was a FaaS-inspired mix between stream processing and actor programming — on steroids.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
	&lt;figure&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image2.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 1&quot;/&gt;
	&lt;br/&gt;&lt;br/&gt;
	&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.1:&lt;/b&gt; A ride-sharing app as a Stateful Functions example.&lt;/i&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

In version 2.0, Stateful Functions now physically decouples the functions from Flink and the JVM, to invoke them through simple services. That makes it possible to execute functions on a FaaS platform, a Kubernetes deployment or behind a (micro) service. 

Flink invokes the functions through a service endpoint via HTTP or gRPC based on incoming events, and supplies state access. The system makes sure that only one invocation per entity (`type`+`ID`) is ongoing at any point in time, thus guaranteeing consistency through isolation.
By supplying state access as part of the function invocation, the functions themselves behave like stateless applications and can be managed with the same simplicity and benefits: rapid scalability, scale-to-zero, rolling/zero-downtime upgrades and so on.

&lt;center&gt;
	&lt;figure&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image5.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 2&quot;/&gt;
	&lt;br/&gt;&lt;br/&gt;
	&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.2:&lt;/b&gt; In Stateful Functions 2.0, functions are stateless and state access is part of the function invocation.&lt;/i&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

The functions can be implemented in any programming language that can handle HTTP requests or bring up a gRPC server. The [StateFun project](https://github.com/apache/flink-statefun) includes a very slim SDK for Python, taking requests and dispatching them to annotated functions. We aim to provide similar SDKs for other languages, such as Go, JavaScript or Rust. Users do not need to write any Flink code (or JVM code) at all; data ingresses/egresses and function endpoints can be defined in a compact YAML spec.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;figure&gt;
		&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image3.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 3&quot;/&gt;
		&lt;br/&gt;&lt;br/&gt;
		&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.3:&lt;/b&gt; A module declaring a remote endpoint and a function type.&lt;/i&gt;&lt;/figcaption&gt;
	  &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-6&quot;&gt;
    &lt;div class=&quot;text-center&quot;&gt;
      &lt;figure&gt;
      	&lt;div style=&quot;line-height:540%;&quot;&gt;
    		&lt;br&gt;
		&lt;/div&gt;
		&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image10.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 4&quot;/&gt;
		&lt;br/&gt;&lt;br/&gt;
		&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.4:&lt;/b&gt; A Python implementation of a simple classifier function.&lt;/i&gt;&lt;/figcaption&gt;
	  &lt;/figure&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

The Flink processes (and the JVM) are not executing any user-code at all — though this is possible, for performance reasons (see [Embedded Functions](#embedded-functions)). Rather than running application-specific dataflows, Flink here stores the state of the functions and provides the dynamic messaging plane through which functions message each other, carefully dispatching messages/invocations to the event-driven functions/services to maintain consistency guarantees.

&gt; _Effectively, Flink takes the role of the database, but tailored towards event-driven functions and services. 
&gt; It integrates state storage with the messaging between (and the invocations of) functions and services. 
&gt; Because of this, Stateful Functions 2.0 can be thought of as an “Event-driven Database” on Apache Flink._

## “Event-driven Database” vs. “Request/Response Database”

In the case of a traditional database or key/value store (let’s call them request/response databases), the application issues queries to the database (e.g. SQL via JDBC, GET/PUT via HTTP). In contrast, an event-driven database like StateFun **_inverts_** that relationship between database and application: the database invokes the functions/services based on arriving messages. This fits very naturally with FaaS and many event-driven application architectures.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
	&lt;figure&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image7.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 5&quot;/&gt;
	&lt;br/&gt;&lt;br/&gt;
	&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.5:&lt;/b&gt; Stateful Functions 2.0 inverts the relationship between database and application.&lt;/i&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

In the case of applications built on request/response databases, the database is responsible only for the state. Communication between different functions/services is a separate concern handled within the application layer. In contrast to that, an event-driven database takes care of both state storage and message transport, in a tightly integrated manner.

Similar to [Actor Programming](https://www.brianstorti.com/the-actor-model/), Stateful Functions uses the idea of _addressable entities_ - here, the entity is a function ``type`` with an invocation scoped to an ``ID``. These addressable entities own the state and are the targets of messages. Different to actor systems is that the application logic is external and the addressable entities are not physical objects in memory (i.e. actors), but rows in Flink&#39;s managed state, together with the entities’ mailboxes.

### State and Consistency

Besides matching the needs of serverless applications and FaaS well, the event-driven database approach also helps with simplifying consistent state management.

Consider the example below, with two entities of an application — for example two microservices (_Service 1_, _Service 2_). _Service 1_ is invoked, updates the state in the database, and sends a request to _Service 2_. Assume that this request fails. There is, in general, no way for _Service 1_ to know whether _Service 2_ processed the request and updated its state or not (c.f. [Two Generals Problem](https://en.wikipedia.org/wiki/Two_Generals%27_Problem)). To work around that, many techniques exist — making requests idempotent and retrying, commit/rollback protocols, or external transaction coordinators, for example. Solving this in the application layer is complex enough, and including the database into these approaches only adds more complexity.

In the scenario where the event-driven database takes care of state and messaging, we have a much easier problem to solve. Assume one shard of the database receives the initial message, updates its state, invokes _Service 1_, and routes the message produced by the function to another shard, to be delivered to _Service 2_. Now assume message transport errored — it may have failed or not, we cannot know for certain. Because the database is in charge of state and messaging, it can offer a generic solution to make sure that either both go through or none does, for example through transactions or [consistent snapshots](https://dl.acm.org/doi/abs/10.14778/3137765.3137777). The application functions are stateless and their invocations without side effects, which means they can be re-invoked again without implications on consistency.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
	&lt;figure&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image8.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 6&quot;/&gt;
	&lt;br/&gt;&lt;br/&gt;
	&lt;figcaption&gt;&lt;i&gt;&lt;b&gt;Fig.6:&lt;/b&gt; The event-driven database integrates state access and messaging, guaranteeing consistency.&lt;/i&gt;&lt;/figcaption&gt;
	&lt;/figure&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

That is the big lesson we learned from working on stream processing technology in the past years: **state access/updates and messaging need to be integrated**. This gives you consistency, scalable behavior and backpressures well based on both state access and compute bottlenecks.

Despite state and computation being physically separated here, the scheduling/dispatching of function invocations is still integrated and physically co-located with state access, preserving the consistency guarantees given by physical state/compute co-location.

## Remote, Co-located or Embedded Functions

Functions can be deployed in various ways that trade off loose coupling and independent scaling with performance overhead. Each module of functions can be of a different kind, so some functions can run remote, while others could run embedded.

### Remote Functions

_Remote Functions_ are the mechanism described so far, where functions are deployed separately from the Flink StateFun cluster. The state/messaging tier (i.e. the Flink processes) and the function tier can be deployed and scaled independently. All function invocations are remote and have to go through the endpoint service.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image6.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 7&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

In a similar way as databases are accessed via a standardized protocol (e.g. ODBC/JDBC for relational databases, REST for many key/value stores), StateFun 2.0 invokes functions and services through a standardized protocol: HTTP or gRPC with data in a well-defined ProtoBuf schema.

### Co-located Functions

An alternative way of deploying functions is _co-location_ with the Flink JVM processes. In such a setup, each Flink TaskManager would talk to one function process sitting “next to it”. A common way to do this is to use a system like Kubernetes and deploy pods consisting of a Flink container and the function container that communicate via the pod-local network.

This mode supports different languages while avoiding to route invocations through a Service/Gateway/LoadBalancer, but it cannot scale the state and compute parts independently.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image9.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 8&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

This style of deployment is similar to how [Apache Beam’s portability layer](https://beam.apache.org/roadmap/portability/) and [Flink’s Python API]({{ site.docs-stable }}/tutorials/python_table_api.html) deploy their non-JVM language SDKs.

### Embedded Functions

_Embedded Functions_ are the mode of Stateful Functions 1.0 and Flink’s Java/Scala stream processing APIs. Functions are deployed into the JVM and are directly invoked with the messages and state access. This is the most performant way, though at the cost of only supporting JVM languages.

&lt;div style=&quot;line-height:60%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-04-07-release-statefun-2.0.0/image11.png&quot; width=&quot;600px&quot; alt=&quot;Statefun 9&quot;/&gt;
&lt;/center&gt;

&lt;div style=&quot;line-height:150%;&quot;&gt;
    &lt;br&gt;
&lt;/div&gt;

Following the database analogy, embedded functions are a bit like _stored procedures_, but in a principled way: the functions here are normal Java/Scala/Kotlin functions implementing standard interfaces and can be developed or tested in any IDE.

## Loading Data into the Database

When building a new stateful application, you usually don’t start from a completely blank slate. Often, the application has initial state, such as initial “bootstrap” state, or state from previous versions of the application. When using a database, one could simply bulk load the data to prepare the application.

The equivalent step for Flink would be to write a [savepoint]({{ site.docs-stable }}/ops/state/savepoints.html) that contains the initial state. Savepoints are snapshots of the state of the distributed stream processing application and can be passed to Flink to start processing from that state. Think of them as a database dump, but of a distributed streaming database. In the case of StateFun, the savepoint would contain the state of the functions.

To create a savepoint for a Stateful Functions program, check out the [State Bootstrapping API](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.0/deployment-and-operations/state-bootstrap.html) that is part of StateFun 2.0. The State Bootstrapping API uses Flink’s [DataSet API]({{ site.docs-stable }}/dev/batch/), but we plan to expand this to use SQL in the next versions.

## Try it out and get involved!

We hope that we could convey some of the excitement we feel about Stateful Functions. If we managed to pique your curiosity, try it out — for example, starting with [this walkthrough](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.0/getting-started/python_walkthrough.html).

The project is still in a comparatively early stage, so if you want to get involved, there is lots to work on: SDKs for other languages (e.g. Go, JavaScript, Rust), ingresses/egresses and tools for testing, among others.

To follow the project and learn more, please check out these resources:

* Code: [https://github.com/apache/flink-statefun](https://github.com/apache/flink-statefun)
* Docs: [https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.0/](https://ci.apache.org/projects/flink/flink-statefun-docs-release-2.0/)
* Apache Flink project site: [https://flink.apache.org/](https://flink.apache.org/)
* Apache Flink on Twitter: [@ApacheFlink](https://twitter.com/apacheflink)
* Stateful Functions Webpage: [https://statefun.io](https://statefun.io)
* Stateful Functions on Twitter: [@StateFun_IO](https://twitter.com/statefun_io)

## Thank you!

The Apache Flink community would like to thank all contributors that have made this release possible:

David Anderson, Dian Fu, Igal Shilman, Seth Wiesman, Stephan Ewen, Tzu-Li (Gordon) Tai, hequn8128


</description>
<pubDate>Tue, 07 Apr 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/04/07/release-statefun-2.0.0.html</link>
<guid isPermaLink="true">/news/2020/04/07/release-statefun-2.0.0.html</guid>
</item>

<item>
<title>Flink Community Update - April&#39;20</title>
<description>While things slow down around us, the Apache Flink community is privileged to remain as active as ever. This blogpost combs through the past few months to give you an update on the state of things in Flink — from core releases to Stateful Functions; from some good old community stats to a new development blog.

And since now it&#39;s more important than ever to keep up the spirits, we’d like to invite you to join the [Flink Forward Virtual Conference](https://www.flink-forward.org/sf-2020), on April 22-24 (see [Upcoming Events](#upcoming-events)). Hope to see you there!

{% toc %}

# The Year (so far) in Flink

## Flink 1.10 Release

To kick off the new year, the Flink community [released Flink 1.10](https://flink.apache.org/news/2020/02/11/release-1.10.0.html) with the record contribution of over 200 engineers. This release introduced significant improvements to the overall performance and stability of Flink jobs, a preview of native Kubernetes integration and advances in Python support (PyFlink). Flink 1.10 also marked the completion of the [Blink integration](https://flink.apache.org/news/2019/08/22/release-1.9.0.html#preview-of-the-new-blink-sql-query-processor), hardening streaming SQL and bringing mature batch processing to Flink with production-ready Hive integration and TPC-DS coverage.

The community is now discussing the [release of Flink 1.10.1](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/DISCUSS-Releasing-Flink-1-10-1-td38689.html#a38690), covering some outstanding bugs from Flink 1.10.

## Stateful Functions Contribution and 2.0 Release

Last January, the first version of Stateful Functions ([statefun.io](https://statefun.io/)) code was pushed to the [Flink repository](https://github.com/apache/flink-statefun). Stateful Functions started out as an API to build general purpose event-driven applications on Flink, taking advantage of its advanced state management mechanism to cut the “middleman” that usually handles state coordination in such applications (e.g. a database).

In a [recent update](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/DISCUSS-Update-on-Flink-Stateful-Functions-what-are-the-next-steps-tp38646.html), some new features were announced, like multi-language support (including a Python SDK), function unit testing and Stateful Functions’ own flavor of the [State Processor API](https://ci.apache.org/projects/flink/flink-docs-stable/dev/libs/state_processor_api.html). The release cycle will be independent from core Flink releases and the Release Candidate (RC) has been created — so, **you can expect Stateful Functions 2.0 to be released very soon!**

## Building up to Flink 1.11

Amidst the usual outpour of discussion threads, JIRA tickets and FLIPs, the community is working full steam on bringing Flink 1.11 to life in the next few months. The feature freeze is currently scheduled for late April, so the release is expected around mid May. 
The upcoming release will focus on new features and integrations that broaden the scope of Flink use cases, as well as core runtime enhancements to streamline the operations of complex deployments.

Some of the plans on the use case side include support for changelog streams in the Table API/SQL ([FLIP-105](https://cwiki.apache.org/confluence/display/FLINK/FLIP-105%3A+Support+to+Interpret+and+Emit+Changelog+in+Flink+SQL)), easy streaming data ingestion into Apache Hive ([FLIP-115](https://cwiki.apache.org/confluence/display/FLINK/FLIP-115%3A+Filesystem+connector+in+Table)) and support for Pandas DataFrames in PyFlink. On the operational side, the much anticipated new Source API ([FLIP-27](https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface)) will unify batch and streaming sources, and improve out-of-the-box event-time behavior; while unaligned checkpoints ([FLIP-76](https://cwiki.apache.org/confluence/display/FLINK/FLIP-76%3A+Unaligned+Checkpoints)) and some changes to network memory management will allow to speed up checkpointing under backpressure. 

Throw into the mix improvements around type systems, the WebUI, metrics reporting and supported formats, this release is bound to keep the community busy. For a complete overview of the ongoing development, check [this discussion](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/DISCUSS-Features-of-Apache-Flink-1-11-td38724.html#a38793) and follow the weekly updates on the Flink [@community mailing list](https://flink.apache.org/community.html#mailing-lists).
	
## New Committers and PMC Members

The Apache Flink community has welcomed **1 PMC (Project Management Committee) Member** and **5 new Committers** since the last update (September 2019):

### New PMC Members
	Jark Wu

### New Committers
	Zili Chen, Jingsong Lee, Yu Li, Dian Fu, Zhu Zhu

Congratulations to all and thank you for your hardworking commitment to Flink!

# The Bigger Picture

## A Look into the Flink Repository

In the [last update](https://flink.apache.org/news/2019/09/10/community-update.html), we shared some numbers around Flink releases and mailing list activity. This time, we’re looking into the activity in the Flink repository and how it’s evolving.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-03-30-flink-community-update/2020-03-30-flink-community-update_1.png&quot; width=&quot;725px&quot; alt=&quot;GitHub 1&quot;/&gt;
&lt;/center&gt;

There is a clear upward trend in the number of contributions to the repository, based on the number of commits. This reflects the **fast pace of development** the project is experiencing and also the **successful integration of the China-based Flink contributors** started early last year. To complement these observations, the repository registered a **1.5x increase in the number of individual contributors in 2019**, compared to the previous year. 

But did this increase in capacity produce any other measurable benefits?

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-03-30-flink-community-update/2020-03-30-flink-community-update_2.png&quot; width=&quot;725px&quot; alt=&quot;GitHub 2&quot;/&gt;
&lt;/center&gt;

If we look at the average time of Pull Request (PR) “resolution”, it seems like it did: **the average time it takes to close a PR these days has been steadily decreasing** since last year, sitting between 5-6 days for the past few months. 

These are great indicators of the health of Flink as an open source project!

## Flink Community Packages

If you missed the launch of [flink-packages.org](http://flink-packages.org/), here’s a reminder! Ververica has [created (and open sourced)](https://www.ververica.com/blog/announcing-flink-community-packages) a website that showcases the work of the community to push forward the ecosystem surrounding Flink. There, you can explore existing packages (like the Pravega and Pulsar Flink connectors, or the Flink Kubernetes operators developed by Google and Lyft) and also submit your own contributions to the ecosystem.

## Flink &quot;Engine Room&quot;

The community has recently launched the [“Engine Room”](https://cwiki.apache.org/confluence/pages/viewrecentblogposts.action?key=FLINK), a dedicated space in Flink’s Wiki for knowledge sharing between contributors. The goal of this initiative is to make ongoing development on Flink internals more transparent across different work streams, and also to help new contributors get on board with best practices. The first blogpost is already up and sheds light on the [migration of Flink’s CI infrastructure from Travis to Azure Pipelines](https://cwiki.apache.org/confluence/display/FLINK/2020/03/22/Migrating+Flink%27s+CI+Infrastructure+from+Travis+CI+to+Azure+Pipelines).

# Upcoming Events

## Flink Forward Virtual Conference

The organization of Flink Forward had to make the hard decision of cancelling this year’s event in San Francisco. But all is not lost! **Flink Forward SF will be held online on April 22-24 and you can register (for free)** [here](https://www.flink-forward.org/sf-2020). Join the community for interactive talks and Q&amp;A sessions with core Flink contributors and companies like Splunk, Lyft, Netflix or Google.

## Others

Events across the globe have come to a halt due to the growing concerns around COVID-19, so this time we’ll leave you with some interesting content to read instead. In addition to this written content, you can also recap last year’s sessions from [Flink Forward Berlin](https://www.youtube.com/playlist?list=PLDX4T_cnKjD207Aa8b5CsZjc7Z_KRezGz) and [Flink Forward China](https://www.youtube.com/playlist?list=PLDX4T_cnKjD3ANoNinSx3Au-poZTHvbF5)!

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Links&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon glyphicon-bookmark&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Blogposts&lt;/td&gt;
      &lt;td&gt;&lt;ul&gt;
		  &lt;li&gt;&lt;a href=&quot;https://medium.com/bird-engineering/replayable-process-functions-in-flink-time-ordering-and-timers-28007a0210e1&quot;&gt;Replayable Process Functions: Time, Ordering, and Timers @Bird&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://engineering.salesforce.com/application-log-intelligence-performance-insights-at-salesforce-using-flink-92955f30573f&quot;&gt;Application Log Intelligence &amp; Performance Insights at Salesforce Using Flink @Salesforce&lt;/a&gt;&lt;/li&gt;
		  &lt;/ul&gt;
		  &lt;ul&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/01/29/state-unlocked-interacting-with-state-in-apache-flink.html&quot;&gt;State Unlocked: Interacting with State in Apache Flink&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html&quot;&gt;Advanced Flink Application Patterns Vol.1: Case Study of a Fraud Detection System&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/03/24/demo-fraud-detection-2.html&quot;&gt;Advanced Flink Application Patterns Vol.2: Dynamic Updates of Application Logic&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/ecosystem/2020/02/22/apache-beam-how-beam-runs-on-top-of-flink.html&quot;&gt;Apache Beam: How Beam Runs on Top of Flink&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/features/2020/03/27/flink-for-data-warehouse.html&quot;&gt;Flink as Unified Engine for Modern Data Warehousing: Production-Ready Hive Integration&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	  &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;span class=&quot;glyphicon glyphicon-console&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Tutorials&lt;/td&gt;
      &lt;td&gt;&lt;ul&gt;
      	  &lt;li&gt;&lt;a href=&quot;https://medium.com/@zjffdu/flink-on-zeppelin-part-3-streaming-5fca1e16754&quot;&gt;Flink on Zeppelin — (Part 3). Streaming&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/big-data/streaming-etl-with-apache-flink-and-amazon-kinesis-data-analytics&quot;&gt;Streaming ETL with Apache Flink and Amazon Kinesis Data Analytics&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/02/20/ddl.html&quot;&gt;No Java Required: Configuring Sources and Sinks in SQL&lt;/a&gt;&lt;/li&gt;
		  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/news/2020/02/07/a-guide-for-unit-testing-in-apache-flink.html&quot;&gt;A Guide for Unit Testing in Apache Flink&lt;/a&gt;&lt;/li&gt;
		  &lt;/ul&gt;
	  &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

If you’d like to keep a closer eye on what’s happening in the community, subscribe to the Flink [@community mailing list](https://flink.apache.org/community.html#mailing-lists) to get fine-grained weekly updates, upcoming event announcements and more.
</description>
<pubDate>Wed, 01 Apr 2020 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/04/01/community-update.html</link>
<guid isPermaLink="true">/news/2020/04/01/community-update.html</guid>
</item>

<item>
<title>Flink as Unified Engine for Modern Data Warehousing: Production-Ready Hive Integration</title>
<description>In this blog post, you will learn our motivation behind the Flink-Hive integration, and how Flink 1.10 can help modernize your data warehouse.

{% toc %}


## Introduction 

What are some of the latest requirements for your data warehouse and data infrastructure in 2020?

We’ve came up with some for you.

Firstly, today’s business is shifting to a more real-time fashion, and thus demands abilities to process online streaming data with low latency for near-real-time or even real-time analytics. People become less and less tolerant of delays between when data is generated and when it arrives at their hands, ready to use. Hours or even days of delay is not acceptable anymore. Users are expecting minutes, or even seconds, of end-to-end latency for data in their warehouse, to get quicker-than-ever insights.

Secondly, the infrastructure should be able to handle both offline batch data for offline analytics and exploration, and online streaming data for more timely analytics. Both are indispensable as they both have very valid use cases. Apart from the real time processing mentioned above, batch processing would still exist as it’s good for ad hoc queries and explorations, and full-size calculations. Your modern infrastructure should not force users to choose between one or the other, it should offer users both options for a world-class data infrastructure.

Thirdly, the data players, including data engineers, data scientists, analysts, and operations, urge a more unified infrastructure than ever before for easier ramp-up and higher working efficiency. The big data landscape has been fragmented for years - companies may have one set of infrastructure for real time processing, one set for batch, one set for OLAP, etc. That, oftentimes, comes as a result of the legacy of lambda architecture, which was popular in the era when stream processors were not as mature as today and users had to periodically run batch processing as a way to correct streaming pipelines. Well, it&#39;s a different era now! As stream processing becomes mainstream and dominant, end users no longer want to learn shattered pieces of skills and maintain many moving parts with all kinds of tools and pipelines. Instead, what they really need is a unified analytics platform that can be mastered easily, and simplify any operational complexity.

If any of these resonate with you, you just found the right post to read: we have never been this close to the vision by strengthening Flink’s integration with Hive to a production grade.


## Flink and Its Integration With Hive Comes into the Scene

Apache Flink has been a proven scalable system to handle extremely high workload of streaming data in super low latency in many giant tech companies.

Despite its huge success in the real time processing domain, at its deep root, Flink has been faithfully following its inborn philosophy of being [a unified data processing engine for both batch and streaming](https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html), and taking a streaming-first approach in its architecture to do batch processing. By making batch a special case for streaming, Flink really leverages its cutting edge streaming capabilities and applies them to batch scenarios to gain the best offline performance. Flink’s batch performance has been quite outstanding in the early days and has become even more impressive, as the community started merging Blink, Alibaba’s fork of Flink, back to Flink in 1.9 and finished it in 1.10.

On the other hand, Apache Hive has established itself as a focal point of the data warehousing ecosystem. It serves as not only a SQL engine for big data analytics and ETL, but also a data management platform, where data is discovered and defined. As business evolves, it puts new requirements on data warehouse.

Thus we started integrating Flink and Hive as a beta version in Flink 1.9. Over the past few months, we have been listening to users’ requests and feedback, extensively enhancing our product, and running rigorous benchmarks (which will be published soon separately). I’m glad to announce that the integration between Flink and Hive is at production grade in [Flink 1.10](https://flink.apache.org/news/2020/02/11/release-1.10.0.html) and we can’t wait to walk you through the details.


### Unified Metadata Management 

Hive Metastore has evolved into the de facto metadata hub over the years in the Hadoop, or even the cloud, ecosystem. Many companies have a single Hive Metastore service instance in production to manage all of their schemas, either Hive or non-Hive metadata, as the single source of truth.

In 1.9 we introduced Flink’s [HiveCatalog](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/hive/hive_catalog.html), connecting Flink to users’ rich metadata pool. The meaning of `HiveCatalog` is two-fold here. First, it allows Apache Flink users to utilize Hive Metastore to store and manage Flink’s metadata, including tables, UDFs, and statistics of data. Second, it enables Flink to access Hive’s existing metadata, so that Flink itself can read and write Hive tables.

In Flink 1.10, users can store Flink&#39;s own tables, views, UDFs, statistics in Hive Metastore on all of the compatible Hive versions mentioned above. [Here’s an end-to-end example](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/hive/hive_catalog.html#example) of how to store a Flink’s Kafka source table in Hive Metastore and later query the table in Flink SQL.


### Stream Processing

The Hive integration feature in Flink 1.10 empowers users to re-imagine what they can accomplish with their Hive data and unlock stream processing use cases:

- join real-time streaming data in Flink with offline Hive data for more complex data processing
- backfill Hive data with Flink directly in a unified fashion
- leverage Flink to move real-time data into Hive more quickly, greatly shortening the end-to-end latency between when data is generated and when it arrives at your data warehouse for analytics, from hours — or even days — to minutes


### Compatible with More Hive Versions

In Flink 1.10, we brought full coverage to most Hive versions including 1.0, 1.1, 1.2, 2.0, 2.1, 2.2, 2.3, and 3.1. Take a look [here](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/hive/#supported-hive-versions).


### Reuse Hive User Defined Functions (UDFs)

Users can [reuse all kinds of Hive UDFs in Flink](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/hive/hive_functions.html#hive-user-defined-functions) since Flink 1.9.

This is a great win for Flink users with past history with the Hive ecosystem, as they may have developed custom business logic in their Hive UDFs. Being able to run these functions without any rewrite saves users a lot of time and brings them a much smoother experience when they migrate to Flink.

To take it a step further, Flink 1.10 introduces [compatibility of Hive built-in functions via HiveModule](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/hive/hive_functions.html#use-hive-built-in-functions-via-hivemodule). Over the years, the Hive community has developed a few hundreds of built-in functions that are super handy for users. For those built-in functions that don&#39;t exist in Flink yet, users are now able to leverage the existing Hive built-in functions that they are familiar with and complete their jobs seamlessly.


### Enhanced Read and Write on Hive Data

Flink 1.10 extends its read and write capabilities on Hive data to all the common use cases with better performance. 

On the reading side, Flink now can read Hive regular tables, partitioned tables, and views. Lots of optimization techniques are developed around reading, including partition pruning and projection pushdown to transport less data from file storage, limit pushdown for faster experiment and exploration, and vectorized reader for ORC files.

On the writing side, Flink 1.10 introduces “INSERT INTO” and “INSERT OVERWRITE” to its syntax, and can write to not only Hive’s regular tables, but also partitioned tables with either static or dynamic partitions.

### Formats

Your engine should be able to handle all common types of file formats to give you the freedom of choosing one over another in order to fit your business needs. It’s no exception for Flink. We have tested the following table storage formats: text, csv, SequenceFile, ORC, and Parquet.

### More Data Types

In Flink 1.10, we added support for a few more frequently-used Hive data types that were not covered by Flink 1.9. Flink users now should have a full, smooth experience to query and manipulate Hive data from Flink.


### Roadmap

Integration between any two systems is a never-ending story. 

We are constantly improving Flink itself and the Flink-Hive integration also gets improved by collecting user feedback and working with folks in this vibrant community.

After careful consideration and prioritization of the feedback we received, we have prioritize many of the below requests for the next Flink release of 1.11.

- Hive streaming sink so that Flink can stream data into Hive tables, bringing a real streaming experience to Hive
- Native Parquet reader for better performance
- Additional interoperability - support creating Hive tables, views, functions in Flink
- Better out-of-box experience with built-in dependencies, including documentations
- JDBC driver so that users can reuse their existing toolings to run SQL jobs on Flink
- Hive syntax and semantic compatible mode

If you have more feature requests or discover bugs, please reach out to the community through mailing list and JIRAs.


## Summary

Data warehousing is shifting to a more real-time fashion, and Apache Flink can make a difference for your organization in this space.

Flink 1.10 brings production-ready Hive integration and empowers users to achieve more in both metadata management and unified/batch data processing.

We encourage all our users to get their hands on Flink 1.10. You are very welcome to join the community in development, discussions, and all other kinds of collaborations in this topic.

</description>
<pubDate>Fri, 27 Mar 2020 02:30:00 +0000</pubDate>
<link>https://flink.apache.org/features/2020/03/27/flink-for-data-warehouse.html</link>
<guid isPermaLink="true">/features/2020/03/27/flink-for-data-warehouse.html</guid>
</item>

<item>
<title>Advanced Flink Application Patterns Vol.2: Dynamic Updates of Application Logic</title>
<description>In the [first article](https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html) of the series, we gave a high-level description of the objectives and required functionality of a Fraud Detection engine. We also described how to make data partitioning in Apache Flink customizable based on modifiable rules instead of using a hardcoded `KeysExtractor` implementation.

We intentionally omitted details of how the applied rules are initialized and what possibilities exist for updating them at runtime. In this post, we will address exactly these details. You will learn how the approach to data partitioning described in [Part 1](https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html) can be applied in combination with a dynamic configuration. These two patterns, when used together, can eliminate the need to recompile the code and redeploy your Flink job for a wide range of modifications of the business logic.

## Rules Broadcasting

Let&#39;s first have a look at the [previously-defined](https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html#dynamic-data-partitioning) data-processing pipeline:

```java
DataStream&lt;Alert&gt; alerts =
    transactions
        .process(new DynamicKeyFunction())
        .keyBy((keyed) -&gt; keyed.getKey());
        .process(new DynamicAlertFunction())
```

`DynamicKeyFunction` provides dynamic data partitioning while `DynamicAlertFunction` is responsible for executing the main logic of processing transactions and sending alert messages according to defined rules.

Vol.1 of this series simplified the use case and assumed that the applied set of rules is pre-initialized and accessible via the `List&lt;Rules&gt;` within `DynamicKeyFunction`.

```java
public class DynamicKeyFunction
    extends ProcessFunction&lt;Transaction, Keyed&lt;Transaction, String, Integer&gt;&gt; {

  /* Simplified */
  List&lt;Rule&gt; rules = /* Rules that are initialized somehow.*/;
  ...
}
```

Adding rules to this list is obviously possible directly inside the code of the Flink Job at the stage of its initialization (Create a `List` object; use it&#39;s `add` method). A major drawback of doing so is that it will require recompilation of the job with each rule modification. In a real Fraud Detection system, rules are expected to change on a frequent basis, making this approach unacceptable from the point of view of business and operational requirements. A different approach is needed.

Next, let&#39;s take a look at a sample rule definition that we introduced in the previous post of the series:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/patterns-blog-2/rule-dsl.png&quot; width=&quot;800px&quot; alt=&quot;Figure 1: Rule definition&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 1: Rule definition&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

The previous post covered use of `groupingKeyNames` by `DynamicKeyFunction` to extract message keys. Parameters from the second part of this rule are used by `DynamicAlertFunction`: they define the actual logic of the performed operations and their parameters (such as the alert-triggering limit). This means that the same rule must be present in both `DynamicKeyFunction` and `DynamicAlertFunction`. To achieve this result, we will use the [broadcast data distribution mechanism](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/stream/state/broadcast_state.html) of Apache Flink.

Figure 2 presents the final job graph of the system that we are building:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/patterns-blog-2/job-graph.png&quot; width=&quot;800px&quot; alt=&quot;Figure 2: Job Graph of the Fraud Detection Flink Job&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 2: Job Graph of the Fraud Detection Flink Job&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

The main blocks of the Transactions processing pipeline are:&lt;br&gt;

* **Transaction Source** that consumes transaction messages from Kafka partitions in parallel. &lt;br&gt;

* **Dynamic Key Function** that performs data enrichment with a dynamic key. The subsequent `keyBy` hashes this dynamic key and partitions the data accordingly among all parallel instances of the following operator.

* **Dynamic Alert Function** that accumulates a data window and creates Alerts based on it.

## Data Exchange inside Apache Flink

The job graph above also indicates various data exchange patterns between the operators. In order to understand how the broadcast pattern works, let&#39;s take a short detour and discuss what methods of message propagation exist in Apache Flink&#39;s distributed runtime.

* The __FORWARD__ connection after the Transaction Source means that all data consumed by one of the parallel instances of the Transaction Source operator is transferred to exactly one instance of the subsequent `DynamicKeyFunction` operator. It also indicates the same level of parallelism of the two connected operators (12 in the above case). This communication pattern is illustrated in Figure 3. Orange circles represent transactions, and dotted rectangles depict parallel instances of the conjoined operators.  

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/patterns-blog-2/forward.png&quot; width=&quot;800px&quot; alt=&quot;Figure 3: FORWARD message passing across operator instances&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 3: FORWARD message passing across operator instances&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

* The __HASH__ connection between `DynamicKeyFunction` and `DynamicAlertFunction` means that for each message a hash code is calculated and messages are evenly distributed among available parallel instances of the next operator. Such a connection needs to be explicitly &quot;requested&quot; from Flink by using `keyBy`.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/patterns-blog-2/hash.png&quot; width=&quot;800px&quot; alt=&quot;Figure 4: HASHED message passing across operator instances (via `keyBy`)&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 4: HASHED message passing across operator instances (via `keyBy`)&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

* A __REBALANCE__ distribution is either caused by an explicit call to `rebalance()` or by a change of parallelism (12 -&gt; 1 in the case of the job graph from Figure 2). Calling `rebalance()` causes data to be repartitioned in a round-robin fashion and can help to mitigate data skew in certain scenarios.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/patterns-blog-2/rebalance.png&quot; width=&quot;800px&quot; alt=&quot;Figure 5: REBALANCE message passing across operator instances&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 5: REBALANCE message passing across operator instances&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

The Fraud Detection job graph in Figure 2 contains an additional data source: _Rules Source_. It also consumes from Kafka. Rules are &quot;mixed into&quot; the main processing data flow through the __BROADCAST__ channel. Unlike other methods of transmitting data between operators, such as `forward`, `hash` or `rebalance` that make each message available for processing in only one of the parallel instances of the receiving operator, `broadcast` makes each message available at the input of all of the parallel instances of the operator to which the _broadcast stream_ is connected. This makes `broadcast` applicable to a wide range of tasks that need to affect the processing of all messages, regardless of their key or source partition.

&lt;center&gt;
 &lt;img src=&quot;{{ site.baseurl }}/img/blog/patterns-blog-2/broadcast.png&quot; width=&quot;800px&quot; alt=&quot;Figure 6: BROADCAST message passing across operator instances&quot;/&gt;
 &lt;br/&gt;
 &lt;i&gt;&lt;small&gt;Figure 6: BROADCAST message passing across operator instances&lt;/small&gt;&lt;/i&gt;
 &lt;/center&gt;
 &lt;br/&gt;

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
There are actually a few more specialized data partitioning schemes in Flink which we did not mention here. If you want to find out more, please refer to Flink&#39;s documentation on __[stream partitioning](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/#physical-partitioning)__.
&lt;/div&gt;

## Broadcast State Pattern

In order to make use of the Rules Source, we need to &quot;connect&quot; it to the main data stream:

```java
// Streams setup
DataStream&lt;Transaction&gt; transactions = [...]
DataStream&lt;Rule&gt; rulesUpdateStream = [...]

BroadcastStream&lt;Rule&gt; rulesStream = rulesUpdateStream.broadcast(RULES_STATE_DESCRIPTOR);

// Processing pipeline setup
 DataStream&lt;Alert&gt; alerts =
     transactions
         .connect(rulesStream)
         .process(new DynamicKeyFunction())
         .keyBy((keyed) -&gt; keyed.getKey())
         .connect(rulesStream)
         .process(new DynamicAlertFunction())
```

As you can see, the broadcast stream can be created from any regular stream by calling the `broadcast` method and specifying a state descriptor. Flink assumes that broadcasted data needs to be stored and retrieved while processing events of the main data flow and, therefore, always automatically creates a corresponding _broadcast state_ from this state descriptor. This is different from any other Apache Flink state type in which you need to initialize it in the `open()` method of the  processing function. Also note that broadcast state always has a key-value format (`MapState`).

```java
public static final MapStateDescriptor&lt;Integer, Rule&gt; RULES_STATE_DESCRIPTOR =
        new MapStateDescriptor&lt;&gt;(&quot;rules&quot;, Integer.class, Rule.class);
```

Connecting to `rulesStream` causes some changes in the signature of the processing functions. The previous article presented it in a slightly simplified way as a `ProcessFunction`. However, `DynamicKeyFunction` is actually a `BroadcastProcessFunction`.

```java
public abstract class BroadcastProcessFunction&lt;IN1, IN2, OUT&gt; {

    public abstract void processElement(IN1 value,
                                        ReadOnlyContext ctx,
                                        Collector&lt;OUT&gt; out) throws Exception;

    public abstract void processBroadcastElement(IN2 value,
                                                 Context ctx,
                                                 Collector&lt;OUT&gt; out) throws Exception;

}
```

The difference is the addition of the `processBroadcastElement` method through which messages of the rules stream will arrive. The following new version of `DynamicKeyFunction` allows modifying the list of data-distribution keys at runtime through this stream:

```java
public class DynamicKeyFunction
    extends BroadcastProcessFunction&lt;Transaction, Rule, Keyed&lt;Transaction, String, Integer&gt;&gt; {


  @Override
  public void processBroadcastElement(Rule rule,
                                     Context ctx,
                                     Collector&lt;Keyed&lt;Transaction, String, Integer&gt;&gt; out) {
    BroadcastState&lt;Integer, Rule&gt; broadcastState = ctx.getBroadcastState(RULES_STATE_DESCRIPTOR);
    broadcastState.put(rule.getRuleId(), rule);
  }

  @Override
  public void processElement(Transaction event,
                           ReadOnlyContext ctx,
                           Collector&lt;Keyed&lt;Transaction, String, Integer&gt;&gt; out){
    ReadOnlyBroadcastState&lt;Integer, Rule&gt; rulesState =
                                  ctx.getBroadcastState(RULES_STATE_DESCRIPTOR);
    for (Map.Entry&lt;Integer, Rule&gt; entry : rulesState.immutableEntries()) {
        final Rule rule = entry.getValue();
        out.collect(
          new Keyed&lt;&gt;(
            event, KeysExtractor.getKey(rule.getGroupingKeyNames(), event), rule.getRuleId()));
    }
  }
}
```

In the above code, `processElement()` receives Transactions, and `processBroadcastElement()` receives Rule updates. When a new rule is created, it is distributed as depicted in Figure 6 and saved in all parallel instances of the operator using `processBroadcastState`. We use a Rule&#39;s ID as the key to store and reference individual rules. Instead of iterating over a hardcoded `List&lt;Rules&gt;`, we iterate over entries in the dynamically-updated broadcast state.

`DynamicAlertFunction` follows the same logic with respect to storing the rules in the broadcast `MapState`. As described in [Part 1](https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html), each message in the `processElement` input is intended to be processed by one specific rule and comes &quot;pre-marked&quot; with a corresponding ID by  `DynamicKeyFunction`. All we need to do is retrieve the definition of the corresponding rule from `BroadcastState` by using the provided ID and process it according to the logic required by that rule. At this stage, we will also add messages to the internal function state in order to perform calculations on the required time window of data. We will consider how this is done in the final blog of the series about Fraud Detection.

# Summary

In this blog post, we continued our investigation of the use case of a Fraud Detection System built with Apache Flink. We looked into different ways in which data can be distributed between parallel operator instances and, most importantly, examined broadcast state. We demonstrated how dynamic partitioning — a pattern described in the [first part](https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html) of the series — can be combined and enhanced by the functionality provided by the broadcast state pattern. The ability to send dynamic updates at runtime is a powerful feature of Apache Flink that is applicable in a variety of other use cases, such as controlling state (cleanup/insert/fix), running A/B experiments or executing updates of ML model coefficients.
</description>
<pubDate>Tue, 24 Mar 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/03/24/demo-fraud-detection-2.html</link>
<guid isPermaLink="true">/news/2020/03/24/demo-fraud-detection-2.html</guid>
</item>

<item>
<title>Apache Beam: How Beam Runs on Top of Flink</title>
<description>Note: This blog post is based on the talk [&quot;Beam on Flink: How Does It Actually Work?&quot;](https://www.youtube.com/watch?v=hxHGLrshnCY).

[Apache Flink](https://flink.apache.org/) and [Apache Beam](https://beam.apache.org/) are open-source frameworks for parallel, distributed data processing at scale. Unlike Flink, Beam does not come with a full-blown execution engine of its own but plugs into other execution engines, such as Apache Flink, Apache Spark, or Google Cloud Dataflow. In this blog post we discuss the reasons to use Flink together with Beam for your batch and stream processing needs. We also take a closer look at how Beam works with Flink to provide an idea of the technical aspects of running Beam pipelines with Flink. We hope you find some useful information on how and why the two frameworks can be utilized in combination. For more information, you can refer to the corresponding [documentation](https://beam.apache.org/documentation/runners/flink/) on the Beam website or contact the community through the [Beam mailing list](https://beam.apache.org/community/contact-us/).


# What is Apache Beam

[Apache Beam](https://beam.apache.org/) is an open-source, unified model for defining batch and streaming data-parallel processing pipelines. It is unified in the sense that you use a single API, in contrast to using a separate API for batch and streaming like it is the case in Flink. Beam was originally developed by Google which released it in 2014 as the Cloud Dataflow SDK. In 2016, it was donated to [the Apache Software Foundation](https://www.apache.org/) with the name of Beam. It has been developed by the open-source community ever since. With Apache Beam, developers can write data processing jobs, also known as pipelines, in multiple languages, e.g. Java, Python, Go, SQL. A pipeline is then executed by one of Beam’s Runners. A Runner is responsible for translating Beam pipelines such that they can run on an execution engine. Every supported execution engine has a Runner. The following Runners are available: Apache Flink, Apache Spark, Apache Samza, Hazelcast Jet, Google Cloud Dataflow, and others.

The execution model, as well as the API of Apache Beam, are similar to Flink&#39;s. Both frameworks are inspired by the [MapReduce](https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf), [MillWheel](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/41378.pdf), and [Dataflow](https://research.google/pubs/pub43864/) papers. Like Flink, Beam is designed for parallel, distributed data processing. Both have similar transformations, support for windowing, event/processing time, watermarks, timers, triggers, and much more. However, Beam not being a full runtime focuses on providing the framework for building portable, multi-language batch and stream processing pipelines such that they can be run across several execution engines. The idea is that you write your pipeline once and feed it with either batch or streaming data. When you run it, you just pick one of the supported backends to execute. A large integration test suite in Beam called &quot;ValidatesRunner&quot; ensures that the results will be the same, regardless of which backend you choose for the execution.

One of the most exciting developments in the Beam technology is the framework’s support for multiple programming languages including Java, Python, Go, Scala and SQL. Essentially, developers can write their applications in a programming language of their choice. Beam, with the help of the Runners, translates the program to one of the execution engines, as shown in the diagram below.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-02-22-beam-on-flink/flink-runner-beam-beam-vision.png&quot; width=&quot;600px&quot; alt=&quot;The vision of Apache Beam&quot;/&gt;
&lt;/center&gt;


# Reasons to use Beam with Flink

Why would you want to use Beam with Flink instead of directly using Flink? Ultimately, Beam and Flink complement each other and provide additional value to the user. The main reasons for using Beam with Flink are the following: 

* Beam provides a unified API for both batch and streaming scenarios.
* Beam comes with native support for different programming languages, like Python or Go with all their libraries like Numpy, Pandas, Tensorflow, or TFX.
* You get the power of Apache Flink like its exactly-once semantics, strong memory management and robustness.
* Beam programs run on your existing Flink infrastructure or infrastructure for other supported Runners, like Spark or Google Cloud Dataflow. 
* You get additional features like side inputs and cross-language pipelines that are not supported natively in Flink but only supported when using Beam with Flink. 


# The Flink Runner in Beam

The Flink Runner in Beam translates Beam pipelines into Flink jobs. The translation can be parameterized using Beam&#39;s pipeline options which are parameters for settings like configuring the job name, parallelism, checkpointing, or metrics reporting.

If you are familiar with a DataSet or a DataStream, you will have no problems understanding what a PCollection is. PCollection stands for parallel collection in Beam and is exactly what DataSet/DataStream would be in Flink. Due to Beam&#39;s unified API we only have one type of results of transformation: PCollection.

Beam pipelines are composed of transforms. Transforms are like operators in Flink and come in two flavors: primitive and composite transforms. The beauty of all this is that Beam only comes with a small set of primitive transforms which are:

- `Source` (for loading data)
- `ParDo` (think of a flat map operator on steroids)
- `GroupByKey` (think of keyBy() in Flink)
- `AssignWindows` (windows can be assigned at any point in time in Beam)
- `Flatten` (like a union() operation in Flink)

Composite transforms are built by combining the above primitive transforms. For example, `Combine = GroupByKey + ParDo`.


# Flink Runner Internals

Although using the Flink Runner in Beam has no prerequisite to understanding its internals, we provide more details of how the Flink runner works in Beam to share knowledge of how the two frameworks can integrate and work together to provide state-of-the-art streaming data pipelines.

The Flink Runner has two translation paths. Depending on whether we execute in batch or streaming mode, the Runner either translates into Flink&#39;s DataSet or into Flink&#39;s DataStream API. Since multi-language support has been added to Beam, another two translation paths have been added. To summarize the four modes:

1. **The Classic Flink Runner for batch jobs:** Executes batch Java pipelines
2. **The Classic Flink Runner for streaming jobs:** Executes streaming Java pipelines
3. **The Portable Flink Runner for batch jobs:** Executes Java as well as Python, Go and other supported SDK pipelines for batch scenarios
4. **The Portable Flink Runner for streaming jobs:** Executes Java as well as Python, Go and other supported SDK pipelines for streaming scenarios

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-02-22-beam-on-flink/flink-runner-beam-runner-translation-paths.png&quot; width=&quot;300px&quot; alt=&quot;The 4 translation paths in the Beam&#39;s Flink Runner&quot;/&gt;
&lt;/center&gt;


## The “Classic” Flink Runner in Beam

The classic Flink Runner was the initial version of the Runner, hence the &quot;classic&quot; name. Beam pipelines are represented as a graph in Java which is composed of the aforementioned composite and primitive transforms. Beam provides translators which traverse the graph in topological order. Topological order means that we start from all the sources first as we iterate through the graph. Presented with a transform from the graph, the Flink Runner generates the API calls as you would normally when writing a Flink job.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-02-22-beam-on-flink/classic-flink-runner-beam.png&quot; width=&quot;600px&quot; alt=&quot;The Classic Flink Runner in Beam&quot;/&gt;
&lt;/center&gt;

While Beam and Flink share very similar concepts, there are enough differences between the two frameworks that make Beam pipelines impossible to be translated 1:1 into a Flink program. In the following sections, we will present the key differences:

### Serializers vs Coders

When data is transferred over the wire in Flink, it has to be turned into bytes. This is done with the help of serializers. Flink has a type system to instantiate the correct coder for a given type, e.g. `StringTypeSerializer` for a String. Apache Beam also has its own type system which is similar to Flink&#39;s but uses slightly different interfaces. Serializers are called Coders in Beam. In order to make a Beam Coder run in Flink, we have to make the two serializer types compatible. This is done by creating a special Flink type information that looks like the one in Flink but calls the appropriate Beam coder. That way, we can use Beam&#39;s coders although we are executing the Beam job with Flink. Flink operators expect a TypeInformation, e.g. `StringTypeInformation`, for which we use a `CoderTypeInformation` in Beam. The type information returns the serializer for which we return a `CoderTypeSerializer`, which calls the underlying Beam Coder. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-02-22-beam-on-flink/flink-runner-beam-serializers-coders.png&quot; width=&quot;300px&quot; alt=&quot;Serializers vs Coders&quot;/&gt;
&lt;/center&gt;

### Read

The `Read` transform provides a way to read data into your pipeline in Beam. The Read transform is supported by two wrappers in Beam, the `SourceInputFormat` for batch processing and the `UnboundedSourceWrapper` for stream processing.

### ParDo

`ParDo` is the swiss army knife of Beam and can be compared to a `RichFlatMapFunction` in Flink with additional features such as `SideInputs`, `SideOutputs`, State and Timers. `ParDo` is essentially translated by the Flink runner using the `FlinkDoFnFunction` for batch processing or the `FlinkStatefulDoFnFunction`, while for streaming scenarios the translation is executed with the `DoFnOperator` that takes care of checkpointing and buffering of data during checkpoints, watermark emissions and maintenance of state and timers. This is all executed by Beam’s interface, called the `DoFnRunner`, that encapsulates Beam-specific execution logic, like retrieving state, executing state and timers, or reporting metrics.

### Side Inputs

In addition to the main input, ParDo transforms can have a number of side inputs. A side input can be a static set of data that you want to have available at all parallel instances. However, it is more flexible than that. You can have keyed and even windowed side input which updates based on the window size. This is a very powerful concept which does not exist in Flink but is added on top of Flink using Beam.

### AssignWindows

In Flink, windows are assigned by the `WindowOperator` when you use the `window()` in the API. In Beam, windows can be assigned at any point in time. Any element is implicitly part of a window. If no window is assigned explicitly, the element is part of the `GlobalWindow`. Window information is stored for each element in a wrapper called `WindowedValue`. The window information is only used once we issue a `GroupByKey`.

### GroupByKey

Most of the time it is useful to partition the data by a key. In Flink, this is done via the `keyBy()` API call. In Beam the `GroupByKey` transform can only be applied if the input is of the form `KV&lt;Key, Value&gt;`. Unlike Flink where the key can even be nested inside the data, Beam enforces the key to always be explicit. The `GroupByKey` transform then groups the data by key and by window which is similar to what `keyBy(..).window(..)` would give us in Flink. Beam has its own set of libraries to do that because Beam has its own set of window functions and triggers. Essentially, GroupByKey is very similar to what the WindowOperator does in Flink.

### Flatten

The Flatten operator takes multiple DataSet/DataStreams, called P[arallel]Collections in Beam, and combines them into one collection. This is equivalent to Flink&#39;s `union()` operation.


## The “Portable” Flink Runner in Beam

The portable Flink Runner in Beam is the evolution of the classic Runner. Classic Runners are tied to the JVM ecosystem, but the Beam community wanted to move past this and also execute Python, Go and other languages. This adds another dimension to Beam in terms of portability because, like previously mentioned, Beam already had portability across execution engines. It was necessary to change the translation logic of the Runner to be able to support language portability.

There are two important building blocks for portable Runners: 

1. A common pipeline format across all the languages: The Runner API
2. A common interface during execution for the communication between the Runner and the code written in any language: The Fn API

The Runner API provides a universal representation of the pipeline as Protobuf which contains the transforms, types, and user code. Protobuf was chosen as the format because every language has libraries available for it. Similarly, for the execution part, Beam introduced the Fn API interface to handle the communication between the Runner/execution engine and the user code that may be written in a different language and executes in a different process. Fn API is pronounced &quot;fun API&quot;, you may guess why.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-02-22-beam-on-flink/flink-runner-beam-language-portability.png&quot; width=&quot;600px&quot; alt=&quot;Language Portability in Apache Beam&quot;/&gt;
&lt;/center&gt;


## How Are Beam Programs Translated In Language Portability?

Users write their Beam pipelines in one language, but they may get executed in an environment based on a completely different language. How does that work? To explain that, let&#39;s follow the lifecycle of a pipeline. Let&#39;s suppose we use the Python SDK to write the pipeline. Before submitting the pipeline via the Job API to Beam&#39;s JobServer, Beam would convert it to the Runner API, the language-agnostic format we described before. The JobServer is also a Beam component that handles the staging of the required dependencies during execution. The JobServer will then kick-off the translation which is similar to the classic Runner. However, an important change is the so-called `ExecutableStage` transform. It is essentially a ParDo transform that we already know but designed for holding language-dependent code. Beam tries to combine as many of these transforms into one &quot;executable stage&quot;. The result again is a Flink program which is then sent to the Flink cluster and executed there. The major difference compared to the classic Runner is that during execution we will start _environments_ to execute the aforementioned _ExecutableStages_. The following environments are available:

- Docker-based (the default)
- Process-based (a simple process is started)
- Externally-provided (K8s or other schedulers)
- Embedded (intended for testing and only works with Java)

Environments hold the _SDK Harness_ which is the code that handles the execution and the communication with the Runner over the Fn API. For example, when Flink executes Python code, it sends the data to the Python environment containing the Python SDK Harness. Sending data to an external process involves a minor overhead which we have measured to be 5-10% slower than the classic Java pipelines. However, Beam uses a fusion of transforms to execute as many transforms as possible in the same environment which share the same input or output. That&#39;s why in real-world scenarios the overhead could be much lower.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-02-22-beam-on-flink/flink-runner-beam-language-portability-architecture.png&quot; width=&quot;600px&quot; alt=&quot;Language Portability Architecture in beam&quot;/&gt;
&lt;/center&gt;


Environments can be present for many languages. This opens up an entirely new type of pipelines: cross-language pipelines. In cross-language pipelines we can combine transforms of two or more languages, e.g. a machine learning pipeline with the feature generation written in Java and the learning written in Python. All this can be run on top of Flink.


## Conclusion

Using Apache Beam with Apache Flink combines  (a.) the power of Flink with (b.) the flexibility of Beam. All it takes to run Beam is a Flink cluster, which you may already have. Apache Beam&#39;s fully-fledged Python API is probably the most compelling argument for using Beam with Flink, but the unified API which allows to &quot;write-once&quot; and &quot;execute-anywhere&quot; is also very appealing to Beam users. On top of this, features like side inputs and a rich connector ecosystem are also reasons why people like Beam. 

With the introduction of schemas, a new format for handling type information, Beam is heading in a similar direction as Flink with its type system which is essential for the Table API or SQL. Speaking of, the next Flink release will include a Python version of the Table API which is based on the language portability of Beam. Looking ahead, the Beam community plans to extend the support for interactive programs like notebooks. TFX, which is built with Beam, is a very powerful way to solve many problems around training and validating machine learning models. 

For many years, Beam and Flink have inspired and learned from each other. With the Python support being based on Beam in Flink, they only seem to come closer to each other. That&#39;s all the better for the community, and also users have more options and functionality to choose from.
</description>
<pubDate>Sat, 22 Feb 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/ecosystem/2020/02/22/apache-beam-how-beam-runs-on-top-of-flink.html</link>
<guid isPermaLink="true">/ecosystem/2020/02/22/apache-beam-how-beam-runs-on-top-of-flink.html</guid>
</item>

<item>
<title>No Java Required: Configuring Sources and Sinks in SQL</title>
<description># Introduction

The recent [Apache Flink 1.10 release](https://flink.apache.org/news/2020/02/11/release-1.10.0.html) includes many exciting features.
In particular, it marks the end of the community&#39;s year-long effort to merge in the [Blink SQL contribution](https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html) from Alibaba.
The reason the community chose to spend so much time on the contribution is that SQL works.
It allows Flink to offer a truly unified interface over batch and streaming and makes stream processing accessible to a broad audience of developers and analysts.
Best of all, Flink SQL is ANSI-SQL compliant, which means if you&#39;ve ever used a database in the past, you already know it[^1]!

A lot of work focused on improving runtime performance and progressively extending its coverage of the SQL standard.
Flink now supports the full TPC-DS query set for batch queries, reflecting the readiness of its SQL engine to address the needs of modern data warehouse-like workloads.
Its streaming SQL supports an almost equal set of features - those that are well defined on a streaming runtime - including [complex joins](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/streaming/joins.html) and [MATCH_RECOGNIZE](https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/streaming/match_recognize.html).

As important as this work is, the community also strives to make these features generally accessible to the broadest audience possible.
That is why the Flink community is excited in 1.10 to offer production-ready DDL syntax (e.g., `CREATE TABLE`, `DROP TABLE`) and a refactored catalog interface.

# Accessing Your Data Where It Lives

Flink does not store data at rest; it is a compute engine and requires other systems to consume input from and write its output.
Those that have used Flink&#39;s `DataStream` API in the past will be familiar with connectors that allow for interacting with external systems. 
Flink has a vast connector ecosystem that includes all major message queues, filesystems, and databases.

&lt;div class=&quot;alert alert-info&quot;&gt;
If your favorite system does not have a connector maintained in the central Apache Flink repository, check out the &lt;a href=&quot;https://flink-packages.org&quot;&gt;flink packages website&lt;/a&gt;, which has a growing number of community-maintained components.
&lt;/div&gt;

While these connectors are battle-tested and production-ready, they are written in Java and configured in code, which means they are not amenable to pure SQL or Table applications.
For a holistic SQL experience, not only queries need to be written in SQL, but also table definitions. 

# CREATE TABLE Statements

While Flink SQL has long provided table abstractions atop some of Flink&#39;s most popular connectors, configurations were not always so straightforward.
Beginning in 1.10, Flink supports defining tables through `CREATE TABLE` statements.
With this feature, users can now create logical tables, backed by various external systems, in pure SQL. 

By defining tables in SQL, developers can write queries against logical schemas that are abstracted away from the underlying physical data store. Coupled with Flink SQL&#39;s unified approach to batch and stream processing, Flink provides a straight line from discovery to production.

Users can define tables over static data sets, anything from a local CSV file to a full-fledged data lake or even Hive.
Leveraging Flink&#39;s efficient batch processing capabilities, they can perform ad-hoc queries searching for exciting insights.
Once something interesting is identified, businesses can gain real-time and continuous insights by merely altering the table so that it is powered by a message queue such as Kafka.
Because Flink guarantees SQL queries have unified semantics over batch and streaming, users can be confident that redeploying this query as a continuous streaming application over a message queue will output identical results.

{% highlight sql %}
-- Define a table called orders that is backed by a Kafka topic
-- The definition includes all relevant Kafka properties,
-- the underlying format (JSON) and even defines a
-- watermarking algorithm based on one of the fields
-- so that this table can be used with event time.
CREATE TABLE orders (
	user_id    BIGINT,
	product    STRING,
	order_time TIMESTAMP(3),
	WATERMARK FOR order_time AS order_time - &#39;5&#39; SECONDS
) WITH (
	&#39;connector.type&#39;    	 = &#39;kafka&#39;,
	&#39;connector.version&#39; 	 = &#39;universal&#39;,
	&#39;connector.topic&#39;   	 = &#39;orders&#39;,
	&#39;connector.startup-mode&#39; = &#39;earliest-offset&#39;,
	&#39;connector.properties.bootstrap.servers&#39; = &#39;localhost:9092&#39;,
	&#39;format.type&#39; = &#39;json&#39; 
);

-- Define a table called product_analysis
-- on top of ElasticSearch 7 where we 
-- can write the results of our query. 
CREATE TABLE product_analysis (
	product 	STRING,
	tracking_time 	TIMESTAMP(3),
	units_sold 	BIGINT
) WITH (
	&#39;connector.type&#39;    = &#39;elasticsearch&#39;,
	&#39;connector.version&#39; = &#39;7&#39;,
	&#39;connector.hosts&#39;   = &#39;localhost:9200&#39;,
	&#39;connector.index&#39;   = &#39;ProductAnalysis&#39;,
	&#39;connector.document.type&#39; = &#39;analysis&#39; 
);

-- A simple query that analyzes order data
-- from Kafka and writes results into 
-- ElasticSearch. 
INSERT INTO product_analysis
SELECT
	product_id,
	TUMBLE_START(order_time, INTERVAL &#39;1&#39; DAY) as tracking_time,
	COUNT(*) as units_sold
FROM orders
GROUP BY
	product_id,
	TUMBLE(order_time, INTERVAL &#39;1&#39; DAY);
{% endhighlight %}

# Catalogs

While being able to create tables is important, it often isn&#39;t enough.
A business analyst, for example, shouldn&#39;t have to know what properties to set for Kafka, or even have to know what the underlying data source is, to be able to write a query.

To solve this problem, Flink 1.10 also ships with a revamped catalog system for managing metadata about tables and user definined functions.
With catalogs, users can create tables once and reuse them across Jobs and Sessions.
Now, the team managing a data set can create a table and immediately make it accessible to other groups within their organization.

The most notable catalog that Flink integrates with today is Hive Metastore.
The Hive catalog allows Flink to fully interoperate with Hive and serve as a more efficient query engine.
Flink supports reading and writing Hive tables, using Hive UDFs, and even leveraging Hive&#39;s metastore catalog to persist Flink specific metadata.

# Looking Ahead

Flink SQL has made enormous strides to democratize stream processing, and 1.10 marks a significant milestone in that development.
However, we are not ones to rest on our laurels and, the community is committed to raising the bar on standards while lowering the barriers to entry.
The community is looking to add more catalogs, such as JDBC and Apache Pulsar.
We encourage you to sign up for the [mailing list](https://flink.apache.org/community.html) and stay on top of the announcements and new features in upcoming releases.

---

[^1]: My colleague Timo, whose worked on Flink SQL from the beginning, has the entire SQL standard printed on his desk and references it before any changes are merged. It&#39;s enormous.
</description>
<pubDate>Thu, 20 Feb 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/02/20/ddl.html</link>
<guid isPermaLink="true">/news/2020/02/20/ddl.html</guid>
</item>

<item>
<title>Apache Flink 1.10.0 Release Announcement</title>
<description>The Apache Flink community is excited to hit the double digits and announce the release of Flink 1.10.0! As a result of the biggest community effort to date, with over 1.2k issues implemented and more than 200 contributors, this release introduces significant improvements to the overall performance and stability of Flink jobs, a preview of native Kubernetes integration and great advances in Python support (PyFlink). 

Flink 1.10 also marks the completion of the [Blink integration](https://flink.apache.org/news/2019/08/22/release-1.9.0.html#preview-of-the-new-blink-sql-query-processor), hardening streaming SQL and bringing mature batch processing to Flink with production-ready Hive integration and TPC-DS coverage. This blog post describes all major new features and improvements, important changes to be aware of and what to expect moving forward.

{% toc %}

The binary distribution and source artifacts are now available on the updated [Downloads page]({{ site.baseurl }}/downloads.html) of the Flink website. For more details, check the complete [release changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12345845) and the [updated documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/). We encourage you to download the release and share your feedback with the community through the [Flink mailing lists](https://flink.apache.org/community.html#mailing-lists) or [JIRA](https://issues.apache.org/jira/projects/FLINK/summary).


## New Features and Improvements


### Improved Memory Management and Configuration

The current `TaskExecutor` memory configuration in Flink has some shortcomings that make it hard to reason about or optimize resource utilization, such as: 

* Different configuration models for memory footprint in Streaming and Batch execution; 

* Complex and user-dependent configuration of off-heap state backends (i.e. RocksDB) in Streaming execution.

To make memory options more explicit and intuitive to users, Flink 1.10 introduces significant changes to the `TaskExecutor` memory model and configuration logic ([FLIP-49](https://cwiki.apache.org/confluence/display/FLINK/FLIP-49%3A+Unified+Memory+Configuration+for+TaskExecutors)). These changes make Flink more adaptable to all kinds of deployment environments (e.g. Kubernetes, Yarn, Mesos), giving users strict control over its memory consumption.

**Managed Memory Extension**

Managed memory was extended to also account for memory usage of `RocksDBStateBackend`. While batch jobs can use either on-heap or off-heap memory, streaming jobs with `RocksDBStateBackend` can use off-heap memory only. Therefore, to allow users to switch between Streaming and Batch execution without having to modify cluster configurations, managed memory is now always off-heap.

**Simplified RocksDB Configuration**

Configuring an off-heap state backend like RocksDB used to involve a good deal of manual tuning, like decreasing the JVM heap size or setting Flink to use off-heap memory. This can now be achieved through Flink&#39;s out-of-box configuration, and adjusting the memory budget for `RocksDBStateBackend` is as simple as resizing the managed memory size. 

Another important improvement was to allow Flink to bind RocksDB native memory usage ([FLINK-7289](https://issues.apache.org/jira/browse/FLINK-7289)), preventing it from exceeding its total memory budget — this is especially relevant in containerized environments like Kubernetes. For details on how to enable and tune this feature, refer to [Tuning RocksDB]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/ops/state/large_state_tuning.html#tuning-rocksdb).

&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; FLIP-49 changes the process of cluster resource configuration, which may require tuning your clusters for upgrades from previous Flink versions. For a comprehensive overview of the changes introduced and tuning guidance, consult [this setup]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/ops/memory/mem_setup.html).


### Unified Logic for Job Submission

Prior to this release, job submission was part of the duties of the Execution Environments and closely tied to the different deployment targets (e.g. Yarn, Kubernetes, Mesos). This led to a poor separation of concerns and, over time, to a growing number of customized environments that users needed to configure and manage separately.

In Flink 1.10, job submission logic is abstracted into the generic `Executor` interface ([FLIP-73](https://cwiki.apache.org/confluence/display/FLINK/FLIP-73%3A+Introducing+Executors+for+job+submission)). The addition of the `ExecutorCLI` ([FLIP-81](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=133631524)) introduces a unified way to specify configuration parameters for **any** [execution target]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/ops/cli.html#deployment-targets). To round up this effort, the process of result retrieval was also decoupled from job submission with the introduction of a `JobClient` ([FLINK-74](https://cwiki.apache.org/confluence/display/FLINK/FLIP-74%3A+Flink+JobClient+API)), responsible for fetching the `JobExecutionResult`.

&lt;span&gt;
	&lt;center&gt;
	&lt;img vspace=&quot;8&quot; style=&quot;width:100%&quot; src=&quot;{{site.baseurl}}/img/blog/2020-02-11-release-1.10.0/flink_1.10_zeppelin.png&quot; /&gt;
	&lt;/center&gt;
&lt;/span&gt;

In particular, these changes make it much easier to programmatically use Flink in downstream frameworks — for example, Apache Beam or Zeppelin interactive notebooks — by providing users with a unified entry point to Flink. For users working with Flink across multiple target environments, the transition to a configuration-based execution process also significantly reduces boilerplate code and maintainability overhead.

### Native Kubernetes Integration (Beta)

For users looking to get started with Flink on a containerized environment, deploying and managing a standalone cluster on top of Kubernetes requires some upfront knowledge about containers, operators and environment-specific tools like `kubectl`.

In Flink 1.10, we rolled out the first phase of **Active Kubernetes Integration** ([FLINK-9953](https://jira.apache.org/jira/browse/FLINK-9953)) with support for session clusters (with per-job planned). In this context, “active” means that Flink’s ResourceManager (`K8sResMngr`) natively communicates with Kubernetes to allocate new pods on-demand, similar to Flink’s Yarn and Mesos integration. Users can also leverage namespaces to launch Flink clusters for multi-tenant environments with limited aggregate resource consumption. RBAC roles and service accounts with enough permission should be configured beforehand.

&lt;span&gt;
	&lt;center&gt;
	&lt;img vspace=&quot;8&quot; style=&quot;width:75%&quot; src=&quot;{{site.baseurl}}/img/blog/2020-02-11-release-1.10.0/flink_1.10_nativek8s.png&quot;/&gt;
	&lt;/center&gt;
&lt;/span&gt;

As introduced in [Unified Logic For Job Submission](#unified-logic-for-job-submission), all command-line options in Flink 1.10 are mapped to a unified configuration. For this reason, users can simply refer to the Kubernetes config options and submit a job to an existing Flink session on Kubernetes in the CLI using:

```bash
./bin/flink run -d -e kubernetes-session -Dkubernetes.cluster-id=&lt;ClusterId&gt; examples/streaming/WindowJoin.jar
```

If you want to try out this preview feature, we encourage you to walk through the [Native Kubernetes setup]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/ops/deployment/native_kubernetes.html), play around with it and share feedback with the community.

### Table API/SQL: Production-ready Hive Integration

Hive integration was announced as a preview feature in Flink 1.9. This preview allowed users to persist Flink-specific metadata (e.g. Kafka tables) in Hive Metastore using SQL DDL, call UDFs defined in Hive and use Flink for reading and writing Hive tables. Flink 1.10 rounds up this effort with further developments that bring production-ready Hive integration to Flink with full compatibility of [most Hive versions]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/dev/table/hive/#supported-hive-versions).

#### Native Partition Support for Batch SQL

So far, only writes to non-partitioned Hive tables were supported. In Flink 1.10, the Flink SQL syntax has been extended with `INSERT OVERWRITE` and `PARTITION` ([FLIP-63](https://cwiki.apache.org/confluence/display/FLINK/FLIP-63%3A+Rework+table+partition+support)), enabling users to write into both static and dynamic partitions in Hive.

**Static Partition Writing**

```sql
INSERT { INTO | OVERWRITE } TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...)] select_statement1 FROM from_statement;
```

**Dynamic Partition Writing**

```sql
INSERT { INTO | OVERWRITE } TABLE tablename1 select_statement1 FROM from_statement;
```

Fully supporting partitioned tables allows users to take advantage of partition pruning on read, which significantly increases the performance of these operations by reducing the amount of data that needs to be scanned.

#### Further Optimizations

Besides partition pruning, Flink 1.10 introduces more [read optimizations]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/dev/table/hive/read_write_hive.html#optimizations) to Hive integration, such as:

* **Projection pushdown:** Flink leverages projection pushdown to minimize data transfer between Flink and Hive tables by omitting unnecessary fields from table scans. This is especially beneficial for tables with a large number of columns.

* **LIMIT pushdown:** for queries with the `LIMIT` clause, Flink will limit the number of output records wherever possible to minimize the amount of data transferred across the network.

* **ORC Vectorization on Read:** to boost read performance for ORC files, Flink now uses the native ORC Vectorized Reader by default for Hive versions above 2.0.0 and columns with non-complex data types.

#### Pluggable Modules as Flink System Objects (Beta)

Flink 1.10 introduces a generic mechanism for pluggable modules in the Flink table core, with a first focus on system functions ([FLIP-68](https://cwiki.apache.org/confluence/display/FLINK/FLIP-68%3A+Extend+Core+Table+System+with+Pluggable+Modules)). With modules, users can extend Flink’s system objects — for example use Hive built-in functions that behave like Flink system functions. This release ships with a pre-implemented `HiveModule`, supporting multiple Hive versions, but users are also given the possibility to [write their own pluggable modules]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/dev/table/modules.html).

### Other Improvements to the Table API/SQL

#### Watermarks and Computed Columns in SQL DDL

Flink 1.10 supports stream-specific syntax extensions to define time attributes and watermark generation in Flink SQL DDL ([FLIP-66](https://cwiki.apache.org/confluence/display/FLINK/FLIP-66%3A+Support+Time+Attribute+in+SQL+DDL)). This allows time-based operations, like windowing, and the definition of [watermark strategies]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/dev/table/sql/create.html#create-table) on tables created using DDL statements.

```sql
CREATE TABLE table_name (

  WATERMARK FOR columnName AS &lt;watermark_strategy_expression&gt;

) WITH (
  ...
)
```

This release also introduces support for virtual computed columns ([FLIP-70](https://cwiki.apache.org/confluence/display/FLINK/FLIP-70%3A+Flink+SQL+Computed+Column+Design)) that can be derived based on other columns in the same table or deterministic expressions (i.e. literal values, UDFs and built-in functions). In Flink, computed columns are useful to define time attributes [upon table creation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/dev/table/sql/create.html#create-table).

#### Additional Extensions to SQL DDL

There is now a clear distinction between temporary/persistent and system/catalog functions ([FLIP-57](https://cwiki.apache.org/confluence/display/FLINK/FLIP-57%3A+Rework+FunctionCatalog)). This not only eliminates ambiguity in function reference, but also allows for deterministic function resolution order (i.e. in case of naming collision, system functions will precede catalog functions, with temporary functions taking precedence over persistent functions for both dimensions).

Following the groundwork in FLIP-57, we extended the SQL DDL syntax to support the creation of catalog functions, temporary functions and temporary system functions ([FLIP-79](https://cwiki.apache.org/confluence/display/FLINK/FLIP-79+Flink+Function+DDL+Support)):

```sql
CREATE [TEMPORARY|TEMPORARY SYSTEM] FUNCTION 

  [IF NOT EXISTS] [catalog_name.][db_name.]function_name 

AS identifier [LANGUAGE JAVA|SCALA]
```

For a complete overview of the current state of DDL support in Flink SQL, check the [updated documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/dev/table/sql/).

&lt;span class=&quot;label label-danger&quot;&gt;Note&lt;/span&gt; In order to correctly handle and guarantee a consistent behavior across meta-objects (tables, views, functions) in the future, some object declaration methods in the Table API have been deprecated in favor of methods that are closer to standard SQL DDL ([FLIP-64](https://cwiki.apache.org/confluence/display/FLINK/FLIP-64%3A+Support+for+Temporary+Objects+in+Table+module)).

#### Full TPC-DS Coverage for Batch

TPC-DS is a widely used industry-standard decision support benchmark to evaluate and measure the performance of SQL-based data processing engines. In Flink 1.10, all TPC-DS queries are supported end-to-end ([FLINK-11491](https://issues.apache.org/jira/browse/FLINK-11491)), reflecting the readiness of its SQL engine to address the needs of modern data warehouse-like workloads.

### PyFlink: Support for Native User Defined Functions (UDFs)

A preview of PyFlink was introduced in the previous release, making headway towards the goal of full Python support in Flink. For this release, the focus was to enable users to register and use Python User-Defined Functions (UDF, with UDTF/UDAF planned) in the Table API/SQL ([FLIP-58](https://cwiki.apache.org/confluence/display/FLINK/FLIP-58%3A+Flink+Python+User-Defined+Stateless+Function+for+Table)).

&lt;span&gt;
	&lt;center&gt;
	&lt;img vspace=&quot;8&quot; hspace=&quot;100&quot; style=&quot;width:75%&quot; src=&quot;{{site.baseurl}}/img/blog/2020-02-11-release-1.10.0/flink_1.10_pyflink.gif&quot;/&gt;
	&lt;/center&gt;
&lt;/span&gt;

If you are interested in the underlying implementation — leveraging Apache Beam’s [Portability Framework](https://beam.apache.org/roadmap/portability/) — refer to the “Architecture” section of FLIP-58 and also to [FLIP-78](https://cwiki.apache.org/confluence/display/FLINK/FLIP-78%3A+Flink+Python+UDF+Environment+and+Dependency+Management). These data structures lay the required foundation for Pandas support and for PyFlink to eventually reach the DataStream API. 

From Flink 1.10, users can also easily install PyFlink through `pip` using:

```bash
pip install apache-flink
```

For a preview of other improvements planned for PyFlink, check [FLINK-14500](https://issues.apache.org/jira/browse/FLINK-14500) and get involved in the [discussion](http://apache-flink.147419.n8.nabble.com/Re-DISCUSS-What-parts-of-the-Python-API-should-we-focus-on-next-td1285.html) for requested user features.

## Important Changes

 * [[FLINK-10725](https://issues.apache.org/jira/browse/FLINK-10725)] Flink can now be compiled and run on Java 11.

 * [[FLINK-15495](https://jira.apache.org/jira/browse/FLINK-15495)] The Blink planner is now the default in the SQL Client, so that users can benefit from all the latest features and improvements. The switch from the old planner in the Table API is also planned for the next release, so we recommend that users start getting familiar with the Blink planner.

 * [[FLINK-13025](https://issues.apache.org/jira/browse/FLINK-13025)] There is a [new Elasticsearch sink connector](https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/connectors/elasticsearch.html#elasticsearch-connector), fully supporting Elasticsearch 7.x versions.

 * [[FLINK-15115](https://issues.apache.org/jira/browse/FLINK-15115)] The connectors for Kafka 0.8 and 0.9 have been marked as deprecated and will no longer be actively supported. If you are still using these versions or have any other related concerns, please reach out to the @dev mailing list.

 * [[FLINK-14516](https://issues.apache.org/jira/browse/FLINK-14516)] The non-credit-based network flow control code was removed, along with the configuration option `taskmanager.network.credit.model`. Moving forward, Flink will always use credit-based flow control.

 * [[FLINK-12122](https://issues.apache.org/jira/browse/FLINK-12122)] [FLIP-6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077) was rolled out with Flink 1.5.0 and introduced a code regression related to the way slots are allocated from `TaskManagers`. To use a scheduling strategy that is closer to the pre-FLIP behavior, where Flink tries to spread out the workload across all currently available `TaskManagers`, users can set `cluster.evenly-spread-out-slots: true` in the `flink-conf.yaml`.

 * [[FLINK-11956](https://issues.apache.org/jira/browse/FLINK-11956)] `s3-hadoop` and `s3-presto` filesystems no longer use class relocations and should be loaded through [plugins]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/ops/filesystems/#pluggable-file-systems), but now seamlessly integrate with all credential providers. Other filesystems are strongly recommended to be used only as plugins, as we will continue to remove relocations.

 * Flink 1.9 shipped with a refactored Web UI, with the legacy one being kept around as backup in case something wasn’t working as expected. No issues have been reported so far, so [the community voted](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/DISCUSS-Remove-old-WebUI-td35218.html) to drop the legacy Web UI in Flink 1.10.


## Release Notes

Please review the [release notes]({{ site.DOCS_BASE_URL }}flink-docs-release-1.10/release-notes/flink-1.10.html) carefully for a detailed list of changes and new features if you plan to upgrade your setup to Flink 1.10. This version is API-compatible with previous 1.x releases for APIs annotated with the @Public annotation.


## List of Contributors

The Apache Flink community would like to thank all contributors that have made this release possible:

Achyuth Samudrala, Aitozi, Alberto Romero, Alec.Ch, Aleksey Pak, Alexander Fedulov, Alice Yan, Aljoscha Krettek, Aloys, Andrey Zagrebin, Arvid Heise, Benchao Li, Benoit Hanotte, Benoît Paris, Bhagavan Das, Biao Liu, Chesnay Schepler, Congxian Qiu, Cyrille Chépélov, César Soto Valero, David Anderson, David Hrbacek, David Moravek, Dawid Wysakowicz, Dezhi Cai, Dian Fu, Dyana Rose, Eamon Taaffe, Fabian Hueske, Fawad Halim, Fokko Driesprong, Frey Gao, Gabor Gevay, Gao Yun, Gary Yao, GatsbyNewton, GitHub, Grebennikov Roman, GuoWei Ma, Gyula Fora, Haibo Sun, Hao Dang, Henvealf, Hongtao Zhang, HuangXingBo, Hwanju Kim, Igal Shilman, Jacob Sevart, Jark Wu, Jeff Martin, Jeff Yang, Jeff Zhang, Jiangjie (Becket) Qin, Jiayi, Jiayi Liao, Jincheng Sun, Jing Zhang, Jingsong Lee, JingsongLi, Joao Boto, John Lonergan, Kaibo Zhou, Konstantin Knauf, Kostas Kloudas, Kurt Young, Leonard Xu, Ling Wang, Lining Jing, Liupengcheng, LouisXu, Mads Chr. Olesen, Marco Zühlke, Marcos Klein, Matyas Orhidi, Maximilian Bode, Maximilian Michels, Nick Pavlakis, Nico Kruber, Nicolas Deslandes, Pablo Valtuille, Paul Lam, Paul Lin, PengFei Li, Piotr Nowojski, Piotr Przybylski, Piyush Narang, Ricco Chen, Richard Deurwaarder, Robert Metzger, Roman, Roman Grebennikov, Roman Khachatryan, Rong Rong, Rui Li, Ryan Tao, Scott Kidder, Seth Wiesman, Shannon Carey, Shaobin.Ou, Shuo Cheng, Stefan Richter, Stephan Ewen, Steve OU, Steven Wu, Terry Wang, Thesharing, Thomas Weise, Till Rohrmann, Timo Walther, Tony Wei, TsReaper, Tzu-Li (Gordon) Tai, Victor Wong, WangHengwei, Wei Zhong, WeiZhong94, Wind (Jiayi Liao), Xintong Song, XuQianJin-Stars, Xuefu Zhang, Xupingyong, Yadong Xie, Yang Wang, Yangze Guo, Yikun Jiang, Ying, YngwieWang, Yu Li, Yuan Mei, Yun Gao, Yun Tang, Zhanchun Zhang, Zhenghua Gao, Zhijiang, Zhu Zhu, a-suiniaev, azagrebin, beyond1920, biao.liub, blueszheng, bowen.li, caoyingjie, catkint, chendonglin, chenqi, chunpinghe, cyq89051127, danrtsey.wy, dengziming, dianfu, eskabetxe, fanrui, forideal, gentlewang, godfrey he, godfreyhe, haodang, hehuiyuan, hequn8128, hpeter, huangxingbo, huzheng, ifndef-SleePy, jiemotongxue, joe, jrthe42, kevin.cyj, klion26, lamber-ken, libenchao, liketic, lincoln-lil, lining, liuyongvs, liyafan82, lz, mans2singh, mojo, openinx, ouyangwulin, shining-huang, shuai-xu, shuo.cs, stayhsfLee, sunhaibotb, sunjincheng121, tianboxiu, tianchen, tianchen92, tison, tszkitlo40, unknown, vinoyang, vthinkxie, wangpeibin, wangxiaowei, wangxiyuan, wangxlong, wangyang0918, whlwanghailong, xuchao0903, xuyang1706, yanghua, yangjf2019, yongqiang chai, yuzhao.cyz, zentol, zhangzhanchum, zhengcanbin, zhijiang, zhongyong jin, zhuzhu.zz, zjuwangg, zoudaokoulife, 砚田, 谢磊, 张志豪, 曹建华
</description>
<pubDate>Tue, 11 Feb 2020 02:30:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/02/11/release-1.10.0.html</link>
<guid isPermaLink="true">/news/2020/02/11/release-1.10.0.html</guid>
</item>

<item>
<title>A Guide for Unit Testing in Apache Flink</title>
<description>Writing unit tests is one of the essential tasks of designing a production-grade application. Without tests, a single change in code can result in cascades of failure in production. Thus unit tests should be written for all types of applications, be it a simple job cleaning data and training a model or a complex multi-tenant, real-time data processing system. In the following sections, we provide a guide for unit testing of Apache Flink applications. 
Apache Flink provides a robust unit testing framework to make sure your applications behave in production as expected during development. You need to include the following dependencies to utilize the provided framework.

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-test-utils_${scala.binary.version}&lt;/artifactId&gt;
  &lt;version&gt;${flink.version}&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt; 
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-runtime_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.0&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
  &lt;classifier&gt;tests&lt;/classifier&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.0&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
  &lt;classifier&gt;tests&lt;/classifier&gt;
&lt;/dependency&gt;
```

The strategy of writing unit tests differs for various operators. You can break down the strategy into the following three buckets: 

* Stateless Operators
* Stateful Operators
* Timed Process Operators


# Stateless Operators

Writing unit tests for a stateless operator is a breeze. You need to follow the basic norm of writing a test case, i.e., create an instance of the function class and test the appropriate methods. Let’s take an example of a simple `Map` operator.

```java
public class MyStatelessMap implements MapFunction&lt;String, String&gt; {
  @Override
  public String map(String in) throws Exception {
    String out = &quot;hello &quot; + in;
    return out;
  }
}
```

The test case for the above operator should look like

```java
@Test
public void testMap() throws Exception {
  MyStatelessMap statelessMap = new MyStatelessMap();
  String out = statelessMap.map(&quot;world&quot;);
  Assert.assertEquals(&quot;hello world&quot;, out);
}
```

Pretty simple, right? Let’s take a look at one for the `FlatMap` operator.

```java
public class MyStatelessFlatMap implements FlatMapFunction&lt;String, String&gt; {
  @Override
  public void flatMap(String in, Collector&lt;String&gt; collector) throws Exception {
    String out = &quot;hello &quot; + in;
    collector.collect(out);
  }
}
```

`FlatMap` operators require a `Collector` object along with the input. For the test case, we have two options: 

1. Mock the `Collector` object using Mockito
2. Use the `ListCollector` provided by Flink

I prefer the second method as it requires fewer lines of code and is suitable for most of the cases.

```java
@Test
public void testFlatMap() throws Exception {
  MyStatelessFlatMap statelessFlatMap = new MyStatelessFlatMap();
  List&lt;String&gt; out = new ArrayList&lt;&gt;();
  ListCollector&lt;String&gt; listCollector = new ListCollector&lt;&gt;(out);
  statelessFlatMap.flatMap(&quot;world&quot;, listCollector);
  Assert.assertEquals(Lists.newArrayList(&quot;hello world&quot;), out);
}
```


# Stateful Operators

Writing test cases for stateful operators requires more effort. You need to check whether the operator state is updated correctly and if it is cleaned up properly along with the output of the operator.

Let’s take an example of stateful `FlatMap` function

```java
public class StatefulFlatMap extends RichFlatMapFunction&lt;String, String&gt; {
  ValueState&lt;String&gt; previousInput;

  @Override
  public void open(Configuration parameters) throws Exception {
    previousInput = getRuntimeContext().getState(
      new ValueStateDescriptor&lt;String&gt;(&quot;previousInput&quot;, Types.STRING));
  }

  @Override
  public void flatMap(String in, Collector&lt;String&gt; collector) throws Exception {
    String out = &quot;hello &quot; + in;
    if(previousInput.value() != null){
      out = out + &quot; &quot; + previousInput.value();
    }
    previousInput.update(in);
    collector.collect(out);
  }
}
```

The intricate part of writing tests for the above class is to mock the configuration as well as the runtime context of the application. Flink provides TestHarness classes so that users don’t have to create the mock objects themselves. Using the `KeyedOperatorHarness`, the test looks like:

```java
import org.apache.flink.streaming.api.operators.StreamFlatMap;
import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;
import org.apache.flink.streaming.util.KeyedOneInputStreamOperatorTestHarness;
import org.apache.flink.streaming.util.OneInputStreamOperatorTestHarness;

@Test
public void testFlatMap() throws Exception{
  StatefulFlatMap statefulFlatMap = new StatefulFlatMap();

  // OneInputStreamOperatorTestHarness takes the input and output types as type parameters     
  OneInputStreamOperatorTestHarness&lt;String, String&gt; testHarness = 
    // KeyedOneInputStreamOperatorTestHarness takes three arguments:
    //   Flink operator object, key selector and key type
    new KeyedOneInputStreamOperatorTestHarness&lt;&gt;(
      new StreamFlatMap&lt;&gt;(statefulFlatMap), x -&gt; &quot;1&quot;, Types.STRING);
  testHarness.open();

  // test first record
  testHarness.processElement(&quot;world&quot;, 10);
  ValueState&lt;String&gt; previousInput = 
    statefulFlatMap.getRuntimeContext().getState(
      new ValueStateDescriptor&lt;&gt;(&quot;previousInput&quot;, Types.STRING));
  String stateValue = previousInput.value();
  Assert.assertEquals(
    Lists.newArrayList(new StreamRecord&lt;&gt;(&quot;hello world&quot;, 10)), 
    testHarness.extractOutputStreamRecords());
  Assert.assertEquals(&quot;world&quot;, stateValue);

  // test second record
  testHarness.processElement(&quot;parallel&quot;, 20);
  Assert.assertEquals(
    Lists.newArrayList(
      new StreamRecord&lt;&gt;(&quot;hello world&quot;, 10), 
      new StreamRecord&lt;&gt;(&quot;hello parallel world&quot;, 20)), 
    testHarness.extractOutputStreamRecords());
  Assert.assertEquals(&quot;parallel&quot;, previousInput.value());
}
```

The test harness provides many helper methods, three of which are being used here:

1. `open`: calls the open of the `FlatMap` function with relevant parameters. It also initializes the context.
2. `processElement`: allows users to pass an input element as well as the timestamp associated with the element.
3. `extractOutputStreamRecords`: gets the output records along with their timestamps from the `Collector`.

The test harness simplifies the unit testing for the stateful functions to a large extent. 

You might also need to check whether the state value is being set correctly. You can get the state value directly from the operator using a mechanism similar to the one used while creating the state. This is also demonstrated in the previous example.


# Timed Process Operators

Writing tests for process functions, that work with time, is quite similar to writing tests for stateful functions because you can also use test harness.
However, you need to take care of another aspect, which is providing timestamps for events and controlling the current time of the application. By setting the current (processing or event) time, you can trigger registered timers, which will call the `onTimer` method of the function

```java
public class MyProcessFunction extends KeyedProcessFunction&lt;String, String, String&gt; {
  @Override
  public void processElement(String in, Context context, Collector&lt;String&gt; collector) throws Exception {
    context.timerService().registerProcessingTimeTimer(50);
    String out = &quot;hello &quot; + in;
    collector.collect(out);
  }

  @Override
  public void onTimer(long timestamp, OnTimerContext ctx, Collector&lt;String&gt; out) throws Exception {
    out.collect(String.format(&quot;Timer triggered at timestamp %d&quot;, timestamp));
  }
}
```

We need to test both the methods in the `KeyedProcessFunction`, i.e., `processElement` as well as `onTimer`. Using a test harness, we can control the current time of the function. Thus, we can trigger the timer at will rather than waiting for a specific time.

Let’s take a look at the test case

```java
@Test
public void testProcessElement() throws Exception{
  MyProcessFunction myProcessFunction = new MyProcessFunction();
  OneInputStreamOperatorTestHarness&lt;String, String&gt; testHarness = 
    new KeyedOneInputStreamOperatorTestHarness&lt;&gt;(
      new KeyedProcessOperator&lt;&gt;(myProcessFunction), x -&gt; &quot;1&quot;, Types.STRING);

  // Function time is initialized to 0
  testHarness.open();
  testHarness.processElement(&quot;world&quot;, 10);

  Assert.assertEquals(
    Lists.newArrayList(new StreamRecord&lt;&gt;(&quot;hello world&quot;, 10)), 
    testHarness.extractOutputStreamRecords());
}

@Test
public void testOnTimer() throws Exception {
  MyProcessFunction myProcessFunction = new MyProcessFunction();
  OneInputStreamOperatorTestHarness&lt;String, String&gt; testHarness = 
    new KeyedOneInputStreamOperatorTestHarness&lt;&gt;(
      new KeyedProcessOperator&lt;&gt;(myProcessFunction), x -&gt; &quot;1&quot;, Types.STRING);

  testHarness.open();
  testHarness.processElement(&quot;world&quot;, 10);
  Assert.assertEquals(1, testHarness.numProcessingTimeTimers());
      
  // Function time is set to 50
  testHarness.setProcessingTime(50);
  Assert.assertEquals(
    Lists.newArrayList(
      new StreamRecord&lt;&gt;(&quot;hello world&quot;, 10), 
      new StreamRecord&lt;&gt;(&quot;Timer triggered at timestamp 50&quot;)), 
    testHarness.extractOutputStreamRecords());
}
```

The mechanism to test the multi-input stream operators such as CoProcess functions is similar to the ones described in this article. You should use the TwoInput variant of the harness for these operators, such as `TwoInputStreamOperatorTestHarness`.

# Summary

In the previous sections we showcased how unit testing in Apache Flink works for stateless, stateful and times-aware-operators. We hope you found the steps easy to follow and execute while developing your Flink applications. If you have any questions or feedback you can reach out to me [here](https://www.kharekartik.dev/about/) or contact the community on the [Apache Flink user mailing list](https://flink.apache.org/community.html).
</description>
<pubDate>Fri, 07 Feb 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/02/07/a-guide-for-unit-testing-in-apache-flink.html</link>
<guid isPermaLink="true">/news/2020/02/07/a-guide-for-unit-testing-in-apache-flink.html</guid>
</item>

<item>
<title>Apache Flink 1.9.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.9 series.

This release includes 117 fixes and minor improvements for Flink 1.9.1. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.9.2.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.9.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12122&#39;&gt;FLINK-12122&lt;/a&gt;] -         Spread out tasks evenly across all available registered TaskManagers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13360&#39;&gt;FLINK-13360&lt;/a&gt;] -         Add documentation for HBase connector for Table API &amp;amp; SQL
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13361&#39;&gt;FLINK-13361&lt;/a&gt;] -         Add documentation for JDBC connector for Table API &amp;amp; SQL
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13723&#39;&gt;FLINK-13723&lt;/a&gt;] -         Use liquid-c for faster doc generation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13724&#39;&gt;FLINK-13724&lt;/a&gt;] -         Remove unnecessary whitespace from the docs&amp;#39; sidenav
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13725&#39;&gt;FLINK-13725&lt;/a&gt;] -         Use sassc for faster doc generation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13726&#39;&gt;FLINK-13726&lt;/a&gt;] -         Build docs with jekyll 4.0.0.pre.beta1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13791&#39;&gt;FLINK-13791&lt;/a&gt;] -         Speed up sidenav by using group_by
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13817&#39;&gt;FLINK-13817&lt;/a&gt;] -         Expose whether web submissions are enabled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13818&#39;&gt;FLINK-13818&lt;/a&gt;] -         Check whether web submission are enabled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14535&#39;&gt;FLINK-14535&lt;/a&gt;] -         Cast exception is thrown when count distinct on decimal fields
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14735&#39;&gt;FLINK-14735&lt;/a&gt;] -         Improve batch schedule check input consumable performance
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10377&#39;&gt;FLINK-10377&lt;/a&gt;] -         Remove precondition in TwoPhaseCommitSinkFunction.notifyCheckpointComplete
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10435&#39;&gt;FLINK-10435&lt;/a&gt;] -         Client sporadically hangs after Ctrl + C
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11120&#39;&gt;FLINK-11120&lt;/a&gt;] -         TIMESTAMPADD function handles TIME incorrectly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11835&#39;&gt;FLINK-11835&lt;/a&gt;] -         ZooKeeperLeaderElectionITCase.testJobExecutionOnClusterWithLeaderChange failed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12342&#39;&gt;FLINK-12342&lt;/a&gt;] -         Yarn Resource Manager Acquires Too Many Containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12399&#39;&gt;FLINK-12399&lt;/a&gt;] -         FilterableTableSource does not use filters on job run
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13184&#39;&gt;FLINK-13184&lt;/a&gt;] -         Starting a TaskExecutor blocks the YarnResourceManager&amp;#39;s main thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13589&#39;&gt;FLINK-13589&lt;/a&gt;] -         DelimitedInputFormat index error on multi-byte delimiters with whole file input splits
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13702&#39;&gt;FLINK-13702&lt;/a&gt;] -         BaseMapSerializerTest.testDuplicate fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13708&#39;&gt;FLINK-13708&lt;/a&gt;] -         Transformations should be cleared because a table environment could execute multiple job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13740&#39;&gt;FLINK-13740&lt;/a&gt;] -         TableAggregateITCase.testNonkeyedFlatAggregate failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13749&#39;&gt;FLINK-13749&lt;/a&gt;] -         Make Flink client respect classloading policy
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13758&#39;&gt;FLINK-13758&lt;/a&gt;] -         Failed to submit JobGraph when registered hdfs file in DistributedCache 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13799&#39;&gt;FLINK-13799&lt;/a&gt;] -         Web Job Submit Page displays stream of error message when web submit is disables in the config
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13827&#39;&gt;FLINK-13827&lt;/a&gt;] -         Shell variable should be escaped in start-scala-shell.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13862&#39;&gt;FLINK-13862&lt;/a&gt;] -         Update Execution Plan docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13945&#39;&gt;FLINK-13945&lt;/a&gt;] -         Instructions for building flink-shaded against vendor repository don&amp;#39;t work
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13969&#39;&gt;FLINK-13969&lt;/a&gt;] -         Resuming Externalized Checkpoint (rocks, incremental, scale down) end-to-end test fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13995&#39;&gt;FLINK-13995&lt;/a&gt;] -         Fix shading of the licence information of netty
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13999&#39;&gt;FLINK-13999&lt;/a&gt;] -         Correct the documentation of MATCH_RECOGNIZE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14066&#39;&gt;FLINK-14066&lt;/a&gt;] -         Pyflink building failure in master and 1.9.0 version
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14074&#39;&gt;FLINK-14074&lt;/a&gt;] -         MesosResourceManager can&amp;#39;t create new taskmanagers in Session Cluster Mode.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14175&#39;&gt;FLINK-14175&lt;/a&gt;] -         Upgrade KPL version in flink-connector-kinesis to fix application OOM
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14200&#39;&gt;FLINK-14200&lt;/a&gt;] -         Temporal Table Function Joins do not work on Tables (only TableSources) on the query side
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14235&#39;&gt;FLINK-14235&lt;/a&gt;] -         Kafka010ProducerITCase&amp;gt;KafkaProducerTestBase.testOneToOneAtLeastOnceCustomOperator fails on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14315&#39;&gt;FLINK-14315&lt;/a&gt;] -         NPE with JobMaster.disconnectTaskManager
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14337&#39;&gt;FLINK-14337&lt;/a&gt;] -         HistoryServer does not handle NPE on corruped archives properly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14347&#39;&gt;FLINK-14347&lt;/a&gt;] -         YARNSessionFIFOITCase.checkForProhibitedLogContents found a log with prohibited string
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14355&#39;&gt;FLINK-14355&lt;/a&gt;] -         Example code in state processor API docs doesn&amp;#39;t compile
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14370&#39;&gt;FLINK-14370&lt;/a&gt;] -         KafkaProducerAtLeastOnceITCase&amp;gt;KafkaProducerTestBase.testOneToOneAtLeastOnceRegularSink fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14382&#39;&gt;FLINK-14382&lt;/a&gt;] -         Incorrect handling of FLINK_PLUGINS_DIR on Yarn
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14398&#39;&gt;FLINK-14398&lt;/a&gt;] -         Further split input unboxing code into separate methods
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14413&#39;&gt;FLINK-14413&lt;/a&gt;] -         Shade-plugin ApacheNoticeResourceTransformer uses platform-dependent encoding
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14434&#39;&gt;FLINK-14434&lt;/a&gt;] -         Dispatcher#createJobManagerRunner should not start JobManagerRunner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14445&#39;&gt;FLINK-14445&lt;/a&gt;] -         Python module build failed when making sdist
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14447&#39;&gt;FLINK-14447&lt;/a&gt;] -         Network metrics doc table render confusion
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14459&#39;&gt;FLINK-14459&lt;/a&gt;] -         Python module build hangs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14524&#39;&gt;FLINK-14524&lt;/a&gt;] -         PostgreSQL JDBC sink generates invalid SQL in upsert mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14547&#39;&gt;FLINK-14547&lt;/a&gt;] -         UDF cannot be in the join condition in blink planner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14561&#39;&gt;FLINK-14561&lt;/a&gt;] -         Don&amp;#39;t write FLINK_PLUGINS_DIR ENV variable to Flink configuration
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14562&#39;&gt;FLINK-14562&lt;/a&gt;] -         RMQSource leaves idle consumer after closing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14574&#39;&gt;FLINK-14574&lt;/a&gt;] -          flink-s3-fs-hadoop doesn&amp;#39;t work with plugins mechanism
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14589&#39;&gt;FLINK-14589&lt;/a&gt;] -         Redundant slot requests with the same AllocationID leads to inconsistent slot table
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14641&#39;&gt;FLINK-14641&lt;/a&gt;] -         Fix description of metric `fullRestarts`
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14673&#39;&gt;FLINK-14673&lt;/a&gt;] -         Shouldn&amp;#39;t expect HMS client to throw NoSuchObjectException for non-existing function
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14683&#39;&gt;FLINK-14683&lt;/a&gt;] -         RemoteStreamEnvironment&amp;#39;s construction function has a wrong method
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14701&#39;&gt;FLINK-14701&lt;/a&gt;] -         Slot leaks if SharedSlotOversubscribedException happens
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14784&#39;&gt;FLINK-14784&lt;/a&gt;] -         CsvTableSink miss delimiter when row start with null member
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14817&#39;&gt;FLINK-14817&lt;/a&gt;] -         &amp;quot;Streaming Aggregation&amp;quot; document contains misleading code examples
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14846&#39;&gt;FLINK-14846&lt;/a&gt;] -         Correct the default writerbuffer size documentation of RocksDB
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14910&#39;&gt;FLINK-14910&lt;/a&gt;] -         DisableAutoGeneratedUIDs fails on keyBy
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14930&#39;&gt;FLINK-14930&lt;/a&gt;] -         OSS Filesystem Uses Wrong Shading Prefix
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14949&#39;&gt;FLINK-14949&lt;/a&gt;] -         Task cancellation can be stuck against out-of-thread error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14951&#39;&gt;FLINK-14951&lt;/a&gt;] -         State TTL backend end-to-end test fail when taskManager has multiple slot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14953&#39;&gt;FLINK-14953&lt;/a&gt;] -         Parquet table source should use schema type to build FilterPredicate
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14960&#39;&gt;FLINK-14960&lt;/a&gt;] -         Dependency shading of table modules test fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14976&#39;&gt;FLINK-14976&lt;/a&gt;] -         Cassandra Connector leaks Semaphore on Throwable; hangs on close
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15001&#39;&gt;FLINK-15001&lt;/a&gt;] -         The digest of sub-plan reuse should contain retraction traits for stream physical nodes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15013&#39;&gt;FLINK-15013&lt;/a&gt;] -         Flink (on YARN) sometimes needs too many slots
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15030&#39;&gt;FLINK-15030&lt;/a&gt;] -         Potential deadlock for bounded blocking ResultPartition.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15036&#39;&gt;FLINK-15036&lt;/a&gt;] -         Container startup error will be handled out side of the YarnResourceManager&amp;#39;s main thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15063&#39;&gt;FLINK-15063&lt;/a&gt;] -         Input group and output group of the task metric are reversed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15065&#39;&gt;FLINK-15065&lt;/a&gt;] -         RocksDB configurable options doc description error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15076&#39;&gt;FLINK-15076&lt;/a&gt;] -         Source thread should be interrupted during the Task cancellation 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15234&#39;&gt;FLINK-15234&lt;/a&gt;] -         Hive table created from flink catalog table shouldn&amp;#39;t have null properties in parameters
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15240&#39;&gt;FLINK-15240&lt;/a&gt;] -         is_generic key is missing for Flink table stored in HiveCatalog
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15259&#39;&gt;FLINK-15259&lt;/a&gt;] -         HiveInspector.toInspectors() should convert Flink constant to Hive constant 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15266&#39;&gt;FLINK-15266&lt;/a&gt;] -         NPE in blink planner code gen
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15361&#39;&gt;FLINK-15361&lt;/a&gt;] -         ParquetTableSource should pass predicate in projectFields
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15412&#39;&gt;FLINK-15412&lt;/a&gt;] -         LocalExecutorITCase#testParameterizedTypes failed in travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15413&#39;&gt;FLINK-15413&lt;/a&gt;] -         ScalarOperatorsTest failed in travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15418&#39;&gt;FLINK-15418&lt;/a&gt;] -         StreamExecMatchRule not set FlinkRelDistribution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15421&#39;&gt;FLINK-15421&lt;/a&gt;] -         GroupAggsHandler throws java.time.LocalDateTime cannot be cast to java.sql.Timestamp
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15435&#39;&gt;FLINK-15435&lt;/a&gt;] -         ExecutionConfigTests.test_equals_and_hash in pyFlink fails when cpu core numbers is 6
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15443&#39;&gt;FLINK-15443&lt;/a&gt;] -         Use JDBC connector write FLOAT value occur ClassCastException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15478&#39;&gt;FLINK-15478&lt;/a&gt;] -         FROM_BASE64 code gen type wrong
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15489&#39;&gt;FLINK-15489&lt;/a&gt;] -         WebUI log refresh not working
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15522&#39;&gt;FLINK-15522&lt;/a&gt;] -         Misleading root cause exception when cancelling the job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15523&#39;&gt;FLINK-15523&lt;/a&gt;] -         ConfigConstants generally excluded from japicmp
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15543&#39;&gt;FLINK-15543&lt;/a&gt;] -         Apache Camel not bundled but listed in flink-dist NOTICE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15549&#39;&gt;FLINK-15549&lt;/a&gt;] -         Integer overflow in SpillingResettableMutableObjectIterator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15577&#39;&gt;FLINK-15577&lt;/a&gt;] -         WindowAggregate RelNodes missing Window specs in digest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15615&#39;&gt;FLINK-15615&lt;/a&gt;] -         Docs: wrong guarantees stated for the file sink
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11135&#39;&gt;FLINK-11135&lt;/a&gt;] -         Reorder Hadoop config loading in HadoopUtils
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12848&#39;&gt;FLINK-12848&lt;/a&gt;] -         Method equals() in RowTypeInfo should consider fieldsNames
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13729&#39;&gt;FLINK-13729&lt;/a&gt;] -         Update website generation dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14008&#39;&gt;FLINK-14008&lt;/a&gt;] -         Auto-generate binary licensing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14104&#39;&gt;FLINK-14104&lt;/a&gt;] -         Bump Jackson to 2.10.1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14123&#39;&gt;FLINK-14123&lt;/a&gt;] -         Lower the default value of taskmanager.memory.fraction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14206&#39;&gt;FLINK-14206&lt;/a&gt;] -         Let fullRestart metric count fine grained restarts as well
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14215&#39;&gt;FLINK-14215&lt;/a&gt;] -         Add Docs for TM and JM Environment Variable Setting
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14251&#39;&gt;FLINK-14251&lt;/a&gt;] -         Add FutureUtils#forward utility
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14334&#39;&gt;FLINK-14334&lt;/a&gt;] -         ElasticSearch docs refer to non-existent ExceptionUtils.containsThrowable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14335&#39;&gt;FLINK-14335&lt;/a&gt;] -         ExampleIntegrationTest in testing docs is incorrect
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14408&#39;&gt;FLINK-14408&lt;/a&gt;] -         In OldPlanner, UDF open method can not be invoke when SQL is optimized
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14557&#39;&gt;FLINK-14557&lt;/a&gt;] -         Clean up the package of py4j
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14639&#39;&gt;FLINK-14639&lt;/a&gt;] -         Metrics User Scope docs refer to wrong class
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14646&#39;&gt;FLINK-14646&lt;/a&gt;] -         Check non-null for key in KeyGroupStreamPartitioner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14825&#39;&gt;FLINK-14825&lt;/a&gt;] -         Rework state processor api documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14995&#39;&gt;FLINK-14995&lt;/a&gt;] -         Kinesis NOTICE is incorrect
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15113&#39;&gt;FLINK-15113&lt;/a&gt;] -         fs.azure.account.key not hidden from global configuration
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15554&#39;&gt;FLINK-15554&lt;/a&gt;] -         Bump jetty-util-ajax to 9.3.24
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15657&#39;&gt;FLINK-15657&lt;/a&gt;] -         Fix the python table api doc link in Python API tutorial
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15700&#39;&gt;FLINK-15700&lt;/a&gt;] -         Improve Python API Tutorial doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15726&#39;&gt;FLINK-15726&lt;/a&gt;] -         Fixing error message in StreamExecTableSourceScan
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 30 Jan 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/01/30/release-1.9.2.html</link>
<guid isPermaLink="true">/news/2020/01/30/release-1.9.2.html</guid>
</item>

<item>
<title>State Unlocked: Interacting with State in Apache Flink</title>
<description># Introduction

With stateful stream-processing becoming the norm for complex event-driven applications and real-time analytics, [Apache Flink](https://flink.apache.org/) is often the backbone for running business logic and managing an organization’s most valuable asset — its data — as application state in Flink. 

In order to provide a state-of-the-art experience to Flink developers, the Apache Flink community makes significant efforts to provide the safety and future-proof guarantees organizations need while managing state in Flink. In particular, Flink developers should have sufficient means to access and modify their state, as well as making bootstrapping state with existing data from external systems a piece-of-cake. These efforts span multiple Flink major releases and consist of the following:

1. Evolvable state schema in Apache Flink
2. Flexibility in swapping state backends, and
3. The State processor API, an offline tool to read, write and modify state in Flink

This post discusses the community’s efforts related to state management in Flink, provides some practical examples of how the different features and APIs can be utilized and covers some future ideas for new and improved ways of managing state in Apache Flink.


# Stream processing: What is State?

To set the tone for the remaining of the post, let us first try to explain the very definition of state in stream processing. When it comes to stateful stream processing, state comprises of the information that an application or stream processing engine will remember across events and streams as more realtime (unbounded) and/or offline (bounded) data flow through the system. Most trivial applications are inherently stateful; even the example of a simple COUNT operation, whereby when counting up to 10, you essentially need to remember that you have already counted up to 9.

To better understand how Flink manages state, one can think of Flink like a three-layered state abstraction, as illustrated in the diagram below. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-01-29-state-unlocked-interacting-with-state-in-apache-flink/managing-state-in-flink-visual-1.png&quot; width=&quot;600px&quot; alt=&quot;State in Apache Flink&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

On the top layer, sits the Flink user code, for example, a `KeyedProcessFunction` that contains some value state. This is a simple variable whose value state annotations makes it automatically fault-tolerant, re-scalable and queryable by the runtime. These variables are backed by the configured state backend that sits either on-heap or on-disk (RocksDB State Backend) and provides data locality, proximity to the computation and speed when it comes to per-record computations. Finally, when it comes to upgrades, the introduction of new features or bug fixes, and in order to keep your existing state intact, this is where savepoints come in. 

A savepoint is a snapshot of the distributed, global state of an application at a logical point-in-time and is stored in an external distributed file system or blob storage such as HDFS, or S3. Upon upgrading an application or implementing a code change  — such as adding a new operator or changing a field — the Flink job can restart by re-loading the application state from the savepoint into the state backend, making it local and available for the computation and continue processing as if nothing had ever happened.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-01-29-state-unlocked-interacting-with-state-in-apache-flink/managing-state-in-flink-visual-2.png&quot; width=&quot;600px&quot; alt=&quot;State in Apache Flink&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
 It is important to remember here that &lt;b&gt;state is one of the most valuable components of a Flink application&lt;/b&gt; carrying all the information about both where you are now and where you are going. State is among the most long-lived components in a Flink service since it can be carried across jobs, operators, configurations, new features and bug fixes.
&lt;/div&gt;

# Schema Evolution with Apache Flink

In the previous section, we explained how state is stored and persisted in a Flink application. Let’s now take a look at what happens when evolving state in a stateful Flink streaming application becomes necessary. 

Imagine an Apache Flink application that implements a `KeyedProcessFunction` and contains some `ValueState`. As illustrated below, within the state descriptor, when registering the type, Flink users specify their `TypeInformation` that informs Flink about how to serialize the bytes and represents Flink’s internal type system, used to serialize data when shipped across the network or stored in state backends. Flink’s type system has built-in support for all the basic types such as longs, strings, doubles, arrays and basic collection types like lists and maps. Additionally, Flink supports most of the major composite types including Tuples, POJOs,  Scala Case Classes and Apache Avro&lt;sup&gt;Ⓡ&lt;/sup&gt;. Finally, if an application’s type does not match any of the above, developers can either plug in their own serializer or Flink will then fall back to Kryo.

## State registration with built-in serialization in Apache Flink

```java
public class MyFunction extends KeyedProcessFunction&lt;Key, Input, Output&gt; {
​
  private transient ValueState&lt;MyState&gt; valueState;
​
  public void open(Configuration parameters) {
    ValueStateDescriptor&lt;MyState&gt; descriptor =
      new ValueStateDescriptor&lt;&gt;(&quot;my-state&quot;, TypeInformation.of(MyState.class));
​
    valueState = getRuntimeContext().getState(descriptor);
  }
}
```

Typically, evolving the schema of an application’s state happens because of some business logic change (adding or dropping fields or changing data types). In all cases, the schema is determined by means of its serializer, and can be thought of in terms of an alter table statement when compared with a database. When a state variable is first introduced it is like running a `CREATE_TABLE` command, there is a lot of freedom with its execution. However, having data in that table (registered rows) limits developers in what they can do and what rules they follow in order to make updates or changes by an `ALTER_TABLE` statement. Schema migration in Apache Flink follows a similar principle since the framework is essentially running an `ALTER_TABLE` statement across savepoints.

[Flink 1.8](https://flink.apache.org/downloads.html#apache-flink-182) comes with built-in support for [Apache Avro](https://avro.apache.org/) (specifically the [1.7.7 specification](https://avro.apache.org/docs/1.7.7/spec.html)) and evolves state schema according to Avro specifications by adding and removing types or even by swapping between generic and specific Avro record types.

In [Flink 1.9](https://flink.apache.org/downloads.html#apache-flink-191) the community added support for schema evolution for POJOs, including the ability to remove existing fields from POJO types or add new fields. The POJO schema evolution tends to be less flexible — when compared to Avro — since it is not possible to change neither the declared field types nor the class name of a POJO type, including its namespace. 

With the community’s efforts related to schema evolution, Flink developers can now expect out-of-the-box support for both Avro and POJO formats, with backwards compatibility for all Flink state backends. Future work revolves around adding support for Scala Case Classes, Tuples and other formats. Make sure to subscribe to the [Flink mailing list](https://flink.apache.org/community.html) to contribute and stay on top of any upcoming additions in this space.

## Peeking Under the Hood

Now that we have explained how schema evolution in Flink works, let’s describe the challenges of performing schema serialization with Flink under the hood. Flink considers state as a core part of its API stability, in a way that developers should always be able to take a savepoint from one version of Flink and restart it on the next. With schema evolution, every migration needs to be backwards compatible and also compatible with the different state backends. While in the Flink code the state backends are represented as interfaces detailing how to store and retrieve bytes, in practice, they behave vastly differently, something that adds extra complexity to how schema evolution is executed in Flink. 

For instance, the heap state backend supports lazy serialization and eager deserialization, making the per-record code path always working with Java objects, serializing on a background thread.  When restoring, Flink will eagerly deserialize all the data and then start the user code. If a developer plugs in a new serializer, the deserialization happens before Flink ever receives the information. 

The RocksDB state backend behaves in the exact opposite manner: it supports eager serialization — because of items being stored on disk and RocksDB only consuming byte arrays. RocksDB provides lazy deserialization simply by downloading files to the local disk, making Flink unaware of what the bytes mean until a serializer is registered.  

An additional challenge stems from the fact that different versions of user code contain different classes on their classpath making the serializer used to write into a savepoint likely potentially unavailable at runtime.

To overcome the previously mentioned challenges, we introduced what we call `TypeSerializerSnapshot`. The `TypeSerializerSnapshot` stores the configuration of the writer serializer in the snapshot. When restoring it will use that configuration to read back the previous state and check its compatibility with the current version. Using such operation allows Flink to:

* Read the configuration used to write out a snapshot
* Consume the new user code 
* Check if both items above are compatible 
* Consume the bytes from the snapshot and move forward or alert the user otherwise

```java
public interface TypeSerializerSnapshot&lt;T&gt; {
​
  int getCurrentVersion();
​
  void writeSnapshot(DataOutputView out) throws IOException;
​
  void readSnapshot(
      int readVersion,
      DataInputView in,
      ClassLoader userCodeClassLoader) throws IOException;
​
  TypeSerializer&lt;T&gt; restoreSerializer();
​
  TypeSerializerSchemaCompatibility&lt;T&gt; resolveSchemaCompatibility(
      TypeSerializer&lt;T&gt; newSerializer);
}
```

## Implementing Apache Avro Serialization in Flink

Apache Avro is a data serialization format that has very well-defined schema migration semantics and supports both reader and writer schemas. During normal Flink execution the reader and writer schemas will be the same. However, when upgrading an application they may be different and with schema evolution, Flink will be able to migrate objects with their schemas.

```java
public class AvroSerializerSnapshot&lt;T&gt; implements TypeSerializerSnapshot&lt;T&gt; {
  private Schema runtimeSchema;
  private Schema previousSchema;
​
  @SuppressWarnings(&quot;WeakerAccess&quot;)
  public AvroSerializerSnapshot() { }
​
  AvroSerializerSnapshot(Schema schema) {
    this.runtimeSchema = schema;
  }
```

This is a sketch of our Avro serializer. It uses the provided schemas and delegates to Apache Avro for all (de)-serialization. Let’s take a look at one possible implementation of a `TypeSerializerSnapshot` that supports schema migration for Avro. 


# Writing out the snapshot

When serializing out the snapshot, the snapshot configuration will write two pieces of information; the current snapshot configuration version and the serializer configuration.

```java
  @Override
  public int getCurrentVersion() {
    return 1;
  }
​
  @Override
  public void writeSnapshot(DataOutputView out) throws IOException {
    out.writeUTF(runtimeSchema.toString(false));
  }
```

The version is used to version the snapshot configuration object itself while the `writeSnapshot` method writes out all the information we need to understand the current format; the runtime schema.

```java
  @Override
  public void readSnapshot(
      int readVersion,
      DataInputView in,
      ClassLoader userCodeClassLoader) throws IOException {

    assert readVersion == 1;
    final String previousSchemaDefinition = in.readUTF();
    this.previousSchema = parseAvroSchema(previousSchemaDefinition);
    this.runtimeType = findClassOrFallbackToGeneric(
      userCodeClassLoader,
      previousSchema.getFullName());
​
    this.runtimeSchema = tryExtractAvroSchema(userCodeClassLoader, runtimeType);
  }
```
Now when Flink restores it is able to read back in the writer schema used to serialize the data. The current runtime schema is discovered on the class path using some Java reflection magic.

Once we have both of these we can compare them for compatibility. Perhaps nothing has changed and the schemas are compatible as is.

```java
  @Override
  public TypeSerializerSchemaCompatibility&lt;T&gt; resolveSchemaCompatibility(
      TypeSerializer&lt;T&gt; newSerializer) {
​
    if (!(newSerializer instanceof AvroSerializer)) {
      return TypeSerializerSchemaCompatibility.incompatible();
    }
​
    if (Objects.equals(previousSchema, runtimeSchema)) {
      return TypeSerializerSchemaCompatibility.compatibleAsIs();
    }
```

Otherwise, the schemas are compared using Avro’s compatibility checks and they may either be compatible with a migration or incompatible.

```java
  final SchemaPairCompatibility compatibility = SchemaCompatibility
    .checkReaderWriterCompatibility(previousSchema, runtimeSchema);
​
    return avroCompatibilityToFlinkCompatibility(compatibility);
  }
```

If they are compatible with migration then Flink will restore a new serializer that can read the old schema and deserialize into the new runtime type which is in effect a migration.

```java
  @Override
  public TypeSerializer&lt;T&gt; restoreSerializer() {
    if (previousSchema != null) {
      return new AvroSerializer&lt;&gt;(runtimeType, runtimeSchema, previousSchema);
    } else {
      return new AvroSerializer&lt;&gt;(runtimeType, runtimeSchema, runtimeSchema);
    }
  }
}
```

# The State Processor API: Reading, writing and modifying Flink state

The State Processor API allows reading from and writing to Flink savepoints. Some of the interesting use cases it can be used for are:

* Analyzing state for interesting patterns
* Troubleshooting or auditing jobs by checking for state discrepancies
* Bootstrapping state for new applications
* Modifying savepoints such as:
  * Changing the maximum parallelism of a savepoint after deploying a Flink job
  * Introducing breaking schema updates to a Flink application 
  * Correcting invalid state in a Flink savepoint

In a [previous blog post](https://flink.apache.org/feature/2019/09/13/state-processor-api.html), we discussed the State Processor API in detail, the community’s motivation behind introducing the feature in Flink 1.9, what you can use the API for and how you can use it. Essentially, the State Processor API is based around a relational model of mapping your Flink job state to a database, as illustrated in the diagram below. We encourage you to [read the previous story](https://flink.apache.org/feature/2019/09/13/state-processor-api.html) for more information on the API and how to use it. In a follow up post, we will provide detailed tutorials on:

* Reading Keyed and Operator State with the State Processor API and 
* Writing and Bootstrapping Keyed and Operator State with the State Processor API

Stay tuned for more details and guidance around this feature of Flink.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-01-29-state-unlocked-interacting-with-state-in-apache-flink/managing-state-in-flink-state-processor-api-visual-1.png&quot; width=&quot;600px&quot; alt=&quot;State Processor API in Apache Flink&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2020-01-29-state-unlocked-interacting-with-state-in-apache-flink/managing-state-in-flink-state-processor-api-visual-2.png&quot; width=&quot;600px&quot; alt=&quot;State Processor API in Apache Flink&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

# Looking ahead: More ways to interact with State in Flink

There is a lot of discussion happening in the community related to extending the way Flink developers interact with state in their Flink applications. Regarding the State Processor API, some thoughts revolve around further broadening the API’s scope beyond its current ability to read from and write to both keyed and operator state. In upcoming releases, the State processor API will be extended to support both reading from and writing to windows and have a first-class integration with Flink’s Table API and SQL.

Beyond widening the scope of the State Processor API, the Flink community is discussing a few additional ways to improve the way developers interact with state in Flink. One of them is the proposal for a Unified Savepoint Format ([FLIP-41](https://cwiki.apache.org/confluence/display/FLINK/FLIP-41%3A+Unify+Binary+format+for+Keyed+State)) for all keyed state backends. Such improvement aims at introducing a unified binary format across all savepoints in all keyed state backends, something that drastically reduces the overhead of swapping the state backend in a Flink application. Such an improvement would allow developers to take a savepoint in their application and restart it in a different state backend — for example, moving it from the heap to disk (RocksDB state backend) and back — depending on the scalability and evolution of the application at different points-in-time. 

The community is also discussing the ability to have upgradability dry runs in upcoming Flink releases. Having such functionality in Flink allows developers to detect incompatible updates offline without the need of starting a new Flink job from scratch. For example, Flink users will be able to uncover topology or schema incompatibilities upon upgrading a Flink job, without having to load the state back to a running Flink job in the first place. Additionally, with upgradability dry runs Flink users will be able to get information about the registered state through the streaming graph, without needing to access the state in the state backend. 

With all  the exciting new functionality added in Flink 1.9 as well as some solid ideas and discussions around bringing state in Flink to the next level, the community is committed to making state in Apache Flink a fundamental element of the framework, something that is ever-present across versions and upgrades of your application and a component that is a true first-class citizen in Apache Flink. We encourage you to sign up to the [mailing list](https://flink.apache.org/community.html) and stay on top of the announcements and new features in upcoming releases. 
</description>
<pubDate>Wed, 29 Jan 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/01/29/state-unlocked-interacting-with-state-in-apache-flink.html</link>
<guid isPermaLink="true">/news/2020/01/29/state-unlocked-interacting-with-state-in-apache-flink.html</guid>
</item>

<item>
<title>Advanced Flink Application Patterns Vol.1: Case Study of a Fraud Detection System</title>
<description>In this series of blog posts you will learn about three powerful Flink patterns for building streaming applications:

 - Dynamic updates of application logic
 - Dynamic data partitioning (shuffle), controlled at runtime
 - Low latency alerting based on custom windowing logic (without using the window API)

These patterns expand the possibilities of what is achievable with statically defined data flows and provide the building blocks to fulfill complex business requirements.

**Dynamic updates of application logic** allow Flink jobs to change at runtime, without downtime from stopping and resubmitting the code.  
&lt;br&gt;
**Dynamic data partitioning** provides the ability to change how events are distributed and grouped by Flink at runtime. Such functionality often becomes a natural requirement when building jobs with dynamically reconfigurable application logic.  
&lt;br&gt;
**Custom window management** demonstrates how you can utilize the low level [process function API](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/process_function.html), when the native [window API](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/windows.html) is not exactly matching your requirements. Specifically, you will learn how to implement low latency alerting on windows and how to limit state growth with timers.    

These patterns build on top of core Flink functionality, however, they might not be immediately apparent from the framework&#39;s documentation as explaining and presenting the motivation behind them is not always trivial without a concrete use case. That is why we will showcase these patterns with a practical example that offers a real-world usage scenario for Apache Flink — a _Fraud Detection_ engine.
We hope that this series will place these powerful approaches into your tool belt and enable you to take on new and exciting tasks.

In the first blog post of the series we will look at the high-level architecture of the demo application, describe its components and their interactions. We will then deep dive into the implementation details of the first pattern in the series - **dynamic data partitioning**.


You will be able to run the full Fraud Detection Demo application locally and look into the details of the implementation by using the accompanying GitHub repository.

### Fraud Detection Demo

The full source code for our fraud detection demo is open source and available online. To run it locally, check out the following repository and follow the steps in the README:

[https://github.com/afedulov/fraud-detection-demo](https://github.com/afedulov/fraud-detection-demo)

You will see the demo is a self-contained application - it only requires `docker` and `docker-compose` to be built from sources and includes the following components:

 - Apache Kafka (message broker) with ZooKeeper
 - Apache Flink ([application cluster](https://ci.apache.org/projects/flink/flink-docs-stable/concepts/glossary.html#flink-application-cluster))
 - Fraud Detection Web App

The high-level goal of the Fraud Detection engine is to consume a stream of financial transactions and evaluate them against a set of rules. These rules are subject to frequent changes and tweaks. In a real production system, it is important to be able to add and remove them at runtime, without incurring an expensive penalty of stopping and restarting the job.

When you navigate to the demo URL in your browser, you will be presented with the following UI:

 &lt;center&gt;
 &lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-11-19-demo-fraud-detection/ui.png&quot; width=&quot;800px&quot; alt=&quot;Figure 1: Demo UI&quot;/&gt;
 &lt;br/&gt;
 &lt;i&gt;&lt;small&gt;Figure 1: Fraud Detection Demo UI&lt;/small&gt;&lt;/i&gt;
 &lt;/center&gt;
 &lt;br/&gt;

On the left side, you can see a visual representation of financial transactions flowing through the system after you click the &quot;Start&quot; button. The slider at the top allows you to control the number of generated transactions per second. The middle section is devoted to managing the rules evaluated by Flink. From here, you can create new rules as well as issue control commands, such as clearing Flink&#39;s state.

The demo out-of-the-box comes with a set of predefined sample rules. You can click the _Start_ button and, after some time, will observe alerts displayed in the right section of the UI. These alerts are the result of Flink evaluating the generated transactions stream against the predefined rules.

 Our sample fraud detection system consists of three main components:

  1. Frontend (React)  
  1. Backend (SpringBoot)  
  1. Fraud Detection application (Apache Flink)  

Interactions between the main elements are depicted in _Figure 2_.

 &lt;center&gt;
 &lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-11-19-demo-fraud-detection/architecture.png&quot; width=&quot;800px&quot; alt=&quot;Figure 2: Demo Components&quot;/&gt;
 &lt;br/&gt;
 &lt;i&gt;&lt;small&gt;Figure 2: Fraud Detection Demo Components&lt;/small&gt;&lt;/i&gt;
 &lt;/center&gt;
 &lt;br/&gt;

 The Backend exposes a REST API to the Frontend for creating/deleting rules as well as issuing control commands for managing the demo execution. It then relays those Frontend actions to Flink by sending them via a &quot;Control&quot; Kafka topic. The Backend additionally includes a _Transactions Generator_ component, which sends an emulated stream of money transfer events to Flink via a separate &quot;Transactions&quot; topic. Alerts generated by Flink are consumed by the Backend from &quot;Alerts&quot; topic and relayed to the UI via WebSockets.

Now that you are familiar with the overall layout and the goal of our Fraud Detection engine, let&#39;s now go into the details of what is required to implement such a system.

### Dynamic Data Partitioning

The first pattern we will look into is Dynamic Data Partitioning.

If you have used Flink&#39;s DataStream API in the past, you are undoubtedly familiar with the **keyBy** method. Keying a stream shuffles all the records such that elements with the same key are assigned to the same partition. This means all records with the same key are processed by the same physical instance of the next operator.

In a typical streaming application, the choice of key is fixed, determined by some static field within the elements. For instance, when building a simple window-based aggregation of a stream of transactions, we might always group by the transactions account id.

```java
DataStream&lt;Transaction&gt; input = // [...]
DataStream&lt;...&gt; windowed = input
  .keyBy(Transaction::getAccountId)
  .window(/*window specification*/);
```

This approach is the main building block for achieving horizontal scalability in a wide range of use cases. However, in the case of an application striving to provide flexibility in business logic at runtime, this is not enough.
To understand why this is the case, let us start with articulating a realistic sample rule definition for our fraud detection system in the form of a functional requirement:  

*&quot;Whenever the **sum** of the accumulated **payment amount** from the same **payer** to the same **beneficiary** within the **duration of a week** is **greater** than **1 000 000 $** - fire an alert.&quot;*

In this formulation we can spot a number of parameters that we would like to be able to specify in a newly-submitted rule and possibly even later modify or tweak at runtime:

1. Aggregation field (payment amount)  
1. Grouping fields (payer + beneficiary)  
1. Aggregation function (sum)  
1. Window duration (1 week)  
1. Limit (1 000 000)  
1. Limit operator (greater)  

Accordingly, we will use the following simple JSON format to define the aforementioned parameters:

```json  
{
  &quot;ruleId&quot;: 1,
  &quot;ruleState&quot;: &quot;ACTIVE&quot;,
  &quot;groupingKeyNames&quot;: [&quot;payerId&quot;, &quot;beneficiaryId&quot;],
  &quot;aggregateFieldName&quot;: &quot;paymentAmount&quot;,
  &quot;aggregatorFunctionType&quot;: &quot;SUM&quot;,
  &quot;limitOperatorType&quot;: &quot;GREATER&quot;,
  &quot;limit&quot;: 1000000,
  &quot;windowMinutes&quot;: 10080
}
```

At this point, it is important to understand that **`groupingKeyNames`** determine the actual physical grouping of events - all Transactions with the same values of specified parameters (e.g. _payer #25 -&gt; beneficiary #12_) have to be aggregated in the same physical instance of the evaluating operator. Naturally, the process of distributing data in such a way in Flink&#39;s API is realised by a `keyBy()` function.

Most examples in Flink&#39;s `keyBy()`[documentation](https://ci.apache.org/projects/flink/flink-docs-stable/dev/api_concepts.html#define-keys-using-field-expressions) use a hard-coded `KeySelector`, which extracts specific fixed events&#39; fields. However, to support the desired flexibility, we have to extract them in a more dynamic fashion based on the specifications of the rules. For this, we will have to use one additional operator that prepares every event for dispatching to a correct aggregating instance.

On a high level, our main processing pipeline looks like this:

```java
DataStream&lt;Alert&gt; alerts =
    transactions
        .process(new DynamicKeyFunction())
        .keyBy(/* some key selector */);
        .process(/* actual calculations and alerting */)
```

We have previously established that each rule defines a **`groupingKeyNames`** parameter that specifies which combination of fields will be used for the incoming events&#39; grouping. Each rule might use an arbitrary combination of these fields. At the same time, every incoming event potentially needs to be evaluated against multiple rules. This implies that events might simultaneously need to be present at multiple parallel instances of evaluating operators that correspond to different rules and hence will need to be forked. Ensuring such events dispatching is the purpose of `DynamicKeyFunction()`.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-11-19-demo-fraud-detection/shuffle_function_1.png&quot; width=&quot;800px&quot; alt=&quot;Figure 3: Forking events with Dynamic Key Function&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 3: Forking events with Dynamic Key Function&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

 `DynamicKeyFunction` iterates over a set of defined rules and prepares every event to be processed by a `keyBy()` function by extracting the required grouping keys:

```java
public class DynamicKeyFunction
    extends ProcessFunction&lt;Transaction, Keyed&lt;Transaction, String, Integer&gt;&gt; {
   ...
  /* Simplified */
  List&lt;Rule&gt; rules = /* Rules that are initialized somehow.
                        Details will be discussed in a future blog post. */;

  @Override
  public void processElement(
      Transaction event,
      Context ctx,
      Collector&lt;Keyed&lt;Transaction, String, Integer&gt;&gt; out) {

      for (Rule rule :rules) {
       out.collect(
           new Keyed&lt;&gt;(
               event,
               KeysExtractor.getKey(rule.getGroupingKeyNames(), event),
               rule.getRuleId()));
      }
  }
  ...
}
```
 `KeysExtractor.getKey()` uses reflection to extract the required values of `groupingKeyNames` fields from events and combines them as a single concatenated String key, e.g `&quot;{payerId=25;beneficiaryId=12}&quot;`. Flink will calculate the hash of this key and assign the processing of this particular combination to a specific server in the cluster. This will allow tracking all transactions between _payer #25_ and _beneficiary #12_ and evaluating defined rules within the desired time window.

Notice that a wrapper class `Keyed` with the following signature was introduced as the output type of `DynamicKeyFunction`:  

```java   
public class Keyed&lt;IN, KEY, ID&gt; {
  private IN wrapped;
  private KEY key;
  private ID id;

  ...
  public KEY getKey(){
      return key;
  }
}
```

Fields of this POJO carry the following information: `wrapped` is the original transaction event, `key` is the result of using `KeysExtractor` and `id` is the ID of the Rule that caused the dispatch of the event (according to the rule-specific grouping logic).

Events of this type will be the input to the `keyBy()` function in the main processing pipeline and allow the use of a simple lambda-expression as a [`KeySelector`](https://ci.apache.org/projects/flink/flink-docs-stable/dev/api_concepts.html#define-keys-using-key-selector-functions) for the final step of implementing dynamic data shuffle.

```java
DataStream&lt;Alert&gt; alerts =
    transactions
        .process(new DynamicKeyFunction())
        .keyBy((keyed) -&gt; keyed.getKey());
        .process(new DynamicAlertFunction())
```

By applying `DynamicKeyFunction` we are implicitly copying events for performing parallel per-rule evaluation within a Flink cluster. By doing so, we achieve an important property - horizontal scalability of rules&#39; processing. Our system will be capable of handling more rules by adding more servers to the cluster, i.e. increasing the parallelism. This property is achieved at the cost of data duplication, which might become an issue depending on the specific set of parameters, such as incoming data rate, available network bandwidth, event payload size etc. In a real-life scenario, additional optimizations can be applied, such as combined evaluation of rules which have the same `groupingKeyNames`, or a filtering layer, which would strip events of all the fields that are not required for processing of a particular rule.

### Summary:

In this blog post, we have discussed the motivation behind supporting dynamic, runtime changes to a Flink application by looking at a sample use case - a Fraud Detection engine. We have described the overall architecture and interactions between its components as well as provided references for building and running a demo Fraud Detection application in a dockerized setup. We then showed the details of implementing a  **dynamic data partitioning pattern** as the first underlying building block to enable flexible runtime configurations.

To remain focused on describing the core mechanics of the pattern, we kept the complexity of the DSL and the underlying rules engine to a minimum. Going forward, it is easy to imagine adding extensions such as allowing more sophisticated rule definitions, including filtering of certain events, logical rules chaining, and other more advanced functionality.

In the second part of this series, we will describe how the rules make their way into the running Fraud Detection engine. Additionally, we will go over the implementation details of the main processing function of the pipeline - _DynamicAlertFunction()_.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-11-19-demo-fraud-detection/end-to-end.png&quot; width=&quot;800px&quot; alt=&quot;Figure 4: End-to-end pipeline&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Figure 4: End-to-end pipeline&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

In the next article, we will see how Flink&#39;s broadcast streams can be utilized to help steer the processing within the Fraud Detection engine at runtime (Dynamic Application Updates pattern).
</description>
<pubDate>Wed, 15 Jan 2020 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2020/01/15/demo-fraud-detection.html</link>
<guid isPermaLink="true">/news/2020/01/15/demo-fraud-detection.html</guid>
</item>

<item>
<title>Apache Flink 1.8.3 Released</title>
<description>The Apache Flink community released the third bugfix version of the Apache Flink 1.8 series.

This release includes 45 fixes and minor improvements for Flink 1.8.2. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.8.3.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.8.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.8.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.8.3&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13723&#39;&gt;FLINK-13723&lt;/a&gt;] -         Use liquid-c for faster doc generation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13724&#39;&gt;FLINK-13724&lt;/a&gt;] -         Remove unnecessary whitespace from the docs&amp;#39; sidenav
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13725&#39;&gt;FLINK-13725&lt;/a&gt;] -         Use sassc for faster doc generation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13726&#39;&gt;FLINK-13726&lt;/a&gt;] -         Build docs with jekyll 4.0.0.pre.beta1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13791&#39;&gt;FLINK-13791&lt;/a&gt;] -         Speed up sidenav by using group_by
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12342&#39;&gt;FLINK-12342&lt;/a&gt;] -         Yarn Resource Manager Acquires Too Many Containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13184&#39;&gt;FLINK-13184&lt;/a&gt;] -         Starting a TaskExecutor blocks the YarnResourceManager&amp;#39;s main thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13728&#39;&gt;FLINK-13728&lt;/a&gt;] -         Fix wrong closing tag order in sidenav
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13746&#39;&gt;FLINK-13746&lt;/a&gt;] -         Elasticsearch (v2.3.5) sink end-to-end test fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13749&#39;&gt;FLINK-13749&lt;/a&gt;] -         Make Flink client respect classloading policy
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13892&#39;&gt;FLINK-13892&lt;/a&gt;] -         HistoryServerTest failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13936&#39;&gt;FLINK-13936&lt;/a&gt;] -         NOTICE-binary is outdated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13966&#39;&gt;FLINK-13966&lt;/a&gt;] -         Jar sorting in collect_license_files.sh is locale dependent
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13995&#39;&gt;FLINK-13995&lt;/a&gt;] -         Fix shading of the licence information of netty
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13999&#39;&gt;FLINK-13999&lt;/a&gt;] -         Correct the documentation of MATCH_RECOGNIZE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14009&#39;&gt;FLINK-14009&lt;/a&gt;] -         Cron jobs broken due to verifying incorrect NOTICE-binary file
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14010&#39;&gt;FLINK-14010&lt;/a&gt;] -         Dispatcher &amp;amp; JobManagers don&amp;#39;t give up leadership when AM is shut down
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14043&#39;&gt;FLINK-14043&lt;/a&gt;] -         SavepointMigrationTestBase is super slow
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14107&#39;&gt;FLINK-14107&lt;/a&gt;] -         Kinesis consumer record emitter deadlock under event time alignment
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14175&#39;&gt;FLINK-14175&lt;/a&gt;] -         Upgrade KPL version in flink-connector-kinesis to fix application OOM
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14235&#39;&gt;FLINK-14235&lt;/a&gt;] -         Kafka010ProducerITCase&amp;gt;KafkaProducerTestBase.testOneToOneAtLeastOnceCustomOperator fails on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14315&#39;&gt;FLINK-14315&lt;/a&gt;] -         NPE with JobMaster.disconnectTaskManager
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14337&#39;&gt;FLINK-14337&lt;/a&gt;] -         HistoryServerTest.testHistoryServerIntegration failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14347&#39;&gt;FLINK-14347&lt;/a&gt;] -         YARNSessionFIFOITCase.checkForProhibitedLogContents found a log with prohibited string
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14370&#39;&gt;FLINK-14370&lt;/a&gt;] -         KafkaProducerAtLeastOnceITCase&amp;gt;KafkaProducerTestBase.testOneToOneAtLeastOnceRegularSink fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14398&#39;&gt;FLINK-14398&lt;/a&gt;] -         Further split input unboxing code into separate methods
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14413&#39;&gt;FLINK-14413&lt;/a&gt;] -         shade-plugin ApacheNoticeResourceTransformer uses platform-dependent encoding
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14434&#39;&gt;FLINK-14434&lt;/a&gt;] -         Dispatcher#createJobManagerRunner should not start JobManagerRunner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14562&#39;&gt;FLINK-14562&lt;/a&gt;] -         RMQSource leaves idle consumer after closing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14589&#39;&gt;FLINK-14589&lt;/a&gt;] -         Redundant slot requests with the same AllocationID leads to inconsistent slot table
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-15036&#39;&gt;FLINK-15036&lt;/a&gt;] -         Container startup error will be handled out side of the YarnResourceManager&amp;#39;s main thread
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12848&#39;&gt;FLINK-12848&lt;/a&gt;] -         Method equals() in RowTypeInfo should consider fieldsNames
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13729&#39;&gt;FLINK-13729&lt;/a&gt;] -         Update website generation dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13965&#39;&gt;FLINK-13965&lt;/a&gt;] -         Keep hasDeprecatedKeys and deprecatedKeys methods in ConfigOption and mark it with @Deprecated annotation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13967&#39;&gt;FLINK-13967&lt;/a&gt;] -         Generate full binary licensing via collect_license_files.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13968&#39;&gt;FLINK-13968&lt;/a&gt;] -         Add travis check for the correctness of the binary licensing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13991&#39;&gt;FLINK-13991&lt;/a&gt;] -         Add git exclusion for 1.9+ features to 1.8
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14008&#39;&gt;FLINK-14008&lt;/a&gt;] -         Auto-generate binary licensing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14104&#39;&gt;FLINK-14104&lt;/a&gt;] -         Bump Jackson to 2.10.1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14123&#39;&gt;FLINK-14123&lt;/a&gt;] -         Lower the default value of taskmanager.memory.fraction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14215&#39;&gt;FLINK-14215&lt;/a&gt;] -         Add Docs for TM and JM Environment Variable Setting
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14334&#39;&gt;FLINK-14334&lt;/a&gt;] -         ElasticSearch docs refer to non-existent ExceptionUtils.containsThrowable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14639&#39;&gt;FLINK-14639&lt;/a&gt;] -         Fix the document of Metrics  that has an error for `User Scope` 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14646&#39;&gt;FLINK-14646&lt;/a&gt;] -         Check non-null for key in KeyGroupStreamPartitioner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14995&#39;&gt;FLINK-14995&lt;/a&gt;] -         Kinesis NOTICE is incorrect
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 11 Dec 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/12/11/release-1.8.3.html</link>
<guid isPermaLink="true">/news/2019/12/11/release-1.8.3.html</guid>
</item>

<item>
<title>Running Apache Flink on Kubernetes with KUDO</title>
<description>A common use case for Apache Flink is streaming data analytics together with Apache Kafka, which provides a pub/sub model and durability for data streams. To achieve elastic scalability, both are typically deployed in clustered environments, and increasingly on top of container orchestration platforms like Kubernetes. The [Operator pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/) provides an extension mechanism to Kubernetes that captures human operator knowledge about an application, like Flink, in software to automate its operation. [KUDO](https://kudo.dev) is an open source toolkit for building Operators using declarative YAML specs, with a focus on ease of use for cluster admins and developers.

In this blog post we demonstrate how to orchestrate a streaming data analytics application based on Flink and Kafka with KUDO. It consists of a Flink job that checks financial transactions for fraud, and two microservices that generate and display the transactions. You can find more details about this demo in the [KUDO Operators repository](https://github.com/kudobuilder/operators/tree/master/repository/flink/docs/demo/financial-fraud), including instructions for installing the dependencies.

&lt;p style=&quot;display: block; text-align: center; margin-top: 20px; margin-bottom: 20px&quot;&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-11-06-flink-kubernetes-kudo/flink-kudo-architecture.png&quot; width=&quot;600px&quot; alt=&quot;Application: My App&quot;/&gt;
&lt;/p&gt;

## Prerequisites

You can run this demo on your local machine using [minikube](https://github.com/kubernetes/minikube). The instructions below were tested with minikube v1.5.1 and Kubernetes v1.16.2 but should work on any Kubernetes version above v1.15.0. First, start a minikube cluster with enough capacity:

`minikube start --cpus=6 --memory=9216 --disk-size=10g`

If you’re using a different way to provision Kubernetes, make sure you have at least 6 CPU Cores, 9 GB of RAM and 10 GB of disk space available.

Install the `kubectl` CLI tool. The KUDO CLI is a plugin for the Kubernetes CLI. The official instructions for installing and setting up kubectl are [here](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

Next, let’s install the KUDO CLI. At the time of this writing, the latest KUDO version is v0.10.0. You can find the CLI binaries for download [here](https://github.com/kudobuilder/kudo/releases). Download the `kubectl-kudo` binary for your OS and architecture.

If you’re using Homebrew on MacOS, you can install the CLI via:

```
$ brew tap kudobuilder/tap
$ brew install kudo-cli
```

Now, let’s initialize KUDO on our Kubernetes cluster:

```
$ kubectl kudo init
$KUDO_HOME has been configured at /Users/gerred/.kudo
```

This will create several resources. First, it will create the [Custom Resource Definitions](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/), [service account](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/), and [role bindings](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) necessary for KUDO to operate. It will also create an instance of the [KUDO controller](https://kudo.dev/docs/architecture.html#components) so that we can begin creating instances of applications.

The KUDO CLI leverages the kubectl plugin system, which gives you all its functionality under `kubectl kudo`. This is a convenient way to install and deal with your KUDO Operators. For our demo, we use Kafka and Flink which depend on ZooKeeper. To make the ZooKeeper Operator available on the cluster, run:

```
$ kubectl kudo install zookeeper --version=0.3.0 --skip-instance
```

The --skip-instance flag skips the creation of a ZooKeeper instance. The flink-demo Operator that we’re going to install below will create it as a dependency instead. Now let’s make the Kafka and Flink Operators available the same way:

```
$ kubectl kudo install kafka --version=1.2.0 --skip-instance
```

```
$ kubectl kudo install flink --version=0.2.1 --skip-instance
```

This installs all the Operator versions needed for our demo.

## Financial Fraud Demo

In our financial fraud demo we have two microservices, called “generator” and “actor”. The generator produces transactions with random amounts and writes them into a Kafka topic. Occasionally, the value will be over 10,000 which is considered fraud for the purpose of this demo. The Flink job subscribes to the Kafka topic and detects fraudulent transactions. When it does, it submits them to another Kafka topic which the actor consumes. The actor simply displays each fraudulent transaction.

The KUDO CLI by default installs Operators from the [official repository](https://github.com/kudobuilder/operators/), but it also supports installation from your local filesystem. This is useful if you want to develop your own Operator, or modify this demo for your own purposes.

First, clone the “kudobuilder/operators” repository via: 

```
$ git clone https://github.com/kudobuilder/operators.git
```

Next, change into the “operators” directory and install the demo-operator from your local filesystem:

```
$ cd operators
$ kubectl kudo install repository/flink/docs/demo/financial-fraud/demo-operator --instance flink-demo
instance.kudo.dev/v1beta1/flink-demo created
```

This time we didn’t include the --skip-instance flag, so KUDO will actually deploy all the components, including Flink, Kafka, and ZooKeeper. KUDO orchestrates deployments and other lifecycle operations using [plans](https://kudo.dev/docs/concepts.html#plan) that were defined by the Operator developer. Plans are similar to [runbooks](https://en.wikipedia.org/wiki/Runbook) and encapsulate all the procedures required to operate the software. We can track the status of the deployment using this KUDO command:

```
$ kubectl kudo plan status --instance flink-demo
Plan(s) for &quot;flink-demo&quot; in namespace &quot;default&quot;:
.
└── flink-demo (Operator-Version: &quot;flink-demo-0.1.4&quot; Active-Plan: &quot;deploy&quot;)
	└── Plan deploy (serial strategy) [IN_PROGRESS]
    	├── Phase dependencies [IN_PROGRESS]
    	│   ├── Step zookeeper (COMPLETE)
    	│   └── Step kafka (IN_PROGRESS)
    	├── Phase flink-cluster [PENDING]
    	│   └── Step flink (PENDING)
    	├── Phase demo [PENDING]
    	│   ├── Step gen (PENDING)
    	│   └── Step act (PENDING)
    	└── Phase flink-job [PENDING]
        	└── Step submit (PENDING)
```

The output shows that the “deploy” plan is in progress and that it consists of 4 phases: “dependencies”, “flink-cluster”, “demo” and “flink-job”. The “dependencies” phase includes steps for “zookeeper” and “kafka”. This is where both dependencies get installed, before KUDO continues to install the Flink cluster and the demo itself. We also see that ZooKeeper installation completed, and that Kafka installation is currently in progress. We can view details about Kafka’s deployment plan via:

```
$ kubectl kudo plan status --instance flink-demo-kafka
Plan(s) for &quot;flink-demo-kafka&quot; in namespace &quot;default&quot;:
.
└── flink-demo-kafka (Operator-Version: &quot;kafka-1.2.0&quot; Active-Plan: &quot;deploy&quot;)
	├── Plan deploy (serial strategy) [IN_PROGRESS]
	│   └── Phase deploy-kafka [IN_PROGRESS]
	│   	└── Step deploy (IN_PROGRESS)
	└── Plan not-allowed (serial strategy) [NOT ACTIVE]
    	└── Phase not-allowed (serial strategy) [NOT ACTIVE]
        	└── Step not-allowed (serial strategy) [NOT ACTIVE]
            	└── not-allowed [NOT ACTIVE]
```

After Kafka was successfully installed the next phase “flink-cluster” will start and bring up, you guessed it, your flink-cluster. After this is done, the demo phase creates the generator and actor pods that generate and display transactions for this demo. Lastly, we have the flink-job phase in which we submit the actual FinancialFraudJob to the Flink cluster. Once the flink job is submitted, we will be able to see fraud logs in our actor pod shortly after.

After a while, the state of all plans, phases and steps will change to “COMPLETE”. Now we can view the Flink dashboard to verify that our job is running. To access it from outside the Kubernetes cluster, first start the client proxy, then open the URL below in your browser:

```
$ kubectl proxy
```

[http://127.0.0.1:8001/api/v1/namespaces/default/services/flink-demo-flink-jobmanager:ui/proxy/#/overview](http://127.0.0.1:8001/api/v1/namespaces/default/services/flink-demo-flink-jobmanager:ui/proxy/#/overview)

It should look similar to this, depending on your local machine and how many cores you have available:

&lt;p style=&quot;display: block; text-align: center; margin-top: 20px; margin-bottom: 20px&quot;&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-11-06-flink-kubernetes-kudo/flink-dashboard-ui.png&quot; width=&quot;600px&quot; alt=&quot;Application: My App&quot;/&gt;
&lt;/p&gt;

The job is up and running and we should now be able to see fraudulent transaction in the logs of the actor pod:

```
$ kubectl logs $(kubectl get pod -l actor=flink-demo -o jsonpath=&quot;{.items[0].metadata.name}&quot;)
Broker:   flink-demo-kafka-kafka-0.flink-demo-kafka-svc:9093
Topic:   fraud

Detected Fraud:   TransactionAggregate {startTimestamp=0, endTimestamp=1563395831000, totalAmount=19895:
Transaction{timestamp=1563395778000, origin=1, target=&#39;3&#39;, amount=8341}
Transaction{timestamp=1563395813000, origin=1, target=&#39;3&#39;, amount=8592}
Transaction{timestamp=1563395817000, origin=1, target=&#39;3&#39;, amount=2802}
Transaction{timestamp=1563395831000, origin=1, target=&#39;3&#39;, amount=160}}
```

If you add the “-f” flag to the previous command, you can follow along as more transactions are streaming in and are evaluated by our Flink job.

## Conclusion

In this blog post we demonstrated how to easily deploy an end-to-end streaming data application on Kubernetes using KUDO. We deployed a Flink job and two microservices, as well as all the required infrastructure - Flink, Kafka, and ZooKeeper using just a few kubectl commands. To find out more about KUDO, visit the [project website](https://kudo.dev) or join the community on [Slack](https://kubernetes.slack.com/messages/kudo/).
</description>
<pubDate>Mon, 09 Dec 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/12/09/flink-kubernetes-kudo.html</link>
<guid isPermaLink="true">/news/2019/12/09/flink-kubernetes-kudo.html</guid>
</item>

<item>
<title>How to query Pulsar Streams using Apache Flink</title>
<description>In a previous [story](https://flink.apache.org/2019/05/03/pulsar-flink.html) on the  Flink blog, we explained the different ways that [Apache Flink](https://flink.apache.org/) and [Apache Pulsar](https://pulsar.apache.org/) can integrate to provide elastic data processing at large scale. This blog post discusses the new developments and integrations between the two frameworks and showcases how you can leverage Pulsar’s built-in schema to query Pulsar streams in real time using Apache Flink. 


# A short intro to Apache Pulsar

Apache Pulsar is a flexible pub/sub messaging system, backed by durable log storage. Some of the framework’s highlights include multi-tenancy, a unified message model, structured event streams and a cloud-native architecture that make it a perfect fit for a wide set of use cases, ranging from billing, payments and trading services all the way to the unification of the different messaging architectures in an organization. If you are interested in finding out more about Pulsar, you can visit the [Apache Pulsar documentation](https://pulsar.apache.org/docs/en/standalone/) or get in touch with the Pulsar community on [Slack](https://apache-pulsar.herokuapp.com).


# Existing Pulsar &amp; Flink integration (Apache Flink 1.6+)

The existing integration between Pulsar and Flink exploits Pulsar as a message queue in a Flink application. Flink developers can utilize Pulsar as a streaming source and streaming sink for their Flink applications by selecting a specific Pulsar source and connecting to their desired Pulsar cluster and topic:

```java
// create and configure Pulsar consumer
PulsarSourceBuilder&lt;String&gt;builder = PulsarSourceBuilder  
  .builder(new SimpleStringSchema()) 
  .serviceUrl(serviceUrl)
  .topic(inputTopic)
  .subsciptionName(subscription);
SourceFunction&lt;String&gt; src = builder.build();
// ingest DataStream with Pulsar consumer
DataStream&lt;String&gt; words = env.addSource(src);
```

Pulsar streams can then get connected to the Flink processing logic…

```java
// perform computation on DataStream (here a simple WordCount)
DataStream&lt;WordWithCount&gt; wc = words
  .flatmap((FlatMapFunction&lt;String, WordWithCount&gt;) (word, collector) -&gt; {
    collector.collect(new WordWithCount(word, 1));
  })
 
  .returns(WordWithCount.class)
  .keyBy(&quot;word&quot;)
  .timeWindow(Time.seconds(5))
  .reduce((ReduceFunction&lt;WordWithCount&gt;) (c1, c2) -&gt;
    new WordWithCount(c1.word, c1.count + c2.count));
```

...and then get emitted back to Pulsar (used now as a sink), sending one’s computation results downstream, back to a Pulsar topic: 


```java
// emit result via Pulsar producer 
wc.addSink(new FlinkPulsarProducer&lt;&gt;(
  serviceUrl,
  outputTopic,
  new AuthentificationDisabled(),
  wordWithCount -&gt; wordWithCount.toString().getBytes(UTF_8),
  wordWithCount -&gt; wordWithCount.word)
);
```

Although this is a great first integration step, the existing design is not leveraging the full power of Pulsar. Some shortcomings of the integration with Flink 1.6.0 relate to Pulsar neither being utilized as durable storage nor having schema integration with Flink, resulting in manual input when describing an application’s schema registry.


# Pulsar’s integration with Flink 1.9: Using Pulsar as a Flink catalog

The latest integration between [Flink 1.9.0](https://flink.apache.org/downloads.html#apache-flink-191) and Pulsar addresses most of the previously mentioned shortcomings. The [contribution of Alibaba’s Blink to the Flink repository](https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html) adds many enhancements and new features to the processing framework that make the integration with Pulsar significantly more powerful and impactful. Flink 1.9.0 brings Pulsar schema integration into the picture, makes the Table API a first-class citizen and provides an exactly-once streaming source and at-least-once streaming sink with Pulsar. Lastly, with schema integration, Pulsar can now be registered as a Flink catalog, making running Flink queries on top of Pulsar streams a matter of a few commands. In the following sections, we will take a closer look at the new integrations and provide examples of how to query Pulsar streams using Flink SQL.


# Leveraging the Flink &lt;&gt; Pulsar Schema Integration

Before delving into the integration details and how you can use Pulsar schema with Flink, let us describe how schema in Pulsar works. Schema in Apache Pulsar already co-exists and serves as the representation of the data on the broker side of the framework, something that makes schema registry with external systems obsolete. Additionally, the data schema in Pulsar is associated with each topic so both producers and consumers send data with predefined schema information, while the broker performs schema validation, and manages schema multi-versioning and evolution in compatibility checks. 
 
Below you can find an example of Pulsar’s schema on both the producer and consumer side. On the producer side, you can specify which schema you want to use and Pulsar then sends a POJO class without the need to perform any serialization/deserialization. Similarly, on the consumer end, you can also specify the data schema and upon receiving the data, Pulsar will automatically validate the schema information, fetch the schema of the given version and then deserialize the data back to a POJO structure. Pulsar stores the schema information in the metadata of a Pulsar topic.

```java
// Create producer with Struct schema and send messages
Producer&lt;User&gt; producer = client.newProducer(Schema.AVRO(User.class)).create();
producer.newMessage()
  .value(User.builder()
    .userName(“pulsar-user”)
    .userId(1L)
    .build())
  .send();
```

```java
// Create consumer with Struct schema and receive messages
Consumer&lt;User&gt; consumer = client.newCOnsumer(Schema.AVRO(User.class)).create();
consumer.receive();
```

Let’s assume we have an application that specifies a schema to the producer and/or consumer. Upon receiving the schema information, the producer (or consumer) — that is connected to the broker — will transfer such information so that the broker can then perform schema registration, validations and schema compatibility checks before returning or rejecting the schema as illustrated in the diagram below: 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-pulsar-sql-blog-post-visual.png&quot; width=&quot;600px&quot; alt=&quot;Pulsar Schema&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Not only is Pulsar able to handle and store the schema information, but is additionally able to handle any schema evolution — where necessary. Pulsar will effectively manage any schema evolution in the broker, keeping track of all different versions of your schema while performing any necessary compatibility checks. 
 
Moreover, when messages are published on the producer side, Pulsar will tag each message with the schema version as part of each message’s metadata. On the consumer side, when the message is received and the metadata is deserialized, Pulsar will check the schema version associated with this message and will fetch the corresponding schema information from the broker. As a result, when Pulsar integrates with a Flink application it uses the pre-existing schema information and maps individual messages with schema information to a different row in Flink’s type system. 
 
For the cases when Flink users do not interact with schema directly or make use of primitive schema (for example, using a topic to store a string or long number), Pulsar will either convert the message payload into a Flink row, called ‘value’ or — for the cases of structured schema types, like JSON and AVRO —  Pulsar will extract the individual fields from the schema information and will map the fields to Flink’s type system. Finally, all metadata information associated with each message, such as the message key, topic, publish time, or event time will be converted into metadata fields in a Flink row. Below we provide two examples of primitive schema and structured schema types and how these will be transformed from a Pulsar topic to Flink’s type system.


&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-pulsar-sql-blog-post-visual-primitive-avro-schema.png&quot; width=&quot;600px&quot; alt=&quot;Primitive and AVRO Schema&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Once all the schema information is mapped to Flink’s type system, you can start building a Pulsar source, sink or catalog in Flink based on the specified schema information as illustrated below:

# Flink &amp; Pulsar: Read data from Pulsar

* Create a Pulsar source for streaming queries

```java
val env = StreamExecutionEnvironment.getExecutionEnvironment
val props = new Properties()
props.setProperty(&quot;service.url&quot;, &quot;pulsar://...&quot;)
props.setProperty(&quot;admin.url&quot;, &quot;http://...&quot;)
props.setProperty(&quot;partitionDiscoveryIntervalMillis&quot;, &quot;5000&quot;)
props.setProperty(&quot;startingOffsets&quot;, &quot;earliest&quot;)
props.setProperty(&quot;topic&quot;, &quot;test-source-topic&quot;)
val source = new FlinkPulsarSource(props)
// you don&#39;t need to provide a type information to addSource since FlinkPulsarSource is ResultTypeQueryable
val dataStream = env.addSource(source)(null)

// chain operations on dataStream of Row and sink the output
// end method chaining

env.execute()
```

* Register topics in Pulsar as streaming tables

```java
val env = StreamExecutionEnvironment.getExecutionEnvironment
val tEnv = StreamTableEnvironment.create(env)

val prop = new Properties()
prop.setProperty(&quot;service.url&quot;, serviceUrl)
prop.setProperty(&quot;admin.url&quot;, adminUrl)
prop.setProperty(&quot;flushOnCheckpoint&quot;, &quot;true&quot;)
prop.setProperty(&quot;failOnWrite&quot;, &quot;true&quot;)
props.setProperty(&quot;topic&quot;, &quot;test-sink-topic&quot;)

tEnv
  .connect(new Pulsar().properties(props))
  .inAppendMode()
  .registerTableSource(&quot;sink-table&quot;)

val sql = &quot;INSERT INTO sink-table .....&quot;
tEnv.sqlUpdate(sql)
env.execute()
```

# Flink &amp; Pulsar: Write data to Pulsar

* Create a Pulsar sink for streaming queries

```java
val env = StreamExecutionEnvironment.getExecutionEnvironment
val stream = .....

val prop = new Properties()
prop.setProperty(&quot;service.url&quot;, serviceUrl)
prop.setProperty(&quot;admin.url&quot;, adminUrl)
prop.setProperty(&quot;flushOnCheckpoint&quot;, &quot;true&quot;)
prop.setProperty(&quot;failOnWrite&quot;, &quot;true&quot;)
props.setProperty(&quot;topic&quot;, &quot;test-sink-topic&quot;)

stream.addSink(new FlinkPulsarSink(prop, DummyTopicKeyExtractor))
env.execute()
```

* Write a streaming table to Pulsar

```java
val env = StreamExecutionEnvironment.getExecutionEnvironment
val tEnv = StreamTableEnvironment.create(env)

val prop = new Properties()
prop.setProperty(&quot;service.url&quot;, serviceUrl)
prop.setProperty(&quot;admin.url&quot;, adminUrl)
prop.setProperty(&quot;flushOnCheckpoint&quot;, &quot;true&quot;)
prop.setProperty(&quot;failOnWrite&quot;, &quot;true&quot;)
props.setProperty(&quot;topic&quot;, &quot;test-sink-topic&quot;)

tEnv
  .connect(new Pulsar().properties(props))
  .inAppendMode()
  .registerTableSource(&quot;sink-table&quot;)

val sql = &quot;INSERT INTO sink-table .....&quot;
tEnv.sqlUpdate(sql)
env.execute()
```

In every instance, Flink developers only need to specify the properties of how Flink will connect to a Pulsar cluster without worrying about any schema registry, or serialization/deserialization actions and register the Pulsar cluster as a source, sink or streaming table in Flink. Once all three elements are put together, Pulsar can then be registered as a catalog in Flink, something that drastically simplifies how you process and query data like, for example, writing a program to query data from Pulsar or using the Table API and SQL to query Pulsar data streams.


# Next Steps &amp; Future Integration

The goal of the integration between Pulsar and Flink is to simplify how developers use the two frameworks to build a unified data processing stack. As we progress from the classical Lamda architectures — where an online, speeding layer is combined with an offline, batch layer to run data computations — Flink and Pulsar present a great combination in providing a truly unified data processing stack. We see Flink as a unified computation engine, handling both online (streaming) and offline (batch) workloads and Pulsar as the unified data storage layer for a truly unified data processing stack that simplifies developer workloads.
 
There is still a lot of ongoing work and effort from both communities in getting the integration even better, such as a new source API ([FLIP-27](https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface)) that will allow the [contribution of the Pulsar connectors to the Flink community](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/Discussion-Flink-Pulsar-Connector-td22019.html) as well as a new subscription type called `Key_Shared` subscription type in Pulsar that will allow efficient scaling of the source parallelism. Additional efforts focus around the provision of end-to-end, exactly-once guarantees (currently available only in the source Pulsar connector, and not the sink Pulsar connector) and more efforts around using Pulsar/BookKeeper as a Flink state backend. 
 
You can find a more detailed overview of the integration work between the two communities in this [recording video](https://youtu.be/3sBXXfgl5vs) from Flink Forward Europe 2019 or sign up to the [Flink dev mailing list](https://flink.apache.org/community.html#mailing-lists) for the latest contribution and integration efforts between Flink and Pulsar. 
</description>
<pubDate>Mon, 25 Nov 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/11/25/query-pulsar-streams-using-apache-flink.html</link>
<guid isPermaLink="true">/news/2019/11/25/query-pulsar-streams-using-apache-flink.html</guid>
</item>

<item>
<title>Apache Flink 1.9.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.9 series.

This release includes 96 fixes and minor improvements for Flink 1.9.0. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.9.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.9.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11630&#39;&gt;FLINK-11630&lt;/a&gt;] -         TaskExecutor does not wait for Task termination when terminating itself
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13490&#39;&gt;FLINK-13490&lt;/a&gt;] -         Fix if one column value is null when reading JDBC, the following values are all null
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13941&#39;&gt;FLINK-13941&lt;/a&gt;] -         Prevent data-loss by not cleaning up small part files from S3.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12501&#39;&gt;FLINK-12501&lt;/a&gt;] -         AvroTypeSerializer does not work with types generated by avrohugger
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13386&#39;&gt;FLINK-13386&lt;/a&gt;] -         Fix some frictions in the new default Web UI
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13526&#39;&gt;FLINK-13526&lt;/a&gt;] -         Switching to a non existing catalog or database crashes sql-client
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13568&#39;&gt;FLINK-13568&lt;/a&gt;] -         DDL create table doesn&amp;#39;t allow STRING data type
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13805&#39;&gt;FLINK-13805&lt;/a&gt;] -         Bad Error Message when TaskManager is lost
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13806&#39;&gt;FLINK-13806&lt;/a&gt;] -         Metric Fetcher floods the JM log with errors when TM is lost
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14010&#39;&gt;FLINK-14010&lt;/a&gt;] -         Dispatcher &amp;amp; JobManagers don&amp;#39;t give up leadership when AM is shut down
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14145&#39;&gt;FLINK-14145&lt;/a&gt;] -         CompletedCheckpointStore#getLatestCheckpoint(true) returns wrong checkpoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13059&#39;&gt;FLINK-13059&lt;/a&gt;] -         Cassandra Connector leaks Semaphore on Exception and hangs on close
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13534&#39;&gt;FLINK-13534&lt;/a&gt;] -         Unable to query Hive table with decimal column
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13562&#39;&gt;FLINK-13562&lt;/a&gt;] -         Throws exception when FlinkRelMdColumnInterval meets two stage stream group aggregate
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13563&#39;&gt;FLINK-13563&lt;/a&gt;] -         TumblingGroupWindow should implement toString method
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13564&#39;&gt;FLINK-13564&lt;/a&gt;] -         Throw exception if constant with YEAR TO MONTH resolution was used for group windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13588&#39;&gt;FLINK-13588&lt;/a&gt;] -         StreamTask.handleAsyncException throws away the exception cause
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13653&#39;&gt;FLINK-13653&lt;/a&gt;] -         ResultStore should avoid using RowTypeInfo when creating a result
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13711&#39;&gt;FLINK-13711&lt;/a&gt;] -         Hive array values not properly displayed in SQL CLI
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13737&#39;&gt;FLINK-13737&lt;/a&gt;] -         flink-dist should add provided dependency on flink-examples-table
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13738&#39;&gt;FLINK-13738&lt;/a&gt;] -         Fix NegativeArraySizeException in LongHybridHashTable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13742&#39;&gt;FLINK-13742&lt;/a&gt;] -         Fix code generation when aggregation contains both distinct aggregate with and without filter
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13760&#39;&gt;FLINK-13760&lt;/a&gt;] -         Fix hardcode Scala version dependency in hive connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13761&#39;&gt;FLINK-13761&lt;/a&gt;] -         `SplitStream` should be deprecated because `SplitJavaStream` is deprecated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13789&#39;&gt;FLINK-13789&lt;/a&gt;] -         Transactional Id Generation fails due to user code impacting formatting string
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13823&#39;&gt;FLINK-13823&lt;/a&gt;] -         Incorrect debug log in CompileUtils
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13825&#39;&gt;FLINK-13825&lt;/a&gt;] -         The original plugins dir is not restored after e2e test run
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13831&#39;&gt;FLINK-13831&lt;/a&gt;] -         Free Slots / All Slots display error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13887&#39;&gt;FLINK-13887&lt;/a&gt;] -         Ensure defaultInputDependencyConstraint to be non-null when setting it in ExecutionConfig
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13897&#39;&gt;FLINK-13897&lt;/a&gt;] -         OSS FS NOTICE file is placed in wrong directory
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13933&#39;&gt;FLINK-13933&lt;/a&gt;] -         Hive Generic UDTF can not be used in table API both stream and batch mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13936&#39;&gt;FLINK-13936&lt;/a&gt;] -         NOTICE-binary is outdated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13966&#39;&gt;FLINK-13966&lt;/a&gt;] -         Jar sorting in collect_license_files.sh is locale dependent
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14009&#39;&gt;FLINK-14009&lt;/a&gt;] -         Cron jobs broken due to verifying incorrect NOTICE-binary file
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14049&#39;&gt;FLINK-14049&lt;/a&gt;] -         Update error message for failed partition updates to include task name
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14076&#39;&gt;FLINK-14076&lt;/a&gt;] -         &amp;#39;ClassNotFoundException: KafkaException&amp;#39; on Flink v1.9 w/ checkpointing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14107&#39;&gt;FLINK-14107&lt;/a&gt;] -         Kinesis consumer record emitter deadlock under event time alignment
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14119&#39;&gt;FLINK-14119&lt;/a&gt;] -         Clean idle state for RetractableTopNFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14139&#39;&gt;FLINK-14139&lt;/a&gt;] -         Fix potential memory leak of rest server when using session/standalone cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14140&#39;&gt;FLINK-14140&lt;/a&gt;] -         The Flink Logo Displayed in Flink Python Shell is Broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14150&#39;&gt;FLINK-14150&lt;/a&gt;] -         Unnecessary __pycache__ directories appears in pyflink.zip
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14288&#39;&gt;FLINK-14288&lt;/a&gt;] -         Add Py4j NOTICE for source release
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13892&#39;&gt;FLINK-13892&lt;/a&gt;] -         HistoryServerTest failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14043&#39;&gt;FLINK-14043&lt;/a&gt;] -         SavepointMigrationTestBase is super slow
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12164&#39;&gt;FLINK-12164&lt;/a&gt;] -         JobMasterTest.testJobFailureWhenTaskExecutorHeartbeatTimeout is unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9900&#39;&gt;FLINK-9900&lt;/a&gt;] -         Fix unstable test ZooKeeperHighAvailabilityITCase#testRestoreBehaviourWithFaultyStateHandles
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13484&#39;&gt;FLINK-13484&lt;/a&gt;] -         ConnectedComponents end-to-end test instable with NoResourceAvailableException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13489&#39;&gt;FLINK-13489&lt;/a&gt;] -         Heavy deployment end-to-end test fails on Travis with TM heartbeat timeout
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13514&#39;&gt;FLINK-13514&lt;/a&gt;] -         StreamTaskTest.testAsyncCheckpointingConcurrentCloseAfterAcknowledge unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13530&#39;&gt;FLINK-13530&lt;/a&gt;] -         AbstractServerTest failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13585&#39;&gt;FLINK-13585&lt;/a&gt;] -         Fix sporadical deallock in TaskAsyncCallTest#testSetsUserCodeClassLoader()
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13599&#39;&gt;FLINK-13599&lt;/a&gt;] -         Kinesis end-to-end test failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13663&#39;&gt;FLINK-13663&lt;/a&gt;] -         SQL Client end-to-end test for modern Kafka failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13688&#39;&gt;FLINK-13688&lt;/a&gt;] -         HiveCatalogUseBlinkITCase.testBlinkUdf constantly failed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13739&#39;&gt;FLINK-13739&lt;/a&gt;] -         BinaryRowTest.testWriteString() fails in some environments
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13746&#39;&gt;FLINK-13746&lt;/a&gt;] -         Elasticsearch (v2.3.5) sink end-to-end test fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13769&#39;&gt;FLINK-13769&lt;/a&gt;] -         BatchFineGrainedRecoveryITCase.testProgram failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13807&#39;&gt;FLINK-13807&lt;/a&gt;] -         Flink-avro unit tests fails if the character encoding in the environment is not default to UTF-8
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13965&#39;&gt;FLINK-13965&lt;/a&gt;] -         Keep hasDeprecatedKeys and deprecatedKeys methods in ConfigOption and mark it with @Deprecated annotation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9941&#39;&gt;FLINK-9941&lt;/a&gt;] -         Flush in ScalaCsvOutputFormat before close method
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13336&#39;&gt;FLINK-13336&lt;/a&gt;] -         Remove the legacy batch fault tolerance page and redirect it to the new task failure recovery page
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13380&#39;&gt;FLINK-13380&lt;/a&gt;] -         Improve the usability of Flink session cluster on Kubernetes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13819&#39;&gt;FLINK-13819&lt;/a&gt;] -         Introduce RpcEndpoint State
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13845&#39;&gt;FLINK-13845&lt;/a&gt;] -         Drop all the content of removed &amp;quot;Checkpointed&amp;quot; interface
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13957&#39;&gt;FLINK-13957&lt;/a&gt;] -         Log dynamic properties on job submission
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13967&#39;&gt;FLINK-13967&lt;/a&gt;] -         Generate full binary licensing via collect_license_files.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13968&#39;&gt;FLINK-13968&lt;/a&gt;] -         Add travis check for the correctness of the binary licensing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13449&#39;&gt;FLINK-13449&lt;/a&gt;] -         Add ARM architecture to MemoryArchitecture
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;        Documentation
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13105&#39;&gt;FLINK-13105&lt;/a&gt;] -         Add documentation for blink planner&amp;#39;s built-in functions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13277&#39;&gt;FLINK-13277&lt;/a&gt;] -         add documentation of Hive source/sink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13354&#39;&gt;FLINK-13354&lt;/a&gt;] -         Add documentation for how to use blink planner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13355&#39;&gt;FLINK-13355&lt;/a&gt;] -         Add documentation for Temporal Table Join in blink planner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13356&#39;&gt;FLINK-13356&lt;/a&gt;] -         Add documentation for TopN and Deduplication in blink planner
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13359&#39;&gt;FLINK-13359&lt;/a&gt;] -         Add documentation for DDL introduction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13362&#39;&gt;FLINK-13362&lt;/a&gt;] -         Add documentation for Kafka &amp;amp; ES &amp;amp; FileSystem DDL
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13363&#39;&gt;FLINK-13363&lt;/a&gt;] -         Add documentation for streaming aggregate performance tunning.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13706&#39;&gt;FLINK-13706&lt;/a&gt;] -         add documentation of how to use Hive functions in Flink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13942&#39;&gt;FLINK-13942&lt;/a&gt;] -         Add Overview page for Getting Started section
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13863&#39;&gt;FLINK-13863&lt;/a&gt;] -         Update Operations Playground to Flink 1.9.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13937&#39;&gt;FLINK-13937&lt;/a&gt;] -         Fix wrong hive dependency version in documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13830&#39;&gt;FLINK-13830&lt;/a&gt;] -         The Document about Cluster on yarn have some problems
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-14160&#39;&gt;FLINK-14160&lt;/a&gt;] -         Extend Operations Playground with --backpressure option
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13388&#39;&gt;FLINK-13388&lt;/a&gt;] -         Update UI screenshots in the documentation to the new default Web Frontend
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13415&#39;&gt;FLINK-13415&lt;/a&gt;] -         Document how to use hive connector in scala shell
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13517&#39;&gt;FLINK-13517&lt;/a&gt;] -         Restructure Hive Catalog documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13643&#39;&gt;FLINK-13643&lt;/a&gt;] -         Document the workaround for users with a different minor Hive version
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13757&#39;&gt;FLINK-13757&lt;/a&gt;] -         Fix wrong description of &quot;IS NOT TRUE&quot; function documentation
&lt;/li&gt;
&lt;/ul&gt;

</description>
<pubDate>Fri, 18 Oct 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/10/18/release-1.9.1.html</link>
<guid isPermaLink="true">/news/2019/10/18/release-1.9.1.html</guid>
</item>

<item>
<title>The State Processor API: How to Read, write and modify the state of Flink applications</title>
<description>Whether you are running Apache Flink&lt;sup&gt;Ⓡ&lt;/sup&gt; in production or evaluated Flink as a computation framework in the past, you&#39;ve probably found yourself asking the question: How can I access, write or update state in a Flink savepoint? Ask no more! [Apache Flink 1.9.0](https://flink.apache.org/news/2019/08/22/release-1.9.0.html) introduces the [State Processor API](https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/libs/state_processor_api.html), a powerful extension of the DataSet API that allows reading, writing and modifying state in Flink&#39;s savepoints and checkpoints. 
 
In this post, we explain why this feature is a big step for Flink, what you can use it for, and how to use it. Finally, we will discuss the future of the State Processor API and how it aligns with our plans to evolve Flink into a system for [unified batch and stream processing](https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html).

## Stateful Stream Processing with Apache Flink until Flink 1.9

All non-trivial stream processing applications are stateful and most of them are designed to run for months or years. Over time, many of them accumulate a lot of valuable state that can be very expensive or even impossible to rebuild if it gets lost due to a failure. In order to guarantee the consistency and durability of application state, Flink featured a sophisticated checkpointing and recovery mechanism from very early on. With every release, the Flink community has added more and more state-related features to improve checkpointing and recovery speed, the maintenance of applications, and practices to manage applications.

However, a feature that was commonly requested by Flink users was the ability to access the state of an application “from the outside”. This request was motivated by the need to validate or debug the state of an application, to migrate the state of an application to another application, to evolve an application from the Heap State Backend to the RocksDB State Backend, or to import the initial state of an application from an external system like a relational database.

Despite all those convincing reasons to expose application state externally, your access options have been fairly limited until now. Flink&#39;s Queryable State feature only supports key-lookups (point queries) and does not guarantee the consistency of returned values (the value of a key might be different before and after an application recovered from a failure). Moreover, queryable state cannot be used to add or modify the state of an application. Also, savepoints, which are consistent snapshots of an application&#39;s state, were not accessible because the application state is encoded with a custom binary format.

## Reading and Writing Application State with the State Processor API

The State Processor API that comes with Flink 1.9 is a true game-changer in how you can work with application state! In a nutshell, it extends the DataSet API with Input and OutputFormats to read and write savepoint or checkpoint data. Due to the [interoperability of DataSet and Table API](https://ci.apache.org/projects/flink/flink-docs-master/dev/table/common.html#integration-with-datastream-and-dataset-api), you can even use relational Table API or SQL queries to analyze and process state data.

For example, you can take a savepoint of a running stream processing application and analyze it with a DataSet batch program to verify that the application behaves correctly. Or you can read a batch of data from any store, preprocess it, and write the result to a savepoint that you use to bootstrap the state of a streaming application. It&#39;s also possible to fix inconsistent state entries now. Finally, the State Processor API opens up many ways to evolve a stateful application that were previously blocked by parameter and design choices that could not be changed without losing all the state of the application after it was started. For example, you can now arbitrarily modify the data types of states, adjust the maximum parallelism of operators, split or merge operator state, re-assign operator UIDs, and so on.

## Mapping Application State to DataSets

The State Processor API maps the state of a streaming application to one or more data sets that can be separately processed. In order to be able to use the API, you need to understand how this mapping works.
 
But let&#39;s first have a look at what a stateful Flink job looks like. A Flink job is composed of operators, typically one or more source operators, a few operators for the actual processing, and one or more sink operators. Each operator runs in parallel in one or more tasks and can work with different types of state. An operator can have zero, one, or more *“operator states”* which are organized as lists that are scoped to the operator&#39;s tasks. If the operator is applied on a keyed stream, it can also have zero, one, or more *“keyed states”* which are scoped to a key that is extracted from each processed record. You can think of keyed state as a distributed key-value map. 
 
The following figure shows the application “MyApp” which consists of three operators called “Src”, “Proc”, and “Snk”. Src has one operator state (os1), Proc has one operator state (os2) and two keyed states (ks1, ks2) and Snk is stateless.

&lt;p style=&quot;display: block; text-align: center; margin-top: 20px; margin-bottom: 20px&quot;&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-09-13-state-processor-api-blog/application-my-app-state-processor-api.png&quot; width=&quot;600px&quot; alt=&quot;Application: My App&quot;/&gt;
&lt;/p&gt;

A savepoint or checkpoint of MyApp consists of the data of all states, organized in a way that the states of each task can be restored. When processing the data of a savepoint (or checkpoint) with a batch job, we need a mental model that maps the data of the individual tasks&#39; states into data sets or tables. In fact, we can think of a savepoint as a database. Every operator (identified by its UID) represents a namespace. Each operator state of an operator is mapped to a dedicated table in the namespace with a single column that holds the state&#39;s data of all tasks. All keyed states of an operator are mapped to a single table consisting of a column for the key, and one column for each keyed state. The following figure shows how a savepoint of MyApp is mapped to a database.

&lt;p style=&quot;display: block; text-align: center; margin-top: 20px; margin-bottom: 20px&quot;&gt;
	&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-09-13-state-processor-api-blog/database-my-app-state-processor-api.png&quot; width=&quot;600px&quot; alt=&quot;Database: My App&quot;/&gt;
&lt;/p&gt;

The figure shows how the values of Src&#39;s operator state are mapped to a table with one column and five rows, one row for all list entries across all parallel tasks of Src. Operator state os2 of the operator “Proc” is similarly mapped to an individual table. The keyed states ks1 and ks2 are combined to a single table with three columns, one for the key, one for ks1 and one for ks2. The keyed table holds one row for each distinct key of both keyed states. Since the operator “Snk” does not have any state, its namespace is empty.

The State Processor API now offers methods to create, load, and write a savepoint. You can read a DataSet from a loaded savepoint or convert a DataSet into a state and add it to a savepoint. DataSets can be processed with the full feature set of the DataSet API. With these building blocks, all of the before-mentioned use cases (and more) can be addressed. Please have a look at the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/libs/state_processor_api.html) if you&#39;d like to learn how to use the State Processor API in detail.

## Why DataSet API?

In case you are familiar with [Flink&#39;s roadmap](https://flink.apache.org/roadmap.html), you might be surprised that the State Processor API is based on the DataSet API. The Flink community plans to extend the DataStream API with the concept of *BoundedStreams* and deprecate the DataSet API. When designing this feature, we also evaluated the DataStream API or Table API but neither could provide the right feature set yet. Since we didn&#39;t want to block this feature on the progress of Flink&#39;s APIs, we decided to build it on the DataSet API, but kept its dependencies on the DataSet API to a minimum. Hence, migrating it to another API should be fairly easy. 

## Summary

Flink users have requested a feature to access and modify the state of streaming applications from the outside for a long time. With the State Processor API, Flink 1.9.0 finally exposes application state as a data format that can be manipulated. This feature opens up many new possibilities for how users can maintain and manage Flink streaming applications, including arbitrary evolution of stream applications and exporting and bootstrapping of application state. To put it concisely, the State Processor API unlocks the black box that savepoints used to be.
</description>
<pubDate>Fri, 13 Sep 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/feature/2019/09/13/state-processor-api.html</link>
<guid isPermaLink="true">/feature/2019/09/13/state-processor-api.html</guid>
</item>

<item>
<title>Apache Flink 1.8.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.8 series.

This release includes 23 fixes and minor improvements for Flink 1.8.1. The list below includes a detailed list of all fixes and improvements.

We highly recommend all users to upgrade to Flink 1.8.2.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.8.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.8.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.8.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13941&#39;&gt;FLINK-13941&lt;/a&gt;] -         Prevent data-loss by not cleaning up small part files from S3.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9526&#39;&gt;FLINK-9526&lt;/a&gt;] -         BucketingSink end-to-end test failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10368&#39;&gt;FLINK-10368&lt;/a&gt;] -         &amp;#39;Kerberized YARN on Docker test&amp;#39; unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12319&#39;&gt;FLINK-12319&lt;/a&gt;] -         StackOverFlowError in cep.nfa.sharedbuffer.SharedBuffer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12736&#39;&gt;FLINK-12736&lt;/a&gt;] -         ResourceManager may release TM with allocated slots
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12889&#39;&gt;FLINK-12889&lt;/a&gt;] -         Job keeps in FAILING state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13059&#39;&gt;FLINK-13059&lt;/a&gt;] -         Cassandra Connector leaks Semaphore on Exception; hangs on close
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13159&#39;&gt;FLINK-13159&lt;/a&gt;] -         java.lang.ClassNotFoundException when restore job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13367&#39;&gt;FLINK-13367&lt;/a&gt;] -         Make ClosureCleaner detect writeReplace serialization override
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13369&#39;&gt;FLINK-13369&lt;/a&gt;] -         Recursive closure cleaner ends up with stackOverflow in case of circular dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13394&#39;&gt;FLINK-13394&lt;/a&gt;] -         Use fallback unsafe secure MapR in nightly.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13484&#39;&gt;FLINK-13484&lt;/a&gt;] -         ConnectedComponents end-to-end test instable with NoResourceAvailableException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13499&#39;&gt;FLINK-13499&lt;/a&gt;] -         Remove dependency on MapR artifact repository
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13508&#39;&gt;FLINK-13508&lt;/a&gt;] -         CommonTestUtils#waitUntilCondition() may attempt to sleep with negative time
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13586&#39;&gt;FLINK-13586&lt;/a&gt;] -         Method ClosureCleaner.clean broke backward compatibility between 1.8.0 and 1.8.1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13761&#39;&gt;FLINK-13761&lt;/a&gt;] -         `SplitStream` should be deprecated because `SplitJavaStream` is deprecated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13789&#39;&gt;FLINK-13789&lt;/a&gt;] -         Transactional Id Generation fails due to user code impacting formatting string
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13806&#39;&gt;FLINK-13806&lt;/a&gt;] -         Metric Fetcher floods the JM log with errors when TM is lost
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13807&#39;&gt;FLINK-13807&lt;/a&gt;] -         Flink-avro unit tests fails if the character encoding in the environment is not default to UTF-8
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-13897&#39;&gt;FLINK-13897&lt;/a&gt;] -         OSS FS NOTICE file is placed in wrong directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12578&#39;&gt;FLINK-12578&lt;/a&gt;] -         Use secure URLs for Maven repositories
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12741&#39;&gt;FLINK-12741&lt;/a&gt;] -         Update docs about Kafka producer fault tolerance guarantees
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12749&#39;&gt;FLINK-12749&lt;/a&gt;] -         Add Flink Operations Playground documentation
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 11 Sep 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/09/11/release-1.8.2.html</link>
<guid isPermaLink="true">/news/2019/09/11/release-1.8.2.html</guid>
</item>

<item>
<title>Flink Community Update - September&#39;19</title>
<description>This has been an exciting, fast-paced year for the Apache Flink community. But with over 10k messages across the mailing lists, 3k Jira tickets and 2k pull requests, it is not easy to keep up with the latest state of the project. Plus everything happening around it. With that in mind, we want to bring back regular community updates to the Flink blog.

The first post in the series takes you on an little detour across the year, to freshen up and make sure you&#39;re all up to date.

{% toc %}

# The Year (so far) in Flink

Two major versions were released this year: [Flink 1.8](https://flink.apache.org/news/2019/04/09/release-1.8.0.html) and [Flink 1.9](https://flink.apache.org/news/2019/08/22/release-1.9.0.html); paving the way for the goal of making Flink the first framework to seamlessly support stream and batch processing with a single, unified runtime. The [contribution of Blink](https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html) to Apache Flink was key in accelerating the path to this vision and reduced the waiting time for long-pending user requests — such as Hive integration, (better) Python support, the rework of Flink&#39;s Machine Learning library and...fine-grained failure recovery ([FLIP-1](https://cwiki.apache.org/confluence/display/FLINK/FLIP-1+%3A+Fine+Grained+Recovery+from+Task+Failures)).

The 1.9 release was the result of the **biggest community effort the project has experienced so far**, with the number of contributors soaring to 190 (see [The Bigger Picture](#the-bigger-picture)). For a quick overview of the upcoming work for Flink 1.10 (and beyond), have a look at the updated [roadmap](https://flink.apache.org/roadmap.html)!

## Integration of the Chinese-speaking community

As the number of Chinese-speaking Flink users rapidly grows, the community is working on translating resources and creating dedicated spaces for discussion to invite and include these users in the wider Flink community. Part of the ongoing work is described in [FLIP-35](https://cwiki.apache.org/confluence/display/FLINK/FLIP-35%3A+Support+Chinese+Documents+and+Website) and has resulted in:

* A new user mailing list (user-zh@f.a.o) dedicated to Chinese-speakers.
&lt;p&gt;&lt;/p&gt;
* A Chinese translation of the Apache Flink [website](https://flink.apache.org/zh/) and [documentation](https://ci.apache.org/projects/flink/flink-docs-master/zh/).
&lt;p&gt;&lt;/p&gt;
* Multiple meetups organized all over China, with the biggest one reaching a whopping number of 500+ participants. Some of these meetups were also organized in collaboration with communities from other projects, like Apache Pulsar and Apache Kafka.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-09-05-flink-community-update/2019-09-05-flink-community-update_3.png&quot; width=&quot;800px&quot; alt=&quot;China Meetup&quot;/&gt;
&lt;/center&gt;

In case you&#39;re interested in knowing more about this work in progress, Robert Metzger and Fabian Hueske will be diving into &quot;Inviting Apache Flink&#39;s Chinese User Community&quot; at the upcoming ApacheCon Europe 2019 (see [Upcoming Flink Community Events](#upcoming-flink-community-events)).

## Improving Flink&#39;s Documentation

Besides the translation effort, the community has also been working quite hard on a **Flink docs overhaul**. The main goals are to:

 * Organize and clean-up the structure of the docs;
 &lt;p&gt;&lt;/p&gt;
 * Align the content with the overall direction of the project;
 &lt;p&gt;&lt;/p&gt;
 * Improve the _getting-started_ material and make the content more accessible to different levels of Flink experience. 

Given that there has been some confusion in the past regarding unclear definition of core Flink concepts, one of the first completed efforts was to introduce a [Glossary](https://ci.apache.org/projects/flink/flink-docs-release-1.9/concepts/glossary.html#glossary) in the docs. To get up to speed with the roadmap for the remainder efforts, you can refer to [FLIP-42](https://cwiki.apache.org/confluence/display/FLINK/FLIP-42%3A+Rework+Flink+Documentation) and the corresponding [umbrella Jira ticket](https://issues.apache.org/jira/browse/FLINK-12639).

## Adjusting the Contribution Process and Experience

The [guidelines](https://flink.apache.org/contributing/how-to-contribute.html) to contribute to Apache Flink have been reworked on the website, in an effort to lower the entry barrier for new contributors and reduce the overall friction in the contribution process. In addition, the Flink community discussed and adopted [bylaws](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=120731026) to help the community collaborate and coordinate more smoothly.

For code contributors, a [Code Style and Quality Guide](https://flink.apache.org/contributing/code-style-and-quality-preamble.html) that captures the expected standards for contributions was also added to the &quot;Contributing&quot; section of the Flink website.

It&#39;s important to stress that **contributions are not restricted to code**. Non-code contributions such as mailing list support, documentation work or organization of community events are equally as important to the development of the project and highly encouraged.

## New Committers and PMC Members

The Apache Flink community has welcomed **5 new Committers** and **4 PMC (Project Management Committee) Members** in 2019, so far:

### New PMC Members
	Jincheng Sun, Kete (Kurt) Young, Kostas Kloudas, Thomas Weise

### New Committers
	Andrey Zagrebin, Hequn, Jiangjie (Becket) Qin, Rong Rong, Zhijiang Wang

Congratulations and thank you for your hardworking commitment to Flink!

# The Bigger Picture

Flink continues to push the boundaries of (stream) data processing, and the community is proud to see an ever-increasingly diverse set of contributors, users and technologies join the ecosystem. 

In the timeframe of three releases, the project jumped from **112 to 190 contributors**, also doubling down on the number of requested changes and improvements. To top it off, the Flink GitHub repository recently reached the milestone of **10k stars**, all the way up from the incubation days in 2014.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-09-05-flink-community-update/2019-09-05-flink-community-update_1.png&quot; width=&quot;1000px&quot; alt=&quot;GitHub&quot;/&gt;
&lt;/center&gt;

The activity across the user@ and dev@&lt;sup&gt;1&lt;/sup&gt; mailing lists shows a healthy heartbeat, and the gradual ramp up of user-zh@ suggests that this was a well-received community effort. Looking at the numbers for the same period in 2018, the dev@ mailing list has seen the biggest surge in activity, with an average growth of **2.5x in the number of messages and distinct users** — a great reflection of the hyperactive pace of development of the Flink codebase.

&lt;img style=&quot;float: right;&quot; src=&quot;{{ site.baseurl }}/img/blog/2019-09-05-flink-community-update/2019-09-05-flink-community-update_2.png&quot; width=&quot;420px&quot; alt=&quot;Mailing Lists&quot;/&gt;

In support of these observations, the report for the financial year of 2019 from the Apache Software Foundation (ASF) features Flink as one of the most thriving open source projects, with mentions for: 

* Most Active Visits and Downloads
&lt;p&gt;&lt;/p&gt;
* Most Active Sources: Visits
&lt;p&gt;&lt;/p&gt;
* Most Active Sources: Clones
&lt;p&gt;&lt;/p&gt;
* Top Repositories by Number of Commits
&lt;p&gt;&lt;/p&gt;
* Top Most Active Apache Mailing Lists (user@ and dev@)

Hats off to our fellows at Apache Beam for an astounding year, too! For more detailed insights, check the [full report](https://s3.amazonaws.com/files-dist/AnnualReports/FY2018%20Annual%20Report.pdf).
&lt;p&gt;&lt;/p&gt;
&lt;sup&gt;1. Excluding messages from &quot;jira@apache.org&quot;.&lt;/sup&gt;

# Upcoming Events

As the conference and meetup season ramps up again, here are some events to keep an eye out for talks about Flink and opportunities to mingle with the wider stream processing community.

### North America

* [Conference] **[Strata Data Conference 2019](https://conferences.oreilly.com/strata/strata-ny)**, September 23-26, New York, USA
  &lt;p&gt;&lt;/p&gt;
* [Meetup] **[Apache Flink Bay Area Meetup](https://www.meetup.com/Bay-Area-Apache-Flink-Meetup/events/262680261/)**, September 24, San Francisco, USA
  &lt;p&gt;&lt;/p&gt;
* [Conference] **[Scale By The Bay 2019](https://www.meetup.com/Bay-Area-Apache-Flink-Meetup/events/262680261/)**, November 13-15, San Francisco, USA

### Europe

* [Meetup] **[Apache Flink London Meetup](https://www.meetup.com/Apache-Flink-London-Meetup/events/264123672)**, September 23, London, UK 
	&lt;p&gt;&lt;/p&gt;
* [Conference] **[Flink Forward Europe 2019](https://europe-2019.flink-forward.org)**, October 7-9, Berlin, Germany 
	&lt;p&gt;&lt;/p&gt;
	* The next edition of Flink Forward Europe is around the corner and the [program](https://europe-2019.flink-forward.org/conference-program) has been announced, featuring 70+ talks as well as panel discussions and interactive &quot;Ask Me Anything&quot; sessions with core Flink committers. If you&#39;re looking to learn more about Flink and share your experience with other community members, there really is [no better place]((https://vimeo.com/296403091)) than Flink Forward!

	* **Note:** if you are a **committer for any Apache project**, you can **get a free ticket** by registering with your Apache email address and using the discount code: *FFEU19-ApacheCommitter*.
&lt;p&gt;&lt;/p&gt;
* [Conference] **[ApacheCon Berlin 2019](https://aceu19.apachecon.com/)**, October 22-24, Berlin, Germany
&lt;p&gt;&lt;/p&gt;
* [Conference] **[Data2Day 2019](https://www.data2day.de/)**, October 22-24, Ludwigshafen, Germany
&lt;p&gt;&lt;/p&gt;
* [Conference] **[Big Data Tech Warsaw 2020](https://bigdatatechwarsaw.eu)**, February 7, Warsaw, Poland
	&lt;p&gt;&lt;/p&gt;
	* The Call For Presentations (CFP) is now [open](https://bigdatatechwarsaw.eu/cfp/).

### Asia

* [Conference] **[Flink Forward Asia 2019](https://m.aliyun.com/markets/aliyun/developer/ffa2019)**, November 28-30, Beijing, China
	&lt;p&gt;&lt;/p&gt;
	* The second edition of Flink Forward Asia is also happening later this year, in Beijing, and the CFP is [open](https://developer.aliyun.com/special/ffa2019) until September 20.

If you&#39;d like to keep a closer eye on what’s happening in the community, subscribe to the [community mailing list](https://flink.apache.org/community.html#mailing-lists) to get fine-grained weekly updates, upcoming event announcements and more. Also, please reach out if you&#39;re interested in organizing or being part of Flink events in your area!</description>
<pubDate>Tue, 10 Sep 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/09/10/community-update.html</link>
<guid isPermaLink="true">/news/2019/09/10/community-update.html</guid>
</item>

<item>
<title>Apache Flink 1.9.0 Release Announcement</title>
<description>The Apache Flink community is proud to announce the release of Apache Flink
1.9.0.

The Apache Flink project&#39;s goal is to develop a stream processing system to
unify and power many forms of real-time and offline data processing
applications as well as event-driven applications. In this release, we have
made a huge step forward in that effort, by integrating Flink’s stream and
batch processing capabilities under a single, unified runtime.

Significant features on this path are batch-style recovery for batch jobs and
a preview of the new Blink-based query engine for Table API and SQL queries.
We are also excited to announce the availability of the State Processor API,
which is one of the most frequently requested features and enables users to
read and write savepoints with Flink DataSet jobs. Finally, Flink 1.9 includes
a reworked WebUI and previews of Flink’s new Python Table API and its
integration with the Apache Hive ecosystem.

This blog post describes all major new features and improvements, important
changes to be aware of and what to expect moving forward. For more details,
check the [complete release
changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12344601).

The binary distribution and source artifacts for this release are now
available via the [Downloads](https://flink.apache.org/downloads.html) page of
the Flink project, along with the updated
[documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.9/).
Flink 1.9 is API-compatible with previous 1.x releases for APIs annotated with
the `@Public` annotation.

Please feel encouraged to download the release and share your thoughts with
the community through the Flink [mailing
lists](https://flink.apache.org/community.html#mailing-lists) or
[JIRA](https://issues.apache.org/jira/projects/FLINK/summary). As always,
feedback is very much appreciated!


{% toc %}


## New Features and Improvements


### Fine-grained Batch Recovery (FLIP-1)

The time to recover a batch (DataSet, Table API and SQL) job from a task
failure was significantly reduced. Until Flink 1.9, task failures in batch
jobs were recovered by canceling all tasks and restarting the whole job, i.e,
the job was started from scratch and all progress was voided. With this
release, Flink can be configured to limit the recovery to only those tasks
that are in the same **failover region**. A failover region is the set of
tasks that are connected via pipelined data exchanges. Hence, the
batch-shuffle connections of a job define the boundaries of its failover
regions. More details are available in
[FLIP-1](https://cwiki.apache.org/confluence/display/FLINK/FLIP-1+%3A+Fine+Grained+Recovery+from+Task+Failures).
![alt_text]({{site.baseurl}}/img/blog/release-19-flip1.png &quot;Fine-grained Batch
Recovery&quot;) 

To use this new failover strategy, you need to do the following
settings:

 * Make sure you have the entry `jobmanager.execution.failover-strategy:
   region` in your `flink-conf.yaml`.

**Note:** The configuration of the 1.9 distribution has that entry by default,
  but when reusing a configuration file from previous setups, you have to add
  it manually.

Moreover, you need to set the `ExecutionMode` of batch jobs in the
`ExecutionConfig` to `BATCH` to configure that data shuffles are not pipelined
and jobs have more than one failover region.

The &quot;Region&quot; failover strategy also improves the recovery of “embarrassingly
parallel” streaming jobs, i.e., jobs without any shuffle like keyBy() or
rebalance. When such a job is recovered, only the tasks of the affected
pipeline (failover region) are restarted. For all other streaming jobs, the
recovery behavior is the same as in prior Flink versions.


### State Processor API (FLIP-43)

Up to Flink 1.9, accessing the state of a job from the outside was limited to
the (still) experimental [Queryable
State](https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/state/queryable_state.html).
This release introduces a new, powerful library to read, write and modify
state snapshots using the batch DataSet API. In practice, this means:

 * Flink job state can be bootstrapped by reading data from external systems,
   such as external databases, and converting it into a savepoint.
 * State in savepoints can be queried using any of Flink’s batch APIs
   (DataSet, Table, SQL), for example to analyze relevant state patterns or
   check for discrepancies in state that can support application auditing or
   troubleshooting.
 * The schema of state in savepoints can be migrated offline, compared to the
   previous approach requiring online migration on schema access.
 * Invalid data in savepoints can be identified and corrected.

The new State Processor API covers all variations of snapshots: savepoints,
full checkpoints and incremental checkpoints. More details are available in
[FLIP-43](https://cwiki.apache.org/confluence/display/FLINK/FLIP-43%3A+State+Processor+API)


### Stop-with-Savepoint (FLIP-34)

[Cancelling with a
savepoint](https://ci.apache.org/projects/flink/flink-docs-stable/ops/state/savepoints.html#operations)
is a common operation for stopping/restarting, forking or updating Flink jobs.
However, the existing implementation did not guarantee output persistence to
external storage systems for exactly-once sinks. To improve the end-to-end
semantics when stopping a job, Flink 1.9 introduces a new `SUSPEND` mode to
stop a job with a savepoint that is consistent with the emitted data.
You can suspend a job with Flink’s CLI client as follows:

```
bin/flink stop -p [:targetDirectory] :jobId
```

The final job state is set to `FINISHED` on success, allowing
users to detect failures of the requested operation. 

More details are available in
[FLIP-34](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=103090212)



### Flink WebUI Rework

After a
[discussion](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/DISCUSS-Change-underlying-Frontend-Architecture-for-Flink-Web-Dashboard-td24902.html)
about modernizing the internals of Flink’s WebUI, this component was
reconstructed using the latest stable version of Angular — basically, a bump
from Angular 1.x to 7.x. The redesigned version is the default in 1.9.0,
however there is a link to switch to the old WebUI.

&lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm-6&quot;&gt; &lt;span&gt;&lt;img class=&quot;thumbnail&quot;
    src=&quot;{{site.baseurl}}/img/blog/release-19-web1.png&quot; /&gt;&lt;/span&gt; &lt;/div&gt; &lt;div
    class=&quot;col-sm-6&quot;&gt; &lt;span&gt;&lt;img class=&quot;thumbnail&quot;
    src=&quot;{{site.baseurl}}/img/blog/release-19-web2.png&quot; /&gt;&lt;/span&gt; &lt;/div&gt;
    &lt;/div&gt;

**Note:** Moving forward, feature parity for the old version of the WebUI 
will not be guaranteed.


### Preview of the new Blink SQL Query Processor

Following the [donation of
Blink]({{site.baseurl}}/news/2019/02/13/unified-batch-streaming-blink.html) to
Apache Flink, the community worked on integrating Blink’s query optimizer and
runtime for the Table API and SQL. As a first step, we refactored the
monolithic `flink-table` module into smaller modules
([FLIP-32](https://cwiki.apache.org/confluence/display/FLINK/FLIP-32%3A+Restructure+flink-table+for+future+contributions)).
This resulted in a clear separation of and well-defined interfaces between the
Java and Scala API modules and the optimizer and runtime modules.

&lt;span&gt;&lt;img style=&quot;width:50%&quot;
src=&quot;{{site.baseurl}}/img/blog/release-19-stack.png&quot; /&gt;&lt;/span&gt;

Next, we extended Blink’s planner to implement the new optimizer interface
such that there are now two pluggable query processors to execute Table API
and SQL statements: the pre-1.9 Flink processor and the new Blink-based query
processor. The Blink-based query processor offers better SQL coverage (full TPC-H
coverage in 1.9, TPC-DS coverage is planned for the next release) and improved
performance for batch queries as the result of more extensive query
optimization (cost-based plan selection and more optimization rules), improved
code-generation, and tuned operator implementations.
The Blink-based query processor also provides a more powerful streaming runner,
with some new features (e.g. dimension table join, TopN, deduplication) and 
optimizations to solve data-skew in aggregation and more useful built-in
functions.

**Note:** The semantics and set of supported operations of the query
processors are mostly, but not fully aligned.

However, the integration of Blink’s query processor is not fully completed
yet. Therefore, the pre-1.9 Flink processor is still the default processor in
Flink 1.9 and recommended for production settings. You can enable the Blink
processor by configuring it via the `EnvironmentSettings` when creating a
`TableEnvironment`. The selected processor must be on the classpath of the
executing Java process. For cluster setups, both query processors are
automatically loaded with the default configuration. When running a query from
your IDE you need to explicitly [add a planner
dependency](https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/table/#table-program-dependencies)
to your project.


#### **Other Improvements to the Table API and SQL**

Besides the exciting progress around the Blink planner, the community worked
on a whole set of other improvements to these interfaces, including:

 * **Scala-free Table API and SQL for Java users
   ([FLIP-32](https://cwiki.apache.org/confluence/display/FLINK/FLIP-32%3A+Restructure+flink-table+for+future+contributions))**

   As part of the refactoring and splitting of the flink-table module, two
   separate API modules for Java and Scala were created. For Scala users,
   nothing really changes, but Java users can use the Table API and/or SQL now
   without pulling in a Scala dependency.

 * **Rework of the Table API Type System**
   **([FLIP-37](https://cwiki.apache.org/confluence/display/FLINK/FLIP-37%3A+Rework+of+the+Table+API+Type+System))**

   The community implemented a [new data type
   system](https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/table/types.html#data-types)
   to detach the Table API from Flink’s
   [TypeInformation](https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/types_serialization.html#flinks-typeinformation-class)
   class and improve its compliance with the SQL standard. This is still a
   work in progress and expected to be completed in the next release. In
   Flink 1.9, UDFs are―among other things―not ported to the new type system
   yet.

 * **Multi-column and Multi-row Transformations for Table API**
   **([FLIP-29](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=97552739))**

   The functionality of the Table API was extended with a set of
   transformations that support multi-row and/or multi-column inputs and
   outputs. These transformations significantly ease the implementation of
   processing logic that would be cumbersome to implement with relational
   operators.

 * **New, Unified Catalog APIs**
   **([FLIP-30](https://cwiki.apache.org/confluence/display/FLINK/FLIP-30%3A+Unified+Catalog+APIs))**

   We reworked the catalog APIs to store metadata and unified the handling of
   internal and external catalogs. This effort was mainly initiated as a
   prerequisite for the Hive integration (see below), but improves the overall
   convenience of managing catalog metadata in Flink. Besides improving the
   catalog interfaces, we also extended their functionality. Previously table
   definitions for Table API or SQL queries were volatile. With Flink 1.9, the
   metadata of tables which are registered with a SQL DDL statement can be
   persisted in a catalog. This means you can add a table that is backed by a
   Kafka topic to a Metastore catalog and from then on query this table
   whenever your catalog is connected to Metastore.

 * **DDL Support in the SQL API
   ([FLINK-10232](https://issues.apache.org/jira/browse/FLINK-10232))**

   Up to this point, Flink SQL only supported DML statements (e.g. `SELECT`,
   `INSERT`). External tables (table sources and sinks) had to be registered
   via Java/Scala code or configuration files. For 1.9, we added support for
   SQL DDL statements to register and remove tables and views (`CREATE TABLE,
   DROP TABLE)`. However, we did not add
   stream-specific syntax extensions to define timestamp extraction and
   watermark generation, yet. Full support for streaming use cases is planned
   for the next release.


### Preview of Full Hive Integration (FLINK-10556)

Apache Hive is widely used in Hadoop’s ecosystem to store and query large
amounts of structured data. Besides being a query processor, Hive features a
catalog called Metastore to manage and organize large datasets. A common
integration point for query processors is to integrate with Hive’s Metastore
in order to be able to tap into the data managed by Hive.

Recently, the community started implementing an external catalog for Flink’s
Table API and SQL that connects to Hive’s Metastore. In Flink 1.9, users will
be able to query and process all data that is stored in Hive. As described
earlier, you will also be able to persist metadata of Flink tables in Metastore.
Moreover, the Hive integration includes support to use Hive’s UDFs in Flink
Table API or SQL queries. More details are available in
[FLINK-10556](https://issues.apache.org/jira/browse/FLINK-10556).

While, previously, table definitions for Table API or SQL queries were always
volatile, the new catalog connector additionally allows persisting a table in
Metastore that is created with a SQL DDL statement (see above). This means
that you connect to Metastore and register a table that is, for example,
backed by a Kafka topic. From now on, you can query that table whenever your
catalog is connected to Metastore.

Please note that the Hive support in Flink 1.9 is experimental. We are
planning to stabilize these features for the next release and are looking
forward to your feedback.


### Preview of the new Python Table API (FLIP-38)

This release also introduces a first version of a Python Table API
([FLIP-38](https://cwiki.apache.org/confluence/display/FLINK/FLIP-38%3A+Python+Table+API)).
This marks the start towards our goal of bringing
full-fledged Python support to Flink. The feature was designed as a slim
Python API wrapper around the Table API, basically translating Python Table
API method calls into Java Table API calls. In the initial version that ships
with Flink 1.9, the Python Table API does not support UDFs yet, but just
standard relational operations. Support for UDFs implemented in Python is on
the roadmap for future releases.

If you’d like to try the new Python API, you have to manually [install
PyFlink](https://ci.apache.org/projects/flink/flink-docs-release-1.9/flinkDev/building.html#build-pyflink).
From there, you can have a look at [this
walkthrough](https://ci.apache.org/projects/flink/flink-docs-release-1.9/tutorials/python_table_api.html)
or explore it on your own. The [community is currently
working](http://apache-flink-mailing-list-archive.1008284.n3.nabble.com/VOTE-Publish-the-PyFlink-into-PyPI-td31201.html)
on preparing a `pyflink` Python package that will be made available for
installation via `pip`.


## Important Changes

 * The Table API and SQL are now part of the default configuration of the
   Flink distribution. Before, the Table API and SQL had to be enabled by
   moving the corresponding JAR file from ./opt to ./lib.
 * The machine learning library (flink-ml) has been removed in preparation for
   [FLIP-39](https://docs.google.com/document/d/1StObo1DLp8iiy0rbukx8kwAJb0BwDZrQrMWub3DzsEo/edit).
 * The old DataSet and DataStream Python APIs have been removed in favor of
   [FLIP-38](https://cwiki.apache.org/confluence/display/FLINK/FLIP-38%3A+Python+Table+API).
 * Flink can be compiled and run on Java 9. Note that certain components
   interacting with external systems (connectors, filesystems, reporters) may
   not work since the respective projects may have skipped Java 9 support.


## Release Notes

Please review the [release
notes](https://ci.apache.org/projects/flink/flink-docs-release-1.9/release-notes/flink-1.9.html)
for a more detailed list of changes and new features if you plan to upgrade
your Flink setup to Flink 1.9.0.


## List of Contributors

We would like to thank all contributors who have made this release possible:

Abdul Qadeer (abqadeer), Aitozi, Alberto Romero, Aleksey Pak, Alexander
Fedulov, Alice Yan, Aljoscha Krettek, Aloys, Andrew Duffy, Andrey Zagrebin,
Ankur, Artsem Semianenka, Benchao Li, Biao Liu, Bo WANG, Bowen L, Chesnay
Schepler, Clark Yang, Congxian Qiu, Cristian, Danny Chan, David Moravek, Dawid
Wysakowicz, Dian Fu, EronWright, Fabian Hueske, Fabio Lombardelli, Fokko
Driesprong, Gao Yun, Gary Yao, Gen Luo, Gyula Fora, Hequn Cheng,
Hongtao Zhang, Huang Xingbo, HuangXingBo, Hugo Da Cruz Louro, Humberto
Rodríguez A, Hwanju Kim, Igal Shilman, Jamie Grier, Jark Wu, Jason, Jasper
Yue, Jeff Zhang, Jiangjie (Becket) Qin, Jiezhi.G, Jincheng Sun, Jing Zhang,
Jingsong Lee, Juan Gentile, Jungtaek Lim, Kailash Dayanand, Kevin
Bohinski, Konstantin Knauf, Konstantinos Papadopoulos, Kostas Kloudas, Kurt
Young, Lakshmi, Lakshmi Gururaja Rao, Leeviiii, LouisXu, Maximilian Michels,
Nico Kruber, Niels Basjes, Paul Lam, PengFei Li, Peter Huang, Pierre Zemb,
Piotr Nowojski, Piyush Narang, Richard Deurwaarder, Robert Metzger, Robert
Stoll, Romano Vacca, Rong Rong, Rui Li, Ryantaocer, Scott Mitchell, Seth
Wiesman, Shannon Carey, Shimin Yang, Stefan Richter, Stephan Ewen, Stephen
Connolly, Steven Wu, SuXingLee, TANG Wen-hui, Thomas Weise, Till Rohrmann,
Timo Walther, Tom Goong, TsReaper, Tzu-Li (Gordon) Tai, Ufuk Celebi,
Victor Wong, WangHengwei, Wei Zhong, WeiZhong94, Xintong Song, Xpray,
XuQianJin-Stars, Xuefu Zhang, Xupingyong, Yangze Guo, Yu Li, Yun Gao, Yun
Tang, Zhanchun Zhang, Zhenghua Gao, Zhijiang, Zhu Zhu, Zili
Chen, aloys, arganzheng, azagrebin, bd2019us, beyond1920, biao.liub,
blueszheng, boshu Zheng, chenqi, chummyhe89, chunpinghe, dcadmin,
dianfu, godfrey he, guanghui01.rong, hehuiyuan, hello, hequn8128, 
jackyyin, joongkeun.yang, klion26, lamber-ken, leesf, liguowei,
lincoln-lil, liyafan82, luoqi, mans2singh, maqingxiang, maxin, mjl, okidogi,
ozan, potseluev, qiangsi.lq, qiaoran, robbinli, shaoxuan-wang, shengqian.zhou,
shenlang.sl, shuai-xu, sunhaibotb, tianchen, tianchen92,
tison, tom_gong, vinoyang, vthinkxie, wanggeng3, wenhuitang, winifredtamg,
xl38154, xuyang1706, yangfei5, yanghua, yuzhao.cyz,
zhangxin516, zhangxinxing, zhaofaxian, zhijiang, zjuwangg, 林小铂,
黄培松, 时无两丶.
</description>
<pubDate>Thu, 22 Aug 2019 02:30:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/08/22/release-1.9.0.html</link>
<guid isPermaLink="true">/news/2019/08/22/release-1.9.0.html</guid>
</item>

<item>
<title>Flink Network Stack Vol. 2: Monitoring, Metrics, and that Backpressure Thing</title>
<description>&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{padding:10px 10px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;background-color:#eff0f1;}
.tg .tg-wide{padding:10px 30px;}
.tg .tg-top{vertical-align:top}
.tg .tg-topcenter{text-align:center;vertical-align:top}
.tg .tg-center{text-align:center;vertical-align:center}
&lt;/style&gt;

In a [previous blog post]({{ site.baseurl }}/2019/06/05/flink-network-stack.html), we presented how Flink’s network stack works from the high-level abstractions to the low-level details. This second blog post in the series of network stack posts extends on this knowledge and discusses monitoring network-related metrics to identify effects such as backpressure or bottlenecks in throughput and latency. Although this post briefly covers what to do with backpressure, the topic of tuning the network stack will be further examined in a future post. If you are unfamiliar with the network stack we highly recommend reading the [network stack deep-dive]({{ site.baseurl }}/2019/06/05/flink-network-stack.html) first and then continuing here.

{% toc %}

## Monitoring

Probably the most important part of network monitoring is [monitoring backpressure]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring/back_pressure.html), a situation where a system is receiving data at a higher rate than it can process¹. Such behaviour will result in the sender being backpressured and may be caused by two things:

* The receiver is slow.&lt;br&gt;
  This can happen because the receiver is backpressured itself, is unable to keep processing at the same rate as the sender, or is temporarily blocked by garbage collection, lack of system resources, or I/O.

 * The network channel is slow.&lt;br&gt;
  Even though in such case the receiver is not (directly) involved, we call the sender backpressured due to a potential oversubscription on network bandwidth shared by all subtasks running on the same machine. Beware that, in addition to Flink’s network stack, there may be more network users, such as sources and sinks, distributed file systems (checkpointing, network-attached storage), logging, and metrics. A previous [capacity planning blog post](https://www.ververica.com/blog/how-to-size-your-apache-flink-cluster-general-guidelines) provides some more insights.

&lt;sup&gt;1&lt;/sup&gt; In case you are unfamiliar with backpressure and how it interacts with Flink, we recommend reading through [this blog post on backpressure](https://www.ververica.com/blog/how-flink-handles-backpressure) from 2015.


&lt;br&gt;
If backpressure occurs, it will bubble upstream and eventually reach your sources and slow them down. This is not a bad thing per-se and merely states that you lack resources for the current load. However, you may want to improve your job so that it can cope with higher loads without using more resources. In order to do so, you need to find (1) where (at which task/operator) the bottleneck is and (2) what is causing it. Flink offers two mechanisms for identifying where the bottleneck is:

 * directly via Flink’s web UI and its backpressure monitor, or
 * indirectly through some of the network metrics.

Flink’s web UI is likely the first entry point for a quick troubleshooting but has some disadvantages that we will explain below. On the other hand, Flink’s network metrics are better suited for continuous monitoring and reasoning about the exact nature of the bottleneck causing backpressure. We will cover both in the sections below. In both cases, you need to identify the origin of backpressure from the sources to the sinks. Your starting point for the current and future investigations will most likely be the operator after the last one that is experiencing backpressure. This specific operator is also highly likely to cause the backpressure in the first place.


### Backpressure Monitor

The [backpressure monitor]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring/back_pressure.html) is only exposed via Flink’s web UI². Since it&#39;s an active component that is only triggered on request, it is currently not available via metrics. The backpressure monitor samples the running tasks&#39; threads on all TaskManagers via `Thread.getStackTrace()` and computes the number of samples where tasks were blocked on a buffer request. These tasks were either unable to send network buffers at the rate they were produced, or the downstream task(s) were slow at processing them and gave no credits for sending. The backpressure monitor will show the ratio of blocked to total requests. Since some backpressure is considered normal / temporary, it will show a status of

* &lt;span style=&quot;color:green&quot;&gt;OK&lt;/span&gt; for `ratio ≤ 0.10`,
* &lt;span style=&quot;color:orange&quot;&gt;LOW&lt;/span&gt; for `0.10 &lt; Ratio ≤ 0.5`, and
* &lt;span style=&quot;color:red&quot;&gt;HIGH&lt;/span&gt; for `0.5 &lt; Ratio ≤ 1`.

Although you can tune things like the refresh-interval, the number of samples, or the delay between samples, normally, you would not need to touch these since the defaults already give good-enough results.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-07-23-network-stack-2/back_pressure_sampling_high.png&quot; width=&quot;600px&quot; alt=&quot;Backpressure sampling:high&quot;/&gt;
&lt;/center&gt;

&lt;sup&gt;2&lt;/sup&gt; You may also access the backpressure monitor via the REST API: `/jobs/:jobid/vertices/:vertexid/backpressure`


&lt;br&gt;
The backpressure monitor can help you find where (at which task/operator) backpressure originates from. However, it does not support you in further reasoning about the causes of it. Additionally, for larger jobs or higher parallelism, the backpressure monitor becomes too crowded to use and may also take some time to gather all information from all TaskManagers. Please also note that sampling may affect your running job’s performance.

## Network Metrics

[Network]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring/metrics.html#network) and [task I/O]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring/metrics.html#io) metrics are more lightweight than the backpressure monitor and are continuously published for each running job. We can leverage those and get even more insights, not only for backpressure monitoring. The most relevant metrics for users are:


* **&lt;span style=&quot;color:orange&quot;&gt;up to Flink 1.8:&lt;/span&gt;** `outPoolUsage`, `inPoolUsage`&lt;br&gt;
  An estimate on the ratio of buffers used vs. buffers available in the respective local buffer pools.
  While interpreting `inPoolUsage` in Flink 1.5 - 1.8 with credit-based flow control, please note that this only relates to floating buffers (exclusive buffers are not part of the pool).

* **&lt;span style=&quot;color:green&quot;&gt;Flink 1.9 and above:&lt;/span&gt;** `outPoolUsage`, `inPoolUsage`, `floatingBuffersUsage`, `exclusiveBuffersUsage`&lt;br&gt;
  An estimate on the ratio of buffers used vs. buffers available in the respective local buffer pools.
  Starting with Flink 1.9, `inPoolUsage` is the sum of `floatingBuffersUsage` and `exclusiveBuffersUsage`.

* `numRecordsOut`, `numRecordsIn`&lt;br&gt;
  Each metric comes with two scopes: one scoped to the operator and one scoped to the subtask. For network monitoring, the subtask-scoped metric is relevant and shows the total number of records it has sent/received. You may need to further look into these figures to extract the number of records within a certain time span or use the equivalent `…PerSecond` metrics.

* `numBytesOut`, `numBytesInLocal`, `numBytesInRemote`&lt;br&gt;
  The total number of bytes this subtask has emitted or read from a local/remote source. These are also available as meters via `…PerSecond` metrics.

* `numBuffersOut`, `numBuffersInLocal`, `numBuffersInRemote`&lt;br&gt;
  Similar to `numBytes…` but counting the number of network buffers.

&lt;div class=&quot;alert alert-warning&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-warning&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Warning&lt;/span&gt;
For the sake of completeness and since they have been used in the past, we will briefly look at the `outputQueueLength` and `inputQueueLength` metrics. These are somewhat similar to the `[out,in]PoolUsage` metrics but show the number of buffers sitting in a sender subtask’s output queues and in a receiver subtask’s input queues, respectively. Reasoning about absolute numbers of buffers, however, is difficult and there is also a special subtlety with local channels: since a local input channel does not have its own queue (it works with the output queue directly), its value will always be `0` for that channel (see [FLINK-12576](https://issues.apache.org/jira/browse/FLINK-12576)) and for the case where you only have local input channels, then `inputQueueLength = 0`.

Overall, **we discourage the use of** `outputQueueLength` **and** `inputQueueLength` because their interpretation highly depends on the current parallelism of the operator and the configured numbers of exclusive and floating buffers. Instead, we recommend using the various `*PoolUsage` metrics which even reveal more detailed insight.
&lt;/div&gt;


&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
 If you reason about buffer usage, please keep the following in mind:

* Any outgoing channel which has been used at least once will always occupy one buffer (since Flink 1.5).
  * **&lt;span style=&quot;color:orange&quot;&gt;up to Flink 1.8:&lt;/span&gt;** This buffer (even if empty!) was always counted as a backlog of 1 and thus receivers tried to reserve a floating buffer for it.
  * **&lt;span style=&quot;color:green&quot;&gt;Flink 1.9 and above:&lt;/span&gt;** A buffer is only counted in the backlog if it is ready for consumption, i.e. it is full or was flushed (see FLINK-11082)
* The receiver will only release a received buffer after deserialising the last record in it.
&lt;/div&gt;

The following sections make use of and combine these metrics to reason about backpressure and resource usage / efficiency with respect to throughput. A separate section will detail latency related metrics.


### Backpressure

Backpressure may be indicated by two different sets of metrics: (local) buffer pool usages as well as input/output queue lengths. They provide a different level of granularity but, unfortunately, none of these are exhaustive and there is room for interpretation. Because of the inherent problems with interpreting these queue lengths we will focus on the usage of input and output pools below which also provides more detail.

* **If a subtask’s** `outPoolUsage` **is 100%**, it is backpressured. Whether the subtask is already blocking or still writing records into network buffers depends on how full the buffers are, that the `RecordWriters` are currently writing into.&lt;br&gt;
&lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:orange;&quot;&gt;&lt;/span&gt; This is different to what the backpressure monitor is showing!

* An `inPoolUsage` of 100% means that all floating buffers are assigned to channels and eventually backpressure will be exercised upstream. These floating buffers are in either of the following conditions: they are reserved for future use on a channel due to an exclusive buffer being utilised (remote input channels always try to maintain `#exclusive buffers` credits), they are reserved for a sender’s backlog and wait for data, they may contain data and are enqueued in an input channel, or they may contain data and are being read by the receiver’s subtask (one record at a time).

* **&lt;span style=&quot;color:orange&quot;&gt;up to Flink 1.8:&lt;/span&gt;** Due to [FLINK-11082](https://issues.apache.org/jira/browse/FLINK-11082), an `inPoolUsage` of 100% is quite common even in normal situations.

* **&lt;span style=&quot;color:green&quot;&gt;Flink 1.9 and above:&lt;/span&gt;** If `inPoolUsage` is constantly around 100%, this is a strong indicator for exercising backpressure upstream.

The following table summarises all combinations and their interpretation. Bear in mind, though, that backpressure may be minor or temporary (no need to look into it), on particular channels only, or caused by other JVM processes on a particular TaskManager, such as GC, synchronisation, I/O, resource shortage, instead of a specific subtask.

&lt;center&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-center&quot;&gt;&lt;code&gt;outPoolUsage&lt;/code&gt; low&lt;/th&gt;
    &lt;th class=&quot;tg-center&quot;&gt;&lt;code&gt;outPoolUsage&lt;/code&gt; high&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-top&quot;&gt;&lt;code&gt;inPoolUsage&lt;/code&gt; low&lt;/th&gt;
    &lt;td class=&quot;tg-topcenter&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-ok-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:green;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-topcenter&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:orange;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (backpressured, temporary situation: upstream is not backpressured yet or not anymore)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-top&quot; rowspan=&quot;2&quot;&gt;
      &lt;code&gt;inPoolUsage&lt;/code&gt; high&lt;br&gt;
      (&lt;strong&gt;&lt;span style=&quot;color:green&quot;&gt;Flink 1.9+&lt;/span&gt;&lt;/strong&gt;)&lt;/th&gt;
    &lt;td class=&quot;tg-topcenter&quot;&gt;
      if all upstream tasks’&lt;code&gt;outPoolUsage&lt;/code&gt; are low: &lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:orange;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (may eventually cause backpressure)&lt;/td&gt;
    &lt;td class=&quot;tg-topcenter&quot; rowspan=&quot;2&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-remove-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:red;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (backpressured by downstream task(s) or network, probably forwarding backpressure upstream)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-topcenter&quot;&gt;if any upstream task’s&lt;code&gt;outPoolUsage&lt;/code&gt; is high: &lt;span class=&quot;glyphicon glyphicon-remove-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:red;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (may exercise backpressure upstream and may be the source of backpressure)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;br&gt;
We may even reason more about the cause of backpressure by looking at the network metrics of the subtasks of two consecutive tasks:

* If all subtasks of the receiver task have low `inPoolUsage` values and any upstream subtask’s `outPoolUsage` is high, then there may be a network bottleneck causing backpressure.
Since network is a shared resource among all subtasks of a TaskManager, this may not directly originate from this subtask, but rather from various concurrent operations, e.g. checkpoints, other streams, external connections, or other TaskManagers/processes on the same machine.

Backpressure can also be caused by all parallel instances of a task or by a single task instance. The first usually happens because the task is performing some time consuming operation that applies to all input partitions. The latter is usually the result of some kind of skew, either data skew or resource availability/allocation skew. In either case, you can find some hints on how to handle such situations in the [What to do with backpressure?](#span-classlabel-label-info-styledisplay-inline-blockspan-classglyphicon-glyphicon-info-sign-aria-hiddentruespan-what-to-do-with-backpressurespan) box below.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
### &lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Flink 1.9 and above
{:.no_toc}

* If `floatingBuffersUsage` is not 100%, it is unlikely that there is backpressure. If it is 100% and any upstream task is backpressured, it suggests that this input is exercising backpressure on either a single, some or all input channels. To differentiate between those three situations you can use `exclusiveBuffersUsage`:
  * Assuming that `floatingBuffersUsage` is around 100%, the higher the `exclusiveBuffersUsage` the more input channels are backpressured. In an extreme case of `exclusiveBuffersUsage` being close to 100%, it means that all channels are backpressured.

&lt;br&gt;
The relation between `exclusiveBuffersUsage`, `floatingBuffersUsage`, and the upstream tasks&#39; `outPoolUsage` is summarised in the following table and extends on the table above with `inPoolUsage = floatingBuffersUsage + exclusiveBuffersUsage`:

&lt;center&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;code&gt;exclusiveBuffersUsage&lt;/code&gt; low&lt;/th&gt;
    &lt;th&gt;&lt;code&gt;exclusiveBuffersUsage&lt;/code&gt; high&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-top&quot; style=&quot;min-width:33%;&quot;&gt;
      &lt;code&gt;floatingBuffersUsage&lt;/code&gt; low +&lt;br&gt;
      &lt;em&gt;all&lt;/em&gt; upstream &lt;code&gt;outPoolUsage&lt;/code&gt; low&lt;/th&gt;
    &lt;td class=&quot;tg-center&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-ok-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:green;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-center&quot;&gt;-&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-top&quot; style=&quot;min-width:33%;&quot;&gt;
      &lt;code&gt;floatingBuffersUsage&lt;/code&gt; low +&lt;br&gt;
      &lt;em&gt;any&lt;/em&gt; upstream &lt;code&gt;outPoolUsage&lt;/code&gt; high&lt;/th&gt;
    &lt;td class=&quot;tg-center&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-remove-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:red;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (potential network bottleneck)&lt;/td&gt;
    &lt;td class=&quot;tg-center&quot;&gt;-&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-top&quot; style=&quot;min-width:33%;&quot;&gt;
      &lt;code&gt;floatingBuffersUsage&lt;/code&gt; high +&lt;br&gt;
      &lt;em&gt;all&lt;/em&gt; upstream &lt;code&gt;outPoolUsage&lt;/code&gt; low&lt;/th&gt;
    &lt;td class=&quot;tg-center&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:orange;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (backpressure eventually appears on only some of the input channels)&lt;/td&gt;
    &lt;td class=&quot;tg-center&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:orange;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (backpressure eventually appears on most or all of the input channels)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-top&quot; style=&quot;min-width:33%;&quot;&gt;
      &lt;code&gt;floatingBuffersUsage&lt;/code&gt; high +&lt;br&gt;
      any upstream &lt;code&gt;outPoolUsage&lt;/code&gt; high&lt;/th&gt;
    &lt;td class=&quot;tg-center&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-remove-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:red;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (backpressure on only some of the input channels)&lt;/td&gt;
    &lt;td class=&quot;tg-center&quot;&gt;
      &lt;span class=&quot;glyphicon glyphicon-remove-sign&quot; aria-hidden=&quot;true&quot; style=&quot;color:red;font-size:1.5em;&quot;&gt;&lt;/span&gt;&lt;br&gt;
      (backpressure on most or all of the input channels)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;sup&gt;3&lt;/sup&gt; this should not happen

&lt;/div&gt;


### Resource Usage / Throughput

Besides the obvious use of each individual metric mentioned above, there are also a few combinations providing useful insight into what is happening in the network stack:

* Low throughput with frequent `outPoolUsage` values around 100% but low `inPoolUsage` on all receivers is an indicator that the round-trip-time of our credit-notification (depends on your network’s latency) is too high for the default number of exclusive buffers to make use of your bandwidth. Consider increasing the [buffers-per-channel]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#taskmanager-network-memory-buffers-per-channel) parameter or try disabling credit-based flow control to verify.

* Combining `numRecordsOut` and `numBytesOut` helps identifying average serialised record sizes which supports you in capacity planning for peak scenarios.

* If you want to reason about buffer fill rates and the influence of the output flusher, you may combine `numBytesInRemote` with `numBuffersInRemote`. When tuning for throughput (and not latency!), low buffer fill rates may indicate reduced network efficiency. In such cases, consider increasing the buffer timeout.
Please note that, as of Flink 1.8 and 1.9, `numBuffersOut` only increases for buffers getting full or for an event cutting off a buffer (e.g. a checkpoint barrier) and may lag behind. Please also note that reasoning about buffer fill rates on local channels is unnecessary since buffering is an optimisation technique for remote channels with limited effect on local channels.

* You may also separate local from remote traffic using numBytesInLocal and numBytesInRemote but in most cases this is unnecessary.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
### &lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; What to do with Backpressure?
{:.no_toc}

Assuming that you identified where the source of backpressure — a bottleneck — is located, the next step is to analyse why this is happening. Below, we list some potential causes of backpressure from the more basic to the more complex ones. We recommend to check the basic causes first, before diving deeper on the more complex ones and potentially drawing false conclusions.

Please also recall that backpressure might be temporary and the result of a load spike, checkpointing, or a job restart with a data backlog waiting to be processed. In that case, you can often just ignore it. Alternatively, keep in mind that the process of analysing and solving the issue can be affected by the intermittent nature of your bottleneck. Having said that, here are a couple of things to check.

#### System Resources

Firstly, you should check the incriminated machines’ basic resource usage like CPU, network, or disk I/O. If some resource is fully or heavily utilised you can do one of the following:

1. Try to optimise your code. Code profilers are helpful in this case.
2. Tune Flink for that specific resource.
3. Scale out by increasing the parallelism and/or increasing the number of machines in the cluster.

#### Garbage Collection

Oftentimes, performance issues arise from long GC pauses. You can verify whether you are in such a situation by either printing debug GC logs (via -`XX:+PrintGCDetails`) or by using some memory/GC profilers. Since dealing with GC issues is highly application-dependent and independent of Flink, we will not go into details here ([Oracle&#39;s Garbage Collection Tuning Guide](https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/index.html) or [Plumbr’s Java Garbage Collection handbook](https://plumbr.io/java-garbage-collection-handbook) seem like a good start).

#### CPU/Thread Bottleneck

Sometimes a CPU bottleneck might not be visible at first glance if one or a couple of threads are causing the CPU bottleneck while the CPU usage of the overall machine remains relatively low. For instance, a single CPU-bottlenecked thread on a 48-core machine would result in only 2% CPU use. Consider using code profilers for this as they can identify hot threads by showing each threads&#39; CPU usage, for example.

#### Thread Contention

Similarly to the CPU/thread bottleneck issue above, a subtask may be bottlenecked due to high thread contention on shared resources. Again, CPU profilers are your best friend here! Consider looking for synchronisation overhead / lock contention in user code — although adding synchronisation in user code should be avoided and may even be dangerous! Also consider investigating shared system resources. The default JVM’s SSL implementation, for example, can become contented around the shared `/dev/urandom` resource.

#### Load Imbalance

If your bottleneck is caused by data skew, you can try to remove it or mitigate its impact by changing the data partitioning to separate heavy keys or by implementing local/pre-aggregation.

&lt;br&gt;
This list is far from exhaustive. Generally, in order to reduce a bottleneck and thus backpressure, first analyse where it is happening and then find out why. The best place to start reasoning about the “why” is by checking what resources are fully utilised.
&lt;/div&gt;

### Latency Tracking

Tracking latencies at the various locations they may occur is a topic of its own. In this section, we will focus on the time records wait inside Flink’s network stack — including the system’s network connections. In low throughput scenarios, these latencies are influenced directly by the output flusher via the buffer timeout parameter or indirectly by any application code latencies. When processing a record takes longer than expected or when (multiple) timers fire at the same time — and block the receiver from processing incoming records — the time inside the network stack for following records is extended dramatically. We highly recommend adding your own metrics to your Flink job  for better latency tracking in your job’s components and a broader view on the cause of delays.

Flink offers some support for [tracking the latency]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring/metrics.html#latency-tracking) of records passing through the system (outside of user code). However, this is disabled by default (see below why!) and must be enabled by setting a latency tracking interval either in Flink’s [configuration via `metrics.latency.interval`]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#metrics-latency-interval) or via [ExecutionConfig#setLatencyTrackingInterval()]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/api/common/ExecutionConfig.html#setLatencyTrackingInterval-long-). Once enabled, Flink will collect latency histograms based on the [granularity defined via `metrics.latency.granularity`]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#metrics-latency-granularity):

* `single`: one histogram for each operator subtask
* `operator` (default): one histogram for each combination of source task and operator subtask
* `subtask`: one histogram for each combination of source subtask and operator subtask (quadratic in the parallelism!)

These metrics are collected through special “latency markers”: each source subtask will periodically emit a special record containing the timestamp of its creation. The latency markers then flow alongside normal records while not overtaking them on the wire or inside a buffer queue. However, _a latency marker does not enter application logic_ and is overtaking records there. Latency markers therefore only measure the waiting time between the user code and not a full “end-to-end” latency. User code indirectly influences these waiting times, though!

Since `LatencyMarkers` sit in network buffers just like normal records, they will also wait for the buffer to be full or flushed due to buffer timeouts. When a channel is on high load, there is no added latency by the network buffering data. However, as soon as one channel is under low load, records and latency markers will experience an expected average delay of at most `buffer_timeout / 2`. This delay will add to each network connection towards a subtask and should be taken into account when analysing a subtask’s latency metric.

By looking at the exposed latency tracking metrics for each subtask, for example at the 95th percentile, you should nevertheless be able to identify subtasks which are adding substantially to the overall source-to-sink latency and continue with optimising there.

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
Flink&#39;s latency markers assume that the clocks on all machines in the cluster are in sync. We recommend setting up an automated clock synchronisation service (like NTP) to avoid false latency results.
&lt;/div&gt;

&lt;div class=&quot;alert alert-warning&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-warning&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-warning-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Warning&lt;/span&gt;
Enabling latency metrics can significantly impact the performance of the cluster (in particular for `subtask` granularity) due to the sheer amount of metrics being added as well as the use of histograms which are quite expensive to maintain. It is highly recommended to only use them for debugging purposes.
&lt;/div&gt;


## Conclusion

In the previous sections we discussed how to monitor Flink&#39;s network stack which primarily involves identifying backpressure: where it occurs, where it originates from, and (potentially) why it occurs. This can be executed in two ways: for simple cases and debugging sessions by using the backpressure monitor; for continuous monitoring, more in-depth analysis, and less runtime overhead by using Flink’s task and network stack metrics. Backpressure can be caused by the network layer itself but, in most cases, is caused by some subtask under high load. These two scenarios can be distinguished from one another by analysing the metrics as described above. We also provided some hints at monitoring resource usage and tracking network latencies that may add up from sources to sinks.

Stay tuned for the third blog post in the series of network stack posts that will focus on tuning techniques and anti-patterns to avoid.


</description>
<pubDate>Tue, 23 Jul 2019 15:30:00 +0000</pubDate>
<link>https://flink.apache.org/2019/07/23/flink-network-stack-2.html</link>
<guid isPermaLink="true">/2019/07/23/flink-network-stack-2.html</guid>
</item>

<item>
<title>Apache Flink 1.8.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.8 series.

This release includes more than 40 fixes and minor improvements for Flink 1.8.1. The list below includes a detailed list of all improvements, sub-tasks and bug fixes.

We highly recommend all users to upgrade to Flink 1.8.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.8.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.8.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.8.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:
    
&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10921&#39;&gt;FLINK-10921&lt;/a&gt;] -         Prioritize shard consumers in Kinesis Consumer by event time 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12617&#39;&gt;FLINK-12617&lt;/a&gt;] -         StandaloneJobClusterEntrypoint should default to random JobID for non-HA setups 
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9445&#39;&gt;FLINK-9445&lt;/a&gt;] -         scala-shell uses plain java command
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10455&#39;&gt;FLINK-10455&lt;/a&gt;] -         Potential Kafka producer leak in case of failures
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10941&#39;&gt;FLINK-10941&lt;/a&gt;] -         Slots prematurely released which still contain unconsumed data 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11059&#39;&gt;FLINK-11059&lt;/a&gt;] -         JobMaster may continue using an invalid slot if releasing idle slot meet a timeout
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11107&#39;&gt;FLINK-11107&lt;/a&gt;] -         Avoid memory stateBackend to create arbitrary folders under HA path when no checkpoint path configured
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11897&#39;&gt;FLINK-11897&lt;/a&gt;] -         ExecutionGraphSuspendTest does not wait for all tasks to be submitted
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11915&#39;&gt;FLINK-11915&lt;/a&gt;] -         DataInputViewStream skip returns wrong value
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11987&#39;&gt;FLINK-11987&lt;/a&gt;] -         Kafka producer occasionally throws NullpointerException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12009&#39;&gt;FLINK-12009&lt;/a&gt;] -         Wrong check message about heartbeat interval for HeartbeatServices
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12042&#39;&gt;FLINK-12042&lt;/a&gt;] -         RocksDBStateBackend mistakenly uses default filesystem
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12112&#39;&gt;FLINK-12112&lt;/a&gt;] -         AbstractTaskManagerProcessFailureRecoveryTest process output logging does not work properly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12132&#39;&gt;FLINK-12132&lt;/a&gt;] -         The example in /docs/ops/deployment/yarn_setup.md should be updated due to the change FLINK-2021
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12184&#39;&gt;FLINK-12184&lt;/a&gt;] -         HistoryServerArchiveFetcher isn&amp;#39;t compatible with old version
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12219&#39;&gt;FLINK-12219&lt;/a&gt;] -         Yarn application can&amp;#39;t stop when flink job failed in per-job yarn cluster mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12247&#39;&gt;FLINK-12247&lt;/a&gt;] -         fix NPE when writing an archive file to a FileSystem
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12260&#39;&gt;FLINK-12260&lt;/a&gt;] -         Slot allocation failure by taskmanager registration timeout and race
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12296&#39;&gt;FLINK-12296&lt;/a&gt;] -         Data loss silently in RocksDBStateBackend when more than one operator(has states) chained in a single task 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12297&#39;&gt;FLINK-12297&lt;/a&gt;] -         Make ClosureCleaner recursive
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12301&#39;&gt;FLINK-12301&lt;/a&gt;] -         Scala value classes inside case classes cannot be serialized anymore in Flink 1.8.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12342&#39;&gt;FLINK-12342&lt;/a&gt;] -         Yarn Resource Manager Acquires Too Many Containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12375&#39;&gt;FLINK-12375&lt;/a&gt;] -         flink-container job jar does not have read permissions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12416&#39;&gt;FLINK-12416&lt;/a&gt;] -         Docker build script fails on symlink creation ln -s
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12544&#39;&gt;FLINK-12544&lt;/a&gt;] -         Deadlock while releasing memory and requesting segment concurrent in SpillableSubpartition
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12547&#39;&gt;FLINK-12547&lt;/a&gt;] -         Deadlock when the task thread downloads jars using BlobClient
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12646&#39;&gt;FLINK-12646&lt;/a&gt;] -         Use reserved IP as unrouteable IP in RestClientTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12688&#39;&gt;FLINK-12688&lt;/a&gt;] -         Make serializer lazy initialization thread safe in StateDescriptor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12740&#39;&gt;FLINK-12740&lt;/a&gt;] -         SpillableSubpartitionTest deadlocks on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12835&#39;&gt;FLINK-12835&lt;/a&gt;] -         Time conversion is wrong in ManualClock
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12863&#39;&gt;FLINK-12863&lt;/a&gt;] -         Race condition between slot offerings and AllocatedSlotReport
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12865&#39;&gt;FLINK-12865&lt;/a&gt;] -         State inconsistency between RM and TM on the slot status
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12871&#39;&gt;FLINK-12871&lt;/a&gt;] -         Wrong SSL setup examples in docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12895&#39;&gt;FLINK-12895&lt;/a&gt;] -         TaskManagerProcessFailureBatchRecoveryITCase.testTaskManagerProcessFailure failed on travis 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12896&#39;&gt;FLINK-12896&lt;/a&gt;] -         TaskCheckpointStatisticDetailsHandler uses wrong value for JobID when archiving
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11126&#39;&gt;FLINK-11126&lt;/a&gt;] -         Filter out AMRMToken in the TaskManager credentials
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12137&#39;&gt;FLINK-12137&lt;/a&gt;] -         Add more proper explanation on flink streaming connectors 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12169&#39;&gt;FLINK-12169&lt;/a&gt;] -         Improve Javadoc of MessageAcknowledgingSourceBase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12378&#39;&gt;FLINK-12378&lt;/a&gt;] -         Consolidate FileSystem Documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12391&#39;&gt;FLINK-12391&lt;/a&gt;] -         Add timeout to transfer.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12539&#39;&gt;FLINK-12539&lt;/a&gt;] -         StreamingFileSink: Make the class extendable to customize for different usecases
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Test
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12350&#39;&gt;FLINK-12350&lt;/a&gt;] -         RocksDBStateBackendTest doesn&amp;#39;t cover the incremental checkpoint code path
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-12460&#39;&gt;FLINK-12460&lt;/a&gt;] -         Change taskmanager.tmp.dirs to io.tmp.dirs in configuration docs
&lt;/li&gt;
&lt;/ul&gt;
                                                                                                                                        </description>
<pubDate>Tue, 02 Jul 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/07/02/release-1.8.1.html</link>
<guid isPermaLink="true">/news/2019/07/02/release-1.8.1.html</guid>
</item>

<item>
<title>A Practical Guide to Broadcast State in Apache Flink</title>
<description>Since version 1.5.0, Apache Flink features a new type of state which is called Broadcast State. In this post, we explain what Broadcast State is, and show an example of how it can be applied to an application that evaluates dynamic patterns on an event stream. We walk you through the processing steps and the source code to implement this application in practice.

## What is Broadcast State?

The Broadcast State can be used to combine and jointly process two streams of events in a specific way. The events of the first stream are broadcasted to all parallel instances of an operator, which maintains them as state. The events of the other stream are not broadcasted but sent to individual instances of the same operator and processed together with the events of the broadcasted stream. 
The new broadcast state is a natural fit for applications that need to join a low-throughput and a high-throughput stream or need to dynamically update their processing logic. We will use a concrete example of the latter use case to explain the broadcast state and show its API in more detail in the remainder of this post.

## Dynamic Pattern Evaluation with Broadcast State

Imagine an e-commerce website that captures the interactions of all users as a stream of user actions. The company that operates the website is interested in analyzing the interactions to increase revenue, improve the user experience, and detect and prevent malicious behavior. 
The website implements a streaming application that detects a pattern on the stream of user events. However, the company wants to avoid modifying and redeploying the application every time the pattern changes. Instead, the application ingests a second stream of patterns and updates its active pattern when it receives a new pattern from the pattern stream. In the following, we discuss this application step-by-step and show how it leverages the broadcast state feature in Apache Flink.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/broadcastState/fig1.png&quot; width=&quot;600px&quot; alt=&quot;Broadcast State in Apache Flink.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Our example application ingests two data streams. The first stream provides user actions on the website and is illustrated on the top left side of the above figure. A user interaction event consists of the type of the action (user login, user logout, add to cart, or complete payment) and the id of the user, which is encoded by color. The user action event stream in our illustration contains a logout action of User 1001 followed by a payment-complete event for User 1003, and an “add-to-cart” action of User 1002.

The second stream provides action patterns that the application will evaluate. A pattern consists of two consecutive actions. In the figure above, the pattern stream contains the following two:

* Pattern #1: A user logs in and immediately logs out without browsing additional pages on the e-commerce website. 
* Pattern #2: A user adds an item to the shopping cart and logs out without completing the purchase.


Such patterns help a business in better analyzing user behavior, detecting malicious actions, and improving the website experience. For example, in the case of items being added to a shopping cart with no follow up purchase, the website team can take appropriate actions to understand better the reasons why users don’t complete a purchase and initiate specific programs to improve the website conversion (such as providing discount codes, limited free shipping offers etc.)

On the right-hand side, the figure shows three parallel tasks of an operator that ingest the pattern and user action streams, evaluate the patterns on the action stream, and emit pattern matches downstream. For the sake of simplicity, the operator in our example only evaluates a single pattern with exactly two subsequent actions. The currently active pattern is replaced when a new pattern is received from the pattern stream. In principle, the operator could also be implemented to evaluate more complex patterns or multiple patterns concurrently which could be individually added or removed.

We will describe how the pattern matching application processes the user action and pattern streams.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/broadcastState/fig2.png&quot; width=&quot;600px&quot; alt=&quot;Broadcast State in Apache Flink.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

First a pattern is sent to the operator. The pattern is broadcasted to all three parallel tasks of the operator. The tasks store the pattern in their broadcast state. Since the broadcast state should only be updated using broadcasted data, the state of all tasks is always expected to be the same.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/broadcastState/fig3.png&quot; width=&quot;600px&quot; alt=&quot;Broadcast State in Apache Flink.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Next, the first user actions are partitioned on the user id and shipped to the operator tasks. The partitioning ensures that all actions of the same user are processed by the same task. The figure above shows the state of the application after the first pattern and the first three action events were consumed by the operator tasks.

When a task receives a new user action, it evaluates the currently active pattern by looking at the user’s latest and previous actions. For each user, the operator stores the previous action in the keyed state. Since the tasks in the figure above only received a single action for each user so far (we just started the application), the pattern does not need to be evaluated. Finally, the previous action in the user’s keyed state is updated to the latest action, to be able to look it up when the next action of the same user arrives. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/broadcastState/fig4.png&quot; width=&quot;600px&quot; alt=&quot;Broadcast State in Apache Flink.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

After the first three actions are processed, the next event, the logout action of User 1001, is shipped to the task that processes the events of User 1001. When the task receives the actions, it looks up the current pattern from the broadcast state and the previous action of User 1001. Since the pattern matches both actions, the task emits a pattern match event. Finally, the task updates its keyed state by overriding the previous event with the latest action.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/broadcastState/fig5.png&quot; width=&quot;600px&quot; alt=&quot;Broadcast State in Apache Flink.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

When a new pattern arrives in the pattern stream, it is broadcasted to all tasks and each task updates its broadcast state by replacing the current pattern with the new one.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/broadcastState/fig6.png&quot; width=&quot;600px&quot; alt=&quot;Broadcast State in Apache Flink.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Once the broadcast state is updated with a new pattern, the matching logic continues as before, i.e., user action events are partitioned by key and evaluated by the responsible task.


## How to Implement an Application with Broadcast State?

Until now, we conceptually discussed the application and explained how it uses broadcast state to evaluate dynamic patterns over event streams. Next, we’ll show how to implement the example application with Flink’s DataStream API and the broadcast state feature.

Let’s start with the input data of the application. We have two data streams, actions, and patterns. At this point, we don’t really care where the streams come from. The streams could be ingested from Apache Kafka or Kinesis or any other system. Action and Pattern are Pojos with two fields each:

```java
DataStream&lt;Action&gt; actions = ???
DataStream&lt;Pattern&gt; patterns = ???
```

`Action` and `Pattern` are Pojos with two fields each:

- `Action: Long userId, String action`

- `Pattern: String firstAction, String secondAction`

As a first step, we key the action stream on the `userId` attribute.

```java
KeyedStream&lt;Action, Long&gt; actionsByUser = actions
  .keyBy((KeySelector&lt;Action, Long&gt;) action -&gt; action.userId);
```

Next, we prepare the broadcast state. Broadcast state is always represented as `MapState`, the most versatile state primitive that Flink provides.

```java
MapStateDescriptor&lt;Void, Pattern&gt; bcStateDescriptor = 
  new MapStateDescriptor&lt;&gt;(&quot;patterns&quot;, Types.VOID, Types.POJO(Pattern.class));
```

Since our application only evaluates and stores a single `Pattern` at a time, we configure the broadcast state as a `MapState` with key type `Void` and value type `Pattern`. The `Pattern` is always stored in the `MapState` with `null` as key.

```java
BroadcastStream&lt;Pattern&gt; bcedPatterns = patterns.broadcast(bcStateDescriptor);
```
Using the `MapStateDescriptor` for the broadcast state, we apply the `broadcast()` transformation on the patterns stream and receive a `BroadcastStream bcedPatterns`.

```java
DataStream&lt;Tuple2&lt;Long, Pattern&gt;&gt; matches = actionsByUser
 .connect(bcedPatterns)
 .process(new PatternEvaluator());
```

After we obtained the keyed `actionsByUser` stream and the broadcasted `bcedPatterns` stream, we `connect()` both streams and apply a `PatternEvaluator` on the connected streams. `PatternEvaluator` is a custom function that implements the `KeyedBroadcastProcessFunction` interface. It applies the pattern matching logic that we discussed before and emits `Tuple2&lt;Long, Pattern&gt;` records which contain the user id and the matched pattern.

```java
public static class PatternEvaluator
    extends KeyedBroadcastProcessFunction&lt;Long, Action, Pattern, Tuple2&lt;Long, Pattern&gt;&gt; {
 
  // handle for keyed state (per user)
  ValueState&lt;String&gt; prevActionState;
  // broadcast state descriptor
  MapStateDescriptor&lt;Void, Pattern&gt; patternDesc;
 
  @Override
  public void open(Configuration conf) {
    // initialize keyed state
    prevActionState = getRuntimeContext().getState(
      new ValueStateDescriptor&lt;&gt;(&quot;lastAction&quot;, Types.STRING));
    patternDesc = 
      new MapStateDescriptor&lt;&gt;(&quot;patterns&quot;, Types.VOID, Types.POJO(Pattern.class));
  }

  /**
   * Called for each user action.
   * Evaluates the current pattern against the previous and
   * current action of the user.
   */
  @Override
  public void processElement(
     Action action, 
     ReadOnlyContext ctx, 
     Collector&lt;Tuple2&lt;Long, Pattern&gt;&gt; out) throws Exception {
   // get current pattern from broadcast state
   Pattern pattern = ctx
     .getBroadcastState(this.patternDesc)
     // access MapState with null as VOID default value
     .get(null);
   // get previous action of current user from keyed state
   String prevAction = prevActionState.value();
   if (pattern != null &amp;&amp; prevAction != null) {
     // user had an action before, check if pattern matches
     if (pattern.firstAction.equals(prevAction) &amp;&amp; 
         pattern.secondAction.equals(action.action)) {
       // MATCH
       out.collect(new Tuple2&lt;&gt;(ctx.getCurrentKey(), pattern));
     }
   }
   // update keyed state and remember action for next pattern evaluation
   prevActionState.update(action.action);
 }

 /**
  * Called for each new pattern.
  * Overwrites the current pattern with the new pattern.
  */
 @Override
 public void processBroadcastElement(
     Pattern pattern, 
     Context ctx, 
     Collector&lt;Tuple2&lt;Long, Pattern&gt;&gt; out) throws Exception {
   // store the new pattern by updating the broadcast state
   BroadcastState&lt;Void, Pattern&gt; bcState = ctx.getBroadcastState(patternDesc);
   // storing in MapState with null as VOID default value
   bcState.put(null, pattern);
 }
}
```

The `KeyedBroadcastProcessFunction` interface provides three methods to process records and emit results.

- `processBroadcastElement()` is called for each record of the broadcasted stream. In our `PatternEvaluator` function, we simply put the received `Pattern` record in to the broadcast state using the `null` key (remember, we only store a single pattern in the `MapState`).
- `processElement()` is called for each record of the keyed stream. It provides read-only access to the broadcast state to prevent modification that result in different broadcast states across the parallel instances of the function. The `processElement()` method of the `PatternEvaluator` retrieves the current pattern from the broadcast state and the previous action of the user from the keyed state. If both are present, it checks whether the previous and current action match with the pattern and emits a pattern match record if that is the case. Finally, it updates the keyed state to the current user action.
- `onTimer()` is called when a previously registered timer fires. Timers can be registered in the `processElement` method and are used to perform computations or to clean up state in the future. We did not implement this method in our example to keep the code concise. However, it could be used to remove the last action of a user when the user was not active for a certain period of time to avoid growing state due to inactive users.

You might have noticed the context objects of the `KeyedBroadcastProcessFunction`’s processing method. The context objects give access to additional functionality such as:

- The broadcast state (read-write or read-only, depending on the method), 
- A `TimerService`, which gives access to the record’s timestamp, the current watermark, and which can register timers,
- The current key (only available in `processElement()`), and
- A method to apply a function the keyed state of each registered key (only available in `processBroadcastElement()`)

The `KeyedBroadcastProcessFunction` has full access to Flink state and time features just like any other ProcessFunction and hence can be used to implement sophisticated application logic. Broadcast state was designed to be a versatile feature that adapts to different scenarios and use cases. Although we only discussed a fairly simple and restricted application, you can use broadcast state in many ways to implement the requirements of your application. 

## Conclusion

In this blog post, we walked you through an example application to explain what Apache Flink’s broadcast state is and how it can be used to evaluate dynamic patterns on event streams. We’ve also discussed the API and showed the source code of our example application. 

We invite you to check the [documentation]({{ site.DOCS_BASE_URL }}flink-docs-stable/dev/stream/state/broadcast_state.html) of this feature and provide feedback or suggestions for further improvements through our [mailing list](http://mail-archives.apache.org/mod_mbox/flink-community/).
</description>
<pubDate>Wed, 26 Jun 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/2019/06/26/broadcast-state.html</link>
<guid isPermaLink="true">/2019/06/26/broadcast-state.html</guid>
</item>

<item>
<title>A Deep-Dive into Flink&#39;s Network Stack</title>
<description>&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{padding:10px 20px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{padding:10px 20px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;background-color:#eff0f1;}
.tg .tg-wide{padding:10px 30px;}
.tg .tg-top{vertical-align:top}
.tg .tg-center{text-align:center;vertical-align:center}
&lt;/style&gt;

Flink’s network stack is one of the core components that make up the `flink-runtime` module and sit at the heart of every Flink job. It connects individual work units (subtasks) from all TaskManagers. This is where your streamed-in data flows through and it is therefore crucial to the performance of your Flink job for both the throughput as well as latency you observe. In contrast to the coordination channels between TaskManagers and JobManagers which are using RPCs via Akka, the network stack between TaskManagers relies on a much lower-level API using Netty.

This blog post is the first in a series of posts about the network stack. In the sections below, we will first have a high-level look at what abstractions are exposed to the stream operators and then go into detail on the physical implementation and various optimisations Flink did. We will briefly present the result of these optimisations and Flink’s trade-off between throughput and latency. Future blog posts in this series will elaborate more on monitoring and metrics, tuning parameters, and common anti-patterns.

{% toc %}

## Logical View

Flink’s network stack provides the following logical view to the subtasks when communicating with each other, for example during a network shuffle as required by a `keyBy()`.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack1.png&quot; width=&quot;400px&quot; alt=&quot;Logical View on Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

It abstracts over the different settings of the following three concepts:

* Subtask output type (`ResultPartitionType`):
    * **pipelined (bounded or unbounded):**
    Sending data downstream as soon as it is produced, potentially one-by-one, either as a bounded or unbounded stream of records.
    * **blocking:**
    Sending data downstream only when the full result was produced.

* Scheduling type:
    * **all at once (eager):**
    Deploy all subtasks of the job at the same time (for streaming applications).
    * **next stage on first output (lazy):**
    Deploy downstream tasks as soon as any of their producers generated output.
    * **next stage on complete output:**
    Deploy downstream tasks when any or all of their producers have generated their full output set.

* Transport:
    * **high throughput:**
    Instead of sending each record one-by-one, Flink buffers a bunch of records into its network buffers and sends them altogether. This reduces the costs per record and leads to higher throughput.
    * **low latency via buffer timeout:**
    By reducing the timeout of sending an incompletely filled buffer, you may sacrifice throughput for latency.

We will have a look at the throughput and low latency optimisations in the sections below which look at the physical layers of the network stack. For this part, let us elaborate a bit more on the output and scheduling types. First of all, it is important to know that the subtask output type and the scheduling type are closely intertwined making only specific combinations of the two valid.

Pipelined result partitions are streaming-style outputs which need a live target subtask to send data to. The target can be scheduled before results are produced or at first output. Batch jobs produce bounded result partitions while streaming jobs produce unbounded results.

Batch jobs may also produce results in a blocking fashion, depending on the operator and connection pattern that is used. In that case, the complete result must be produced first before the receiving task can be scheduled. This allows batch jobs to work more efficiently and with lower resource usage.

The following table summarises the valid combinations:
&lt;br&gt;
&lt;center&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Output Type&lt;/th&gt;
    &lt;th&gt;Scheduling Type&lt;/th&gt;
    &lt;th&gt;Applies to…&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;pipelined, unbounded&lt;/td&gt;
    &lt;td&gt;all at once&lt;/td&gt;
    &lt;td&gt;Streaming jobs&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;next stage on first output&lt;/td&gt;
    &lt;td&gt;n/a¹&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot;&gt;pipelined, bounded&lt;/td&gt;
    &lt;td&gt;all at once&lt;/td&gt;
    &lt;td&gt;n/a²&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;next stage on first output&lt;/td&gt;
    &lt;td&gt;Batch jobs&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;blocking&lt;/td&gt;
    &lt;td&gt;next stage on complete output&lt;/td&gt;
    &lt;td&gt;Batch jobs&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;br&gt;


&lt;sup&gt;1&lt;/sup&gt; Currently not used by Flink. &lt;br&gt;
&lt;sup&gt;2&lt;/sup&gt; This may become applicable to streaming jobs once the [Batch/Streaming unification]({{ site.baseurl }}/roadmap.html#batch-and-streaming-unification) is done.


&lt;br&gt;
Additionally, for subtasks with more than one input, scheduling start in two ways: after *all* or after *any* input producers to have produced a record/their complete dataset. For tuning the output types and scheduling decisions in batch jobs, please have a look at [ExecutionConfig#setExecutionMode()]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/api/common/ExecutionConfig.html#setExecutionMode-org.apache.flink.api.common.ExecutionMode-) - and [ExecutionMode]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/api/common/ExecutionMode.html#enum.constant.detail) in particular - as well as [ExecutionConfig#setDefaultInputDependencyConstraint()]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/api/common/ExecutionConfig.html#setDefaultInputDependencyConstraint-org.apache.flink.api.common.InputDependencyConstraint-).

&lt;br&gt;

## Physical Transport

In order to understand the physical data connections, please recall that, in Flink, different tasks may share the same slot via [slot sharing groups]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/stream/operators/#task-chaining-and-resource-groups). TaskManagers may also provide more than one slot to allow multiple subtasks of the same task to be scheduled onto the same TaskManager.

For the example pictured below, we will assume a parallelism of 4 and a deployment with two task managers offering 2 slots each. TaskManager 1 executes subtasks A.1, A.2, B.1, and B.2 and TaskManager 2 executes subtasks A.3, A.4, B.3, and B.4. In a shuffle-type connection between task A and task B, for example from a `keyBy()`, there are 2x4 logical connections to handle on each TaskManager, some of which are local, some remote:
&lt;br&gt;

&lt;center&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;B.1&lt;/th&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;B.2&lt;/th&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;B.3&lt;/th&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;B.4&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;A.1&lt;/th&gt;
    &lt;td class=&quot;tg-center&quot; colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;local&lt;/td&gt;
    &lt;td class=&quot;tg-center&quot; colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;remote&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;A.2&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;A.3&lt;/th&gt;
    &lt;td class=&quot;tg-center&quot; colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;remote&lt;/td&gt;
    &lt;td class=&quot;tg-center&quot; colspan=&quot;2&quot; rowspan=&quot;2&quot;&gt;local&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-wide&quot;&gt;A.4&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;br&gt;

Each (remote) network connection between different tasks will get its own TCP channel in Flink’s network stack. However, if different subtasks of the same task are scheduled onto the same TaskManager, their network connections towards the same TaskManagers will be multiplexed and share a single TCP channel for reduced resource usage. In our example, this would apply to A.1 → B.3, A.1 → B.4, as well as A.2 → B.3, and A.2 → B.4 as pictured below:
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack2.png&quot; width=&quot;700px&quot; alt=&quot;Physical-transport-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

The results of each subtask are called [ResultPartition]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/partition/ResultPartition.html), each split into separate [ResultSubpartitions]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/partition/ResultSubpartition.html) — one for each logical channel. At this point in the stack, Flink is not dealing with individual records anymore but instead with a group of serialised records assembled together into network buffers. The number of buffers available to each subtask in its own local buffer pool (one per sending and receiving side each) is limited to at most

    #channels * buffers-per-channel + floating-buffers-per-gate

The total number of buffers on a single TaskManager usually does not need configuration. See the [Configuring the Network Buffers]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#configuring-the-network-buffers) documentation for details on how to do so if needed.

### Inflicting Backpressure (1)

Whenever a subtask’s sending buffer pool is exhausted — buffers reside in either a result subpartition&#39;s buffer queue or inside the lower, Netty-backed network stack — the producer is blocked, cannot continue, and experiences backpressure. The receiver works in a similar fashion: any incoming Netty buffer in the lower network stack needs to be made available to Flink via a network buffer. If there is no network buffer available in the appropriate subtask&#39;s buffer pool, Flink will stop reading from this channel until a buffer becomes available. This would effectively backpressure all sending subtasks on this multiplex and therefore also throttle other receiving subtasks. The following picture illustrates this for an overloaded subtask B.4 which would cause backpressure on the multiplex and also stop subtask B.3 from receiving and processing further buffers, even though it still has capacity.

&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack3.png&quot; width=&quot;700px&quot; alt=&quot;Physical-transport-backpressure-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

To prevent this situation from even happening, Flink 1.5 introduced its own flow control mechanism.

&lt;br&gt;

## Credit-based Flow Control

Credit-based flow control makes sure that whatever is “on the wire” will have capacity at the receiver to handle. It is based on the availability of network buffers as a natural extension of the mechanisms Flink had before. Instead of only having a shared local buffer pool, each remote input channel now has its own set of **exclusive buffers**. Conversely, buffers in the local buffer pool are called **floating buffers** as they will float around and are available to every input channel.

Receivers will announce the availability of buffers as **credits** to the sender (1 buffer = 1 credit). Each result subpartition will keep track of its **channel credits**. Buffers are only forwarded to the lower network stack if credit is available and each sent buffer reduces the credit score by one. In addition to the buffers, we also send information about the current **backlog** size which specifies how many buffers are waiting in this subpartition’s queue. The receiver will use this to ask for an appropriate number of floating buffers for faster backlog processing. It will try to acquire as many floating buffers as the backlog size but this may not always be possible and we may get some or no buffers at all. The receiver will make use of the retrieved buffers and will listen for further buffers becoming available to continue.
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack4.png&quot; width=&quot;700px&quot; alt=&quot;Physical-transport-credit-flow-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Credit-based flow control will use [buffers-per-channel]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#taskmanager-network-memory-buffers-per-channel) to specify how many buffers are exclusive (mandatory) and [floating-buffers-per-gate]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#taskmanager-network-memory-floating-buffers-per-gate) for the local buffer pool (optional&lt;sup&gt;3&lt;/sup&gt;) thus achieving the same buffer limit as without flow control. The default values for these two parameters have been chosen so that the maximum (theoretical) throughput with flow control is at least as good as without flow control, given a healthy network with usual latencies. You may need to adjust these depending on your actual round-trip-time and bandwidth.
&lt;br&gt;

&lt;sup&gt;3&lt;/sup&gt;If there are not enough buffers available, each buffer pool will get the same share of the globally available ones (± 1).

### Inflicting Backpressure (2)

As opposed to the receiver&#39;s backpressure mechanisms without flow control, credits provide a more direct control: If a receiver cannot keep up, its available credits will eventually hit 0 and stop the sender from forwarding buffers to the lower network stack. There is backpressure on this logical channel only and there is no need to block reading from a multiplexed TCP channel. Other receivers are therefore not affected in processing available buffers.

### What do we Gain? Where is the Catch?

&lt;img align=&quot;right&quot; src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack5.png&quot; width=&quot;300&quot; height=&quot;200&quot; alt=&quot;Physical-transport-credit-flow-checkpoints-Flink&#39;s Network Stack&quot;/&gt;

Since, with flow control, a channel in a multiplex cannot block another of its logical channels, the overall resource utilisation should increase. In addition, by having full control over how much data is “on the wire”, we are also able to improve [checkpoint alignments]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/internals/stream_checkpointing.html#checkpointing): without flow control, it would take a while for the channel to fill the network stack’s internal buffers and propagate that the receiver is not reading anymore. During that time, a lot of buffers could be sitting around. Any checkpoint barrier would have to queue up behind these buffers and would thus have to wait until all of those have been processed before it can start (“Barriers never overtake records!”).

However, the additional announce messages from the receiver may come at some additional costs, especially in setup using SSL-encrypted channels. Also, a single input channel cannot make use of all buffers in the buffer pool because exclusive buffers are not shared. It can also not start right away with sending as much data as is available so that during ramp-up (if you are producing data faster than announcing credits in return) it may take longer to send data through. While this may affect your job’s performance, it is usually better to have flow control because of all its advantages. You may want to increase the number of exclusive buffers via [buffers-per-channel]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#taskmanager-network-memory-buffers-per-channel) at the cost of using more memory. The overall memory use compared to the previous implementation, however, may still be lower because lower network stacks do not need to buffer much data any more since we can always transfer that to Flink immediately.

There is one more thing you may notice when using credit-based flow control: since we buffer less data between the sender and receiver, you may experience backpressure earlier. This is, however, desired and you do not really get any advantage by buffering more data. If you want to buffer more but keep flow control, you could consider increasing the number of floating buffers via [floating-buffers-per-gate]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#taskmanager-network-memory-floating-buffers-per-gate).

&lt;br&gt;

&lt;center&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Advantages&lt;/th&gt;
    &lt;th&gt;Disadvantages&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-top&quot;&gt;
    • better resource utilisation with data skew in multiplexed connections &lt;br&gt;&lt;br&gt;
    • improved checkpoint alignment&lt;br&gt;&lt;br&gt;
    • reduced memory use (less data in lower network layers)&lt;/td&gt;
    &lt;td class=&quot;tg-top&quot;&gt;
    • additional credit-announce messages&lt;br&gt;&lt;br&gt;
    • additional backlog-announce messages (piggy-backed with buffer messages, almost no overhead)&lt;br&gt;&lt;br&gt;
    • potential round-trip latency&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-center&quot; colspan=&quot;2&quot;&gt;• backpressure appears earlier&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;div class=&quot;alert alert-info&quot; markdown=&quot;1&quot;&gt;
&lt;span class=&quot;label label-info&quot; style=&quot;display: inline-block&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-info-sign&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; Note&lt;/span&gt;
If you need to turn off credit-based flow control, you can add this to your `flink-conf.yaml`:

`taskmanager.network.credit-model: false`

This parameter, however, is deprecated and will eventually be removed along with the non-credit-based flow control code.
&lt;/div&gt;

&lt;br&gt;

## Writing Records into Network Buffers and Reading them again

The following picture extends the slightly more high-level view from above with further details of the network stack and its surrounding components, from the collection of a record in your sending operator to the receiving operator getting it:
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack6.png&quot; width=&quot;700px&quot; alt=&quot;Physical-transport-complete-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

After creating a record and passing it along, for example via `Collector#collect()`, it is given to the [RecordWriter]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/api/writer/RecordWriter.html) which serialises the record from a Java object into a sequence of bytes which eventually ends up in a network buffer that is handed along as described above. The RecordWriter first serialises the record to a flexible on-heap byte array using the [SpanningRecordSerializer]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/api/serialization/SpanningRecordSerializer.html). Afterwards, it tries to write these bytes into the associated network buffer of the target network channel. We will come back to this last part in the section below.

On the receiver’s side, the lower network stack (netty) is writing received buffers into the appropriate input channels. The (stream) tasks’s thread eventually reads from these queues and tries to deserialise the accumulated bytes into Java objects with the help of the [RecordReader]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/api/reader/RecordReader.html) and going through the [SpillingAdaptiveSpanningRecordDeserializer]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/api/serialization/SpillingAdaptiveSpanningRecordDeserializer.html). Similar to the serialiser, this deserialiser must also deal with special cases like records spanning multiple network buffers, either because the record is just bigger than a network buffer (32KiB by default, set via [taskmanager.memory.segment-size]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/config.html#taskmanager-memory-segment-size)) or because the serialised record was added to a network buffer which did not have enough remaining bytes. Flink will nevertheless use these bytes and continue writing the rest to a new network buffer.
&lt;br&gt;

### Flushing Buffers to Netty

In the picture above, the credit-based flow control mechanics actually sit inside the “Netty Server” (and “Netty Client”) components and the buffer the RecordWriter is writing to is always added to the result subpartition in an empty state and then gradually filled with (serialised) records. But when does Netty actually get the buffer? Obviously, it cannot take bytes whenever they become available since that would not only add substantial costs due to cross-thread communication and synchronisation, but also make the whole buffering obsolete.

In Flink, there are three situations that make a buffer available for consumption by the Netty server:

* a buffer becomes full when writing a record to it, or&lt;br&gt;
* the buffer timeout hits, or&lt;br&gt;
* a special event such as a checkpoint barrier is sent.&lt;br&gt;
&lt;br&gt;

#### Flush after Buffer Full

The RecordWriter works with a local serialisation buffer for the current record and will gradually write these bytes to one or more network buffers sitting at the appropriate result subpartition queue. Although a RecordWriter can work on multiple subpartitions, each subpartition has only one RecordWriter writing data to it. The Netty server, on the other hand, is reading from multiple result subpartitions and multiplexing the appropriate ones into a single channel as described above. This is a classical producer-consumer pattern with the network buffers in the middle and as shown by the next picture. After (1) serialising and (2) writing data to the buffer, the RecordWriter updates the buffer’s writer index accordingly. Once the buffer is completely filled, the record writer will (3) acquire a new buffer from its local buffer pool for any remaining bytes of the current record - or for the next one - and add the new one to the subpartition queue. This will (4) notify the Netty server of data being available if it is not aware yet&lt;sup&gt;4&lt;/sup&gt;. Whenever Netty has capacity to handle this notification, it will (5) take the buffer and send it along the appropriate TCP channel.
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack7.png&quot; width=&quot;500px&quot; alt=&quot;Record-writer-to-network-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;sup&gt;4&lt;/sup&gt;We can assume it already got the notification if there are more finished buffers in the queue.
&lt;br&gt;

#### Flush after Buffer Timeout

In order to support low-latency use cases, we cannot only rely on buffers being full in order to send data downstream. There may be cases where a certain communication channel does not have too many records flowing through and unnecessarily increase the latency of the few records you actually have. Therefore, a periodic process will flush whatever data is available down the stack: the output flusher. The periodic interval can be configured via [StreamExecutionEnvironment#setBufferTimeout]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.html#setBufferTimeout-long-) and acts as an upper bound on the latency&lt;sup&gt;5&lt;/sup&gt; (for low-throughput channels). The following picture shows how it interacts with the other components: the RecordWriter serialises and writes into network buffers as before but concurrently, the output flusher may (3,4) notify the Netty server of data being available if Netty is not already aware (similar to the “buffer full” scenario above). When Netty handles this notification (5) it will consume the available data from the buffer and update the buffer’s reader index. The buffer stays in the queue - any further operation on this buffer from the Netty server side will continue reading from the reader index next time.
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack8.png&quot; width=&quot;500px&quot; alt=&quot;Record-writer-to-network-with-flusher-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;sup&gt;5&lt;/sup&gt;Strictly speaking, the output flusher does not give any guarantees - it only sends a notification to Netty which can pick it up at will / capacity. This also means that the output flusher has no effect if the channel is backpressured.
&lt;br&gt;

#### Flush after special event

Some special events also trigger immediate flushes if being sent through the RecordWriter. The most important ones are checkpoint barriers or end-of-partition events which obviously should go quickly and not wait for the output flusher to kick in.
&lt;br&gt;

#### Further remarks

In contrast to Flink &lt; 1.5, please note that (a) network buffers are now placed in the subpartition queues directly and (b) we are not closing the buffer on each flush. This gives us a few advantages:

* less synchronisation overhead (output flusher and RecordWriter are independent)
* in high-load scenarios where Netty is the bottleneck (either through backpressure or directly), we can still accumulate data in incomplete buffers
* significant reduction of Netty notifications

However, you may notice an increased CPU use and TCP packet rate during low load scenarios. This is because, with the changes, Flink will use any *available* CPU cycles to try to maintain the desired latency. Once the load increases, this will self-adjust by buffers filling up more. High load scenarios are not affected and even get a better throughput because of the reduced synchronisation overhead.
&lt;br&gt;

### Buffer Builder &amp; Buffer Consumer

If you want to dig deeper into how the producer-consumer mechanics are implemented in Flink, please take a closer look at the [BufferBuilder]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/buffer/BufferBuilder.html) and [BufferConsumer]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/api/java/org/apache/flink/runtime/io/network/buffer/BufferConsumer.html) classes which have been introduced in Flink 1.5. While reading is potentially only *per buffer*, writing to it is *per record* and thus on the hot path for all network communication in Flink. Therefore, it was very clear to us that we needed a lightweight connection between the task’s thread and the Netty thread which does not imply too much synchronisation overhead. For further details, we suggest to check out the [source code](https://github.com/apache/flink/tree/release-1.8/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer).

&lt;br&gt;

## Latency vs. Throughput

Network buffers were introduced to get higher resource utilisation and higher throughput at the cost of having some records wait in buffers a little longer. Although an upper limit to this wait time can be given via the buffer timeout, you may be curious to find out more about the trade-off between these two dimensions: latency and throughput, as, obviously, you cannot get both. The following plot shows various values for the buffer timeout starting at 0 (flush with every record) to 100ms (the default) and shows the resulting throughput rates on a cluster with 100 nodes and 8 slots each running a job that has no business logic and thus only tests the network stack. For comparison, we also plot Flink 1.4 before the low-latency improvements (as described above) were added.
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-06-05-network-stack/flink-network-stack9.png&quot; width=&quot;650px&quot; alt=&quot;Network-buffertimeout-Flink&#39;s Network Stack&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

As you can see, with Flink 1.5+, even very low buffer timeouts such as 1ms (for low-latency scenarios) provide a maximum throughput as high as 75% of the default timeout where more data is buffered before being sent over the wire.

&lt;br&gt;

## Conclusion

Now you know about result partitions, the different network connections and scheduling types for both batch and streaming. You also know about credit-based flow control and how the network stack works internally, in order to reason about network-related tuning parameters and about certain job behaviours. Future blog posts in this series will build upon this knowledge and go into more operational details including relevant metrics to look at, further network stack tuning, and common antipatterns to avoid. Stay tuned for more.


</description>
<pubDate>Wed, 05 Jun 2019 08:45:00 +0000</pubDate>
<link>https://flink.apache.org/2019/06/05/flink-network-stack.html</link>
<guid isPermaLink="true">/2019/06/05/flink-network-stack.html</guid>
</item>

<item>
<title>State TTL in Flink 1.8.0: How to Automatically Cleanup Application State in Apache Flink</title>
<description>A common requirement for many stateful streaming applications is to automatically cleanup application state for effective management of your state size, or to control how long the application state can be accessed (e.g. due to legal regulations like the GDPR). The state time-to-live (TTL) feature was initiated in Flink 1.6.0 and enabled application state cleanup and efficient state size management in Apache Flink. 

In this post, we motivate the State TTL feature and discuss its use cases. Moreover, we show how to use and configure it. We explain how Flink internally manages state with TTL and present some exciting additions to the feature in Flink 1.8.0. The blog post concludes with an outlook on future improvements and extensions.

# The Transient Nature of State

There are two major reasons why state should be maintained only for a limited time. For example, let’s imagine a Flink application that ingests a stream of user login events and stores for each user the time of the last login to improve the experience of frequent visitors.

* **Controlling the size of state.**
Being able to efficiently manage an ever-growing state size is a primary use case for state TTL. Oftentimes, data needs to be persisted temporarily while there is some user activity around it, e.g. web sessions. When the activity ends there is no longer interest in that data while it still occupies storage. Flink 1.8.0 introduces background cleanup of old state based on TTL that makes the eviction of no-longer-necessary data frictionless. Previously, the application developer had to take extra actions and explicitly remove useless state to free storage space. This manual clean up procedure was not only error prone but also less efficient than the new lazy method to remove state. Following our previous example of storing the time of the last login, this might not be necessary after some time because the user can be treated as “infrequent” later on.

* **Complying with data protection and sensitive data requirements.**
Recent developments around data privacy regulations, such as the General Data Protection Regulation (GDPR) introduced by the European Union, make compliance with such data requirements or treating sensitive data a top priority for many use cases and applications. An example of such use cases includes applications that require keeping data for a specific timeframe and preventing access to it thereafter. This is a common challenge for companies providing short-term services to their customers. The state TTL feature gives guarantees for how long an application can access state and hence can help to comply with data protection regulations.

Both requirements can be addressed by a feature that periodically, yet continuously, removes the state for a key once it becomes unnecessary or unimportant and there is no requirement to keep it in storage any more.

# State TTL for continuous cleanup of application state

The 1.6.0 release of Apache Flink introduced the State TTL feature. It enabled developers of stream processing applications to configure the state of operators to expire and be cleaned up after a defined timeout (time-to-live). In Flink 1.8.0 the feature was extended, including continuous cleanup of old entries for both the RocksDB and the heap state backends (FSStateBackend and MemoryStateBackend), enabling a continuous cleanup process of old entries (according to the TTL setting).

In Flink’s DataStream API, application state is defined by a [state descriptor]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/stream/state/state.html#using-managed-keyed-state). State TTL is configured by passing a `StateTtlConfiguration` object to a state descriptor. The following Java example shows how to create a state TTL configuration and provide it to the state descriptor that holds the last login time of a user as a `Long` value:

```java
import org.apache.flink.api.common.state.StateTtlConfig;
import org.apache.flink.api.common.time.Time;
import org.apache.flink.api.common.state.ValueStateDescriptor;

StateTtlConfig ttlConfig = StateTtlConfig
    .newBuilder(Time.days(7))
    .setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)
    .setStateVisibility(StateTtlConfig.StateVisibility.NeverReturnExpired)
    .build();
    
ValueStateDescriptor&lt;Long&gt; lastUserLogin = 
    new ValueStateDescriptor&lt;&gt;(&quot;lastUserLogin&quot;, Long.class);

lastUserLogin.enableTimeToLive(ttlConfig);
```

Flink provides multiple options to configure the behavior of the state TTL functionality.

* **When is the Time-to-Live reset?** 
By default, the expiration time of a state entry is updated when the state is modified. Optionally, it can also be updated on read access at the cost of an additional write operation to update the timestamp.

* **Can the expired state be accessed one last time?** 
State TTL employs a lazy strategy to clean up expired state. This can lead to the situation that an application attempts to read state which is expired but hasn’t been removed yet. You can configure whether such a read request returns the expired state or not. In either case, the expired state is immediately removed afterwards. While the option of returning expired state favors data availability, not returning expired state can be required for data protection regulations.

* **Which time semantics are used for the Time-to-Live timers?** 
With Flink 1.8.0, users can only define a state TTL in terms of processing time. The support for event time is planned for future Apache Flink releases.

You can read more about how to use state TTL in the [Apache Flink documentation]({{ site.DOCS_BASE_URL }}flink-docs-stable/dev/stream/state/state.html#state-time-to-live-ttl).

Internally, the State TTL feature is implemented by storing an additional timestamp of the last relevant state access, along with the actual state value. While this approach adds some storage overhead, it allows Flink to check for the expired state during state access, checkpointing, recovery, or dedicated storage cleanup procedures.

# “Taking out the Garbage”

When a state object is accessed in a read operation, Flink will check its timestamp and clear the state if it is expired (depending on the configured state visibility, the expired state is returned or not). Due to this lazy removal, expired state that is never accessed again will forever occupy storage space unless it is garbage collected.

So how can the expired state be removed without the application logic explicitly taking care of it? In general, there are different possible strategies to remove it in the background.

## Keep full state snapshots clean

Flink 1.6.0 already supported automatic eviction of the expired state when a full snapshot for a checkpoint or savepoint is taken. Note that state eviction is not applied for incremental checkpoints. State eviction on full snapshots must be explicitly enabled as shown in the following example:

```java
StateTtlConfig ttlConfig = StateTtlConfig
    .newBuilder(Time.days(7))
    .cleanupFullSnapshot()
    .build();
```

The local storage stays untouched but the size of the stored snapshot is reduced. The local state of an operator will only be cleaned up when the operator reloads its state from a snapshot, i.e. in case of recovery or when starting from a savepoint. 

Due to these limitations, applications still need to actively remove state after it expired in Flink 1.6.0. To improve the user experience, Flink 1.8.0 introduces two more autonomous cleanup strategies, one for each of Flink’s two state backend types. We describe them below.

## Incremental cleanup in Heap state backends

This approach is specific to the Heap state backends (FSStateBackend and MemoryStateBackend). The idea is that the storage backend keeps a lazy global iterator over all state entries. Certain events, for instance state access, trigger an incremental cleanup. Every time an incremental cleanup is triggered, the iterator is advanced. The traversed state entries are checked and expired once are removed. The following code example shows how to enable incremental cleanup:

```java
StateTtlConfig ttlConfig = StateTtlConfig
    .newBuilder(Time.days(7))
    // check 10 keys for every state access
    .cleanupIncrementally(10, false)
    .build();
```

If enabled, every state access triggers a cleanup step. For every clean up step, a certain number of state entries are checked for expiration. There are two tuning parameters. The first defines the number of state entries to check for each cleanup step. The second parameter is a flag to trigger a cleanup step after each processed record, additionally to each state access.

There are two important caveats about this approach: 
* The first one is that the time spent for the incremental cleanup increases the record processing latency.
* The second one should be practically negligible but still worth mentioning: if no state is accessed or no records are processed, expired state won’t be removed.

## RocksDB background compaction to filter out expired state

If your application uses the RocksDB state backend, you can enable another cleanup strategy which is based on a Flink specific compaction filter. RocksDB periodically runs asynchronous compactions to merge state updates and reduce storage. The Flink compaction filter checks the expiration timestamp of state entries with TTL and discards all expired values.

The first step to activate this feature is to configure the RocksDB state backend by setting the following Flink configuration option: `state.backend.rocksdb.ttl.compaction.filter.enabled`. Once the RocksDB state backend is configured, the compaction cleanup strategy is enabled for a state as shown in the following code example:

```java
StateTtlConfig ttlConfig = StateTtlConfig
    .newBuilder(Time.days(7))
    .cleanupInRocksdbCompactFilter()
    .build();
```
Keep in mind that calling the Flink TTL filter slows down the RocksDB compaction.

## Eager State Cleanup with Timers

Another way to manually cleanup state is based on Flink timers. This is an idea that the community is currently evaluating for future releases. With this approach, a cleanup timer is registered for every state access. This approach is more predictable because state is eagerly removed as soon as it expires. However, it is more expensive because the timers consume storage along with the original state. 

# Future work

Apart from including the timer-based cleanup strategy, mentioned above, the Flink community has plans to further improve the state TTL feature. The possible improvements include adding support of TTL for event time scale (only processing time is supported at the moment) and enabling State TTL for queryable state.

We encourage you to join the conversation and share your thoughts and ideas in the [Apache Flink JIRA board](https://issues.apache.org/jira/projects/FLINK/summary) or by subscribing to the Apache Flink dev mailing list. Feedback or suggestions are always appreciated and we look forward to hearing your thoughts on the Flink mailing lists.

# Summary

Time-based state access restrictions and controlling the size of application state are common challenges in the world of stateful stream processing. Flink’s 1.8.0 release significantly improves the State TTL feature by adding support for continuous background cleanup of expired state objects. The new clean up mechanisms relieve you from manually implementing state cleanup. They are also more efficient due to their lazy nature. State TTL gives you control over the size of your application state so that you can focus on the core logic of your applications.
</description>
<pubDate>Sun, 19 May 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/2019/05/19/state-ttl.html</link>
<guid isPermaLink="true">/2019/05/19/state-ttl.html</guid>
</item>

<item>
<title>Flux capacitor, huh? Temporal Tables and Joins in Streaming SQL</title>
<description>Figuring out how to manage and model temporal data for effective point-in-time analysis was a longstanding battle, dating as far back as the early 80’s, that culminated with the introduction of temporal tables in the SQL standard in 2011. Up to that point, users were doomed to implement this as part of the application logic, often hurting the length of the development lifecycle as well as the maintainability of the code. And, although there isn’t a single, commonly accepted definition of **temporal data**, the challenge it represents is one and the same: how do we validate or enrich data against dynamically changing, historical datasets?

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-05-13-temporal-tables/TemporalTables1.png&quot; width=&quot;500px&quot; alt=&quot;Taxi Fares and Conversion Rates&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

**For example:** given a stream with Taxi Fare events tied to the local currency of the ride location, we might want to convert the fare price to a common currency for further processing. As conversion rates excel at fluctuating over time, each Taxi Fare event would need to be matched to the rate that was valid at the time the event occurred in order to produce a reliable result.

## Modelling Temporal Data with Flink

In the 1.7 release, Flink has introduced the concept of **temporal tables** into its streaming SQL and Table API: parameterized views on append-only tables — or, any table that only allows records to be inserted, never updated or deleted — that are interpreted as a changelog and keep data closely tied to time context, so that it can be interpreted as valid only within a specific period of time. Transforming a stream into a temporal table requires: 

* Defining a **primary key** and a **versioning field** that can be used to keep track of the changes that happen over time;

* Exposing the stream as a **temporal table function** that maps each point in time to a static relation.

Going back to our example use case, a temporal table is just what we need to model the conversion rate data such as to make it useful for point-in-time querying. Temporal table functions are implemented as an extension of Flink’s generic [table function]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table/udfs.html#table-functions) class and can be defined in the same straightforward way to be used with the Table API or SQL parser.

```java
import org.apache.flink.table.functions.TemporalTableFunction;
 
(...)
 
// Get the stream and table environments.
StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
StreamTableEnvironment tEnv = StreamTableEnvironment.getTableEnvironment(env);
 
// Provide a sample static data set of the rates history table.
List &lt;Tuple2&lt;String, Long&gt;&gt;ratesHistoryData =new ArrayList&lt;&gt;();
 
ratesHistoryData.add(Tuple2.of(&quot;USD&quot;, 102L)); 
ratesHistoryData.add(Tuple2.of(&quot;EUR&quot;, 114L)); 
ratesHistoryData.add(Tuple2.of(&quot;YEN&quot;, 1L)); 
ratesHistoryData.add(Tuple2.of(&quot;EUR&quot;, 116L)); 
ratesHistoryData.add(Tuple2.of(&quot;USD&quot;, 105L));
 
// Create and register an example table using the sample data set.
DataStream&lt;Tuple2&lt;String, Long&gt;&gt; ratesHistoryStream = env.fromCollection(ratesHistoryData);
 
Table ratesHistory = tEnv.fromDataStream(ratesHistoryStream, &quot;r_currency, r_rate, r_proctime.proctime&quot;);
 
tEnv.registerTable(&quot;RatesHistory&quot;, ratesHistory);
 
// Create and register the temporal table function &quot;rates&quot;.
// Define &quot;r_proctime&quot; as the versioning field and &quot;r_currency&quot; as the primary key.
TemporalTableFunction rates = ratesHistory.createTemporalTableFunction(&quot;r_proctime&quot;, &quot;r_currency&quot;);
 
tEnv.registerFunction(&quot;Rates&quot;, rates);
 
(...)
```

What does this **Rates** function do, in practice? Imagine we would like to check what the conversion rates looked like at a given time — say, 11:00. We could simply do something like:

```sql
SELECT * FROM Rates(&#39;11:00&#39;);
```

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-05-13-temporal-tables/TemporalTables2.png&quot; width=&quot;650px&quot; alt=&quot;Point-in-time Querying&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Even though Flink does not yet support querying temporal table functions with a constant time attribute parameter, these functions can be used to cover a much more interesting scenario: temporal table joins.

## Streaming Joins using Temporal Tables

Temporal tables reach their full potential when used in combination — erm, joined — with streaming data, for instance to power applications that must continuously whitelist against a reference dataset that changes over time for auditing or regulatory compliance. While efficient joins have long been an enduring challenge for query processors due to computational cost and resource consumption, joins over streaming data carry some additional challenges:

* The **unbounded** nature of streams means that inputs are continuously evaluated and intermediate join results can consume memory resources indefinitely. Flink gracefully manages its memory consumption out-of-the-box (even for heavier cases where joins require spilling to disk) and supports time-windowed joins to bound the amount of data that needs to be kept around as state;
* Streaming data might be **out-of-order** and **late**, so it is not possible to enforce an ordering upfront and time handling requires some thinking to avoid unnecessary outputs and retractions.

In the particular case of temporal data, time-windowed joins are not enough (well, at least not without getting into some expensive tweaking): sooner or later, each reference record will fall outside of the window and be wiped from state, no longer being considered for future join results. To address this limitation, Flink has introduced support for temporal table joins to cover time-varying relations.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-05-13-temporal-tables/TemporalTables3.png&quot; width=&quot;500px&quot; alt=&quot;Temporal Table Join between Taxi Fares and Conversion Rates&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Each record from the append-only table on the probe side (```Taxi Fare```) is joined with the version of the record from the temporal table on the build side (```Conversion Rate```) that most closely matches the probe side record time attribute (```time```) for the same value of the primary key (```currency```). Remember the temporal table function (```Rates```) we registered earlier? It can now be used to express this join as a simple SQL statement that would otherwise require a heavier statement with a subquery.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-05-13-temporal-tables/TemporalTables4.png&quot; width=&quot;700px&quot; alt=&quot;Regular Join vs. Temporal Table Join&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Temporal table joins support both [processing]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table/streaming/joins.html#processing-time-temporal-joins) and [event time]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table/streaming/joins.html#event-time-temporal-joins) semantics and effectively limit the amount of data kept in state while also allowing records on the build side to be arbitrarily old, as opposed to time-windowed joins. Probe-side records only need to be kept in state for a very short time to ensure correct semantics in presence of out-of-order records. The challenges mentioned in the beginning of this section are overcome by:

* Narrowing the **scope** of the join: only the time-matching version of ```ratesHistory``` is visible for a given ```taxiFare.time```;
* Pruning **unneeded records** from state: for cases using event time, records between current time and the [watermark]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/event_time.html#event-time-and-watermarks) delay are persisted for both the probe and build side. These are discarded as soon as the watermark arrives and the results are emitted — allowing the join operation to move forward in time and the build table to “refresh” its version in state.

## Conclusion

All this means it is now possible to express continuous stream enrichment in relational and time-varying terms using Flink without dabbling into syntactic patchwork or compromising performance. In other words: stream time-travelling minus the flux capacitor. Extending this syntax to batch processing for enriching historic data with proper (event) time semantics is also part of the Flink roadmap! 

If you&#39;d like to get some **hands-on practice in joining streams with Flink SQL** (and Flink SQL in general), checkout this [free training for Flink SQL](https://github.com/ververica/sql-training/wiki). The training environment is based on Docker and set up in just a few minutes.

Subscribe to the [Apache Flink mailing lists]({{ site.baseurl }}/community.html#mailing-lists) to stay up-to-date with the latest developments in this space.
</description>
<pubDate>Tue, 14 May 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/2019/05/14/temporal-tables.html</link>
<guid isPermaLink="true">/2019/05/14/temporal-tables.html</guid>
</item>

<item>
<title>When Flink &amp; Pulsar Come Together</title>
<description>The open source data technology frameworks [Apache Flink](https://flink.apache.org/) and [Apache Pulsar](https://pulsar.apache.org/en/) can integrate in different ways to provide elastic data processing at large scale. I recently gave a talk at [Flink Forward](https://www.flink-forward.org/) San Francisco 2019 and presented some of the integrations between the two frameworks for batch and streaming applications. In this post, I will give a short introduction to Apache Pulsar and its differentiating elements from other messaging systems and describe the ways that Pulsar and Flink can work together to provide a seamless developer experience for elastic data processing at scale.

## A brief introduction to Apache Pulsar

[Apache Pulsar](https://pulsar.apache.org/en/) is an open-source distributed pub-sub messaging system under the stewardship of the [Apache Software Foundation](https://www.apache.org/). Pulsar is a multi-tenant, high-performance solution for server-to-server messaging including multiple features such as native support for multiple clusters in a Pulsar instance, with seamless [geo-replication](https://pulsar.apache.org/docs/en/administration-geo) of messages across clusters, very low publish and end-to-end latency, seamless scalability to over a million topics, and guaranteed message delivery with [persistent message storage](https://pulsar.apache.org/docs/en/concepts-architecture-overview#persistent-storage) provided by [Apache BookKeeper](https://bookkeeper.apache.org/) among others. Let’s now discuss the primary differentiators between Pulsar and other pub-sub messaging frameworks: 

The first differentiating factor stems from the fact that although Pulsar provides a flexible pub-sub messaging system it is also backed by durable log storage — hence combining both messaging and storage under one framework. Because of that layered architecture, Pulsar provides instant failure recovery, independent scalability and balance-free cluster expansion. 

Pulsar’s architecture follows a similar pattern to other pub-sub systems as the framework is organized in topics as the main data entity, with producers sending data to, and consumers receiving data from a topic as shown in the diagram below.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/pulsar-flink/image-1.png&quot; width=&quot;400px&quot; alt=&quot;Pulsar producers and consumers&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

The second differentiator of Pulsar is that the framework is built from the get-go with [multi-tenancy](https://pulsar.apache.org/docs/en/concepts-multi-tenancy/) in mind. What that means is that each Pulsar topic has a hierarchical management structure making the allocation of resources as well as the resource management and coordination between teams efficient and easy. With Pulsar’s multi-tenancy structure, data platform maintainers can onboard new teams with no friction as Pulsar provides resource isolation at the property (tenant), namespace or topic level, while at the same time data can be shared across the cluster for easy collaboration and coordination.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/pulsar-flink/image-2.png&quot; width=&quot;640px&quot; alt=&quot;Apache Flink and Apache Pulsar&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

Finally, Pulsar’s flexible messaging framework unifies the streaming and queuing data consumption models and provides greater flexibility. As shown in the below diagram, Pulsar holds the data in the topic while multiple teams can consume the data independently depending on their workloads and data consumption patterns.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/pulsar-flink/image-3.png&quot; width=&quot;640px&quot; alt=&quot;Apache Flink and Apache Pulsar&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

## Pulsar’s view on data: Segmented data streams

Apache Flink is a streaming-first computation framework that perceives [batch processing as a special case of streaming]({{ site.baseurl }}/news/2019/02/13/unified-batch-streaming-blink.html). Flink’s view on data streams distinguishes batch and stream processing between bounded and unbounded data streams, assuming that for batch workloads the data stream is finite, with a beginning and an end.

Apache Pulsar has a similar perspective to that of Apache Flink with regards to the data layer. The framework also uses streams as a unified view on all data, while its layered architecture allows traditional pub-sub messaging for streaming workloads and continuous data processing or usage of *Segmented Streams* and bounded data stream for batch and static workloads. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/pulsar-flink/image-4.png&quot; width=&quot;640px&quot; alt=&quot;Apache Flink and Apache Pulsar&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

With Pulsar, once a producer sends data to a topic, it is partitioned depending on the data traffic and then further segmented under those partitions — using Apache Bookkeeper as segment store —  to allow for parallel data processing as illustrated in the diagram below. This allows a combination of traditional pub-sub messaging and distributed parallel computations in one framework.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/pulsar-flink/image-5.png&quot; width=&quot;640px&quot; alt=&quot;Apache Flink and Apache Pulsar&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

## When Flink + Pulsar come together

Apache Flink and Apache Pulsar integrate in multiple ways already. In the following sections, I will present some potential future integrations between the frameworks and share examples of existing ways in which you can utilize the frameworks together.

### Potential Integrations

Pulsar can integrate with Apache Flink in different ways. Some potential integrations include providing support for streaming workloads with the use of *Streaming Connectors* and support for batch workloads with the use of *Batch Source Connectors*. Pulsar also comes with native support for schema that can integrate with Flink and provide structured access to the data, for example by using Flink SQL as a way of querying data in Pulsar. Finally, an alternative way of integrating the technologies could include using Pulsar as a state backend with Flink. Since Pulsar has a layered architecture (*Streams* and *Segmented Streams*, powered by Apache Bookkeeper), it becomes natural to use Pulsar as a storage layer and store Flink state. 

From an architecture point of view, we can imagine the integration between the two frameworks as one that uses Apache Pulsar for a unified view of the data layer and Apache Flink as a unified computation and data processing framework and API. 


### Existing Integrations

Integration between the two frameworks is ongoing and developers can already use Pulsar with Flink in multiple ways. For example, Pulsar can be used as a streaming source and streaming sink in Flink DataStream applications. Developers can ingest data from Pulsar into a Flink job that makes computations and processes real-time data, to then send the data back to a Pulsar topic as a streaming sink. Such an example is shown below: 


```java
// create and configure Pulsar consumer
PulsarSourceBuilder&lt;String&gt;builder = PulsarSourceBuilder
   .builder(new SimpleStringSchema())
   .serviceUrl(serviceUrl)
   .topic(inputTopic)
   .subscriptionName(subscription);
SourceFunction&lt;String&gt; src = builder.build();
// ingest DataStream with Pulsar consumer
DataStream&lt;String&gt; words = env.addSource(src);

// perform computation on DataStream (here a simple WordCount)
DataStream&lt;WordWithCount&gt; wc = words
   .flatMap((FlatMapFunction&lt;String, WordWithCount&gt;) (word, collector) -&gt; {
       collector.collect(new WordWithCount(word, 1));
   })
   .returns(WordWithCount.class)
   .keyBy(&quot;word&quot;)
   .timeWindow(Time.seconds(5))
   .reduce((ReduceFunction&lt;WordWithCount&gt;) (c1, c2) -&gt;
       new WordWithCount(c1.word, c1.count + c2.count));

// emit result via Pulsar producer
wc.addSink(new FlinkPulsarProducer&lt;&gt;(
   serviceUrl,
   outputTopic,
   new AuthenticationDisabled(),
   wordWithCount -&gt; wordWithCount.toString().getBytes(UTF_8),
   wordWithCount -&gt; wordWithCount.word)
);
```

Another integration between the two frameworks that developers can take advantage of includes using Pulsar as both a streaming source and a streaming table sink for Flink SQL or Table API queries as shown in the example below:

```java
// obtain a DataStream with words
DataStream&lt;String&gt; words = ...

// register DataStream as Table &quot;words&quot; with two attributes (&quot;word&quot;, &quot;ts&quot;). 
//   &quot;ts&quot; is an event-time timestamp.
tableEnvironment.registerDataStream(&quot;words&quot;, words, &quot;word, ts.rowtime&quot;);

// create a TableSink that produces to Pulsar
TableSink sink = new PulsarJsonTableSink(
   serviceUrl,
   outputTopic,
   new AuthenticationDisabled(),
   ROUTING_KEY);

// register Pulsar TableSink as table &quot;wc&quot;
tableEnvironment.registerTableSink(
   &quot;wc&quot;,
   sink.configure(
      new String[]{&quot;word&quot;, &quot;cnt&quot;},
      new TypeInformation[]{Types.STRING, Types.LONG}));

// count words per 5 seconds and write result to table &quot;wc&quot;
tableEnvironment.sqlUpdate(
   &quot;INSERT INTO wc &quot; +
   &quot;SELECT word, COUNT(*) AS cnt &quot; +
   &quot;FROM words &quot; +
   &quot;GROUP BY word, TUMBLE(ts, INTERVAL &#39;5&#39; SECOND)&quot;);
```

Finally, Flink integrates with Pulsar for batch workloads as a batch sink where all results get pushed to Pulsar after Apache Flink has completed the computation in a static data set. Such an example is shown below: 

```java
// obtain DataSet from arbitrary computation
DataSet&lt;WordWithCount&gt; wc = ...

// create PulsarOutputFormat instance
OutputFormat pulsarOutputFormat = new PulsarOutputFormat(
   serviceUrl, 
   topic, 
   new AuthenticationDisabled(), 
   wordWithCount -&gt; wordWithCount.toString().getBytes());
// write DataSet to Pulsar
wc.output(pulsarOutputFormat);
```

## Conclusion

Both Pulsar and Flink share a similar view on how the data and the computation level of an application can be *“streaming-first”* with batch as a special case streaming. With Pulsar’s Segmented Streams approach and Flink’s steps to unify batch and stream processing workloads under one framework, there are numerous ways of integrating the two technologies together to provide elastic data processing at massive scale. Subscribe to the [Apache Flink]({{ site.baseurl }}/community.html#mailing-lists) and [Apache Pulsar](https://lists.apache.org/list.html?dev@pulsar.apache.org) mailing lists to stay up-to-date with the latest developments in this space or share your thoughts and recommendations with both communities.
</description>
<pubDate>Fri, 03 May 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/2019/05/03/pulsar-flink.html</link>
<guid isPermaLink="true">/2019/05/03/pulsar-flink.html</guid>
</item>

<item>
<title>Apache Flink&#39;s Application to Season of Docs</title>
<description>The Apache Flink community is happy to announce its application to the first edition of [Season of Docs](https://developers.google.com/season-of-docs/) by Google. The program is bringing together Open Source projects and technical writers to raise awareness for and improve documentation of Open Source projects. While the community is continuously looking for new contributors to collaborate on our documentation, we would like to take this chance to work with one or two technical writers to extend and restructure parts of [our documentation]({{ site.DOCS_BASE_URL }}flink-docs-stable/) (details below).

The community has discussed this opportunity on the [dev mailinglist](https://lists.apache.org/thread.html/3c789b6187da23ad158df59bbc598543b652e3cfc1010a14e294e16a@%3Cdev.flink.apache.org%3E) and agreed on three project ideas to submit to the program. We have a great team of mentors (Stephan, Fabian, David, Jark &amp; Konstantin) lined up and are very much looking forward to the first proposals by potential technical writers (given we are admitted to the program ;)). In case of questions feel free to reach out to the community via [dev@flink.apache.org](../../../../community.html#mailing-lists).

## Project Ideas List

### Project 1: Improve Documentation of Stream Processing Concepts

**Description:** Stream processing is the processing of data in motion―in other words, computing on data directly as it is produced or received. Apache Flink has pioneered the field of distributed, stateful stream processing over the last several years. As the community has pushed the boundaries of stream processing, we have introduced new concepts that users need to become familiar with to develop and operate Apache Flink applications efficiently.
The Apache Flink documentation \[1\] already contains a “concepts” section, but it is a ) incomplete and b) lacks an overall structure &amp; reading flow. In addition, “concepts”-content is also spread over the development \[2\] &amp; operations \[3\] documentation without references to the “concepts” section. An example of this can be found in \[4\] and \[5\].

In this project, we would like to restructure, consolidate and extend the concepts documentation for Apache Flink to better guide users who want to become productive as quickly as possible. This includes better conceptual introductions to topics such as event time, state, and fault tolerance with proper linking to and from relevant deployment and development guides.

**Related material:**

1. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/)
2. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev)
3. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops)
4. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/concepts/programming-model.html#time]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/concepts/programming-model.html#time)
5. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/event_time.html]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/event_time.html)

### Project 2: Improve Documentation of Flink Deployments &amp; Operations

**Description:** Stream processing is the processing of data in motion―in other words, computing on data directly as it is produced or received. Apache Flink has pioneered the field of distributed, stateful stream processing for the last few years. As a stateful distributed system in general and a continuously running, low-latency system in particular, Apache Flink deployments are non-trivial to setup and manage.
Unfortunately, the operations \[1\] and monitoring documentation \[2\] are arguably the weakest spots of the Apache Flink documentation. While it is comprehensive and often goes into a lot of detail, it lacks an overall structure and does not address common overarching concerns of operations teams in an efficient way.

In this project, we would like to restructure this part of the documentation and extend it if possible. Ideas for extension include: discussion of session and per-job clusters, better documentation for containerized deployments (incl. K8s), capacity planning &amp; integration into CI/CD pipelines.

**Related material:**

1. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/ops/)
2. [{{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/monitoring)

### Project 3: Improve Documentation for Relational APIs (Table API &amp; SQL)

**Description:** Apache Flink features APIs at different levels of abstraction which enables its users to trade conciseness for expressiveness. Flink’s relational APIs, SQL and the Table API, are “younger” than the DataStream and DataSet APIs, more high-level and focus on data analytics use cases. A core principle of Flink’s SQL and Table API is that they can be used to process static (batch) and continuous (streaming) data and that a program or query produces the same result in both cases.
The documentation of Flink’s relational APIs has organically grown and can be improved in a few areas. There are several on-going development efforts (e.g. Hive Integration, Python Support or Support for Interactive Programming) that aim to extend the scope of the Table API and SQL.

The existing documentation could be reorganized to prepare for covering the new features. Moreover, it could be improved by adding a concepts section that describes the use cases and internals of the APIs in more detail. Moreover, the documentation of built-in functions could be improved by adding more concrete examples.

**Related material:**

1. [Table API &amp; SQL docs main page]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table)
2. [Built-in functions]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table/functions.html)
3. [Concepts]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table/common.html)
4. [Streaming Concepts]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/dev/table/streaming/)

</description>
<pubDate>Wed, 17 Apr 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/04/17/sod.html</link>
<guid isPermaLink="true">/news/2019/04/17/sod.html</guid>
</item>

<item>
<title>Apache Flink 1.8.0 Release Announcement</title>
<description>The Apache Flink community is pleased to announce Apache Flink 1.8.0.  The
latest release includes more than 420 resolved issues and some exciting
additions to Flink that we describe in the following sections of this post.
Please check the [complete changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12344274)
for more details.

Flink 1.8.0 is API-compatible with previous 1.x.y releases for APIs annotated
with the `@Public` annotation.  The release is available now and we encourage
everyone to [download the release]({{ site.baseurl }}/downloads.html) and
check out the updated
[documentation]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/).
Feedback through the Flink [mailing
lists]({{ site.baseurl }}/community.html#mailing-lists) or
[JIRA](https://issues.apache.org/jira/projects/FLINK/summary) is, as always,
very much appreciated!

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html) on the Flink project site.

{% toc %}

With Flink 1.8.0 we come closer to our goals of enabling fast data processing
and building data-intensive applications for the Flink community in a seamless
way. We do this by cleaning up and refactoring Flink under the hood to allow
more efficient feature development in the future. This includes removal of the
legacy runtime components that were subsumed in the major rework of Flink&#39;s
underlying distributed system architecture
([FLIP-6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077))
as well as refactorings on the Table API that prepare it for the future
addition of the Blink enhancements
([FLINK-11439](https://issues.apache.org/jira/browse/FLINK-11439)).

Nevertheless, this release includes some important new features and bug fixes.
The most interesting of those are highlighted below. Please consult the
[complete changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12344274)
and the [release notes]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/release-notes/flink-1.8.html)
for more details.


## New Features and Improvements

* **Finalized State Schema Evolution Story**: This release completes
  the community driven effort to provide a schema evolution story for
  user state managed by Flink. This has been an effort that spanned 2
  releases, starting from 1.7.0 with the introduction of support for
  Avro state schema evolution as well as a revamped serialization
  compatibility abstraction.

  Flink 1.8.0 finalizes this effort by extending support for schema
  evolution to POJOs, upgrading all Flink built-in serializers to use
  the new serialization compatibility abstractions, as well as making it
  easier for advanced users who use custom state serializers to
  implement the abstractions.  These different aspects for a complete
  out-of-the-box schema evolution story are explained in detail below:

  1. Support for POJO state schema evolution: The pool of data types
     that support state schema evolution has been expanded to include
     POJOs. For state types that use POJOs, you can now add or remove
     fields from your POJO while retaining backwards
     compatibility. For a full overview of the list of data types that
     now support schema evolution as well as their evolution
     specifications and limitations, please refer to the State Schema
     Evolution documentation page.


  2. Upgrade all Flink serializers to use new serialization
     compatibility asbtractions: Back in 1.7.0, we introduced the new
     serialization compatibility abstractions `TypeSerializerSnapshot`
     and `TypeSerializerSchemaCompatibility`. Besides providing a more
     expressible API to reflect schema compatibility between the data
     stored in savepoints and the data registered at runtime, another
     important aspect about the new abstraction is that it avoids the
     need for Flink to Java-serialize the state serializer as state
     metadata in savepoints.

     In 1.8.0, all of Flink&#39;s built-in serializers have been upgraded to
     use the new abstractions, and therefore the serializers
     themselves are no longer Java-serialized into savepoints. This
     greatly improves interoperability of Flink savepoints, in terms
     of state schema evolvability. For example, one outcome was the
     support for POJO schema evolution, as previously mentioned
     above. Another outcome is that all composite data types supported
     by Flink (such as `Either`, Scala case classes, Flink Java
     `Tuple`s, etc.) are generally evolve-able as well when they have
     a nested evolvable type, such as a POJO. For example, the `MyPojo`
     type in `ValueState&lt;Tuple2&lt;Integer, MyPojo&gt;&gt;` or
     `ListState&lt;Either&lt;Integer, MyPojo&gt;&gt;`, which is a POJO, is allowed
     to evolve its schema.

     For users who are using custom `TypeSerializer` implementations
     for their state serializer and are still using the outdated
     abstractions (i.e. `TypeSerializerConfigSnapshot` and
     `CompatiblityResult`), we highly recommend upgrading to the new
     abstractions to be future proof. Please refer to the Custom State
     Serialization documentation page for a detailed description on
     the new abstractions.

  3. Provide pre-defined snapshot implementations for common
     serializers: For convenience, Flink 1.8.0 comes with two
     predefined implementations for the `TypeSerializerSnapshot` that
     make the task of implementing these new abstractions easier
     for most implementations of `TypeSerializer`s -
     `SimpleTypeSerializerSnapshot` and
     `CompositeTypeSerializerSnapshot`. This section in the
     documentation provides information on how to use these classes.

* **Continuous cleanup of old state based on TTL
  ([FLINK-7811](https://issues.apache.org/jira/browse/FLINK-7811))**: We
  introduced TTL (time-to-live) for Keyed state in Flink 1.6
  ([FLINK-9510](https://issues.apache.org/jira/browse/FLINK-9510)). This
  feature enabled cleanup and made keyed state entries inaccessible after a
  defined timeout. In addition state would now also be cleaned up when
  writing a savepoint/checkpoint.

  Flink 1.8 introduces continuous cleanup of old entries for both the RocksDB
  state backend
  ([FLINK-10471](https://issues.apache.org/jira/browse/FLINK-10471)) and the heap
  state backend
  ([FLINK-10473](https://issues.apache.org/jira/browse/FLINK-10473)). This means
  that old entries (according to the TTL setting) are continuously cleaned up.

* **SQL pattern detection with user-defined functions and
  aggregations**: The support of the MATCH_RECOGNIZE clause has been
  extended by multiple features.  The addition of user-defined
  functions allows for custom logic during pattern detection
  ([FLINK-10597](https://issues.apache.org/jira/browse/FLINK-10597)),
  while adding aggregations allows for more complex CEP definitions,
  such as the following
  ([FLINK-7599](https://issues.apache.org/jira/browse/FLINK-7599)).

  ```
  SELECT *
  FROM Ticker
      MATCH_RECOGNIZE (
          ORDER BY rowtime
          MEASURES
              AVG(A.price) AS avgPrice
          ONE ROW PER MATCH
          AFTER MATCH SKIP TO FIRST B
          PATTERN (A+ B)
          DEFINE
              A AS AVG(A.price) &lt; 15
      ) MR;
  ```

* **RFC-compliant CSV format ([FLINK-9964](https://issues.apache.org/jira/browse/FLINK-9964))**: The SQL tables can now be read and written in
  an RFC-4180 standard compliant CSV table format. The format might also be
  useful for general DataStream API users.

* **New KafkaDeserializationSchema that gives direct access to ConsumerRecord
  ([FLINK-8354](https://issues.apache.org/jira/browse/FLINK-8354))**: For the
  Flink `KafkaConsumers`, we introduced a new `KafkaDeserializationSchema` that
  gives direct access to the Kafka `ConsumerRecord`. This now allows access to
  all data that Kafka provides for a record, including the headers. This
  subsumes the `KeyedSerializationSchema` functionality, which is deprecated but
  still available for now.

* **Per-shard watermarking option in FlinkKinesisConsumer
  ([FLINK-5697](https://issues.apache.org/jira/browse/FLINK-5697))**: The Kinesis
  Consumer can now emit periodic watermarks that are derived from per-shard watermarks,
  for correct event time processing with subtasks that consume multiple Kinesis shards.

* **New consumer for DynamoDB Streams to capture table changes
  ([FLINK-4582](https://issues.apache.org/jira/browse/FLINK-4582))**: `FlinkDynamoDBStreamsConsumer`
  is a variant of the Kinesis consumer that supports retrieval of CDC-like streams from DynamoDB tables.

* **Support for global aggregates for subtask coordination
  ([FLINK-10887](https://issues.apache.org/jira/browse/FLINK-10887))**:
  Designed as a solution for global source watermark tracking, `GlobalAggregateManager`
  allows sharing of information between parallel subtasks. This feature will
  be integrated into streaming connectors for watermark synchronization and
  can be used for other purposes with a user defined aggregator.

## Important Changes

* **Changes to bundling of Hadoop libraries with Flink
  ([FLINK-11266](https://issues.apache.org/jira/browse/FLINK-11266))**:
  Convenience binaries that include hadoop are no longer released.

  If a deployment relies on `flink-shaded-hadoop2` being included in
  `flink-dist`, then you must manually download a pre-packaged Hadoop
  jar from the optional components section of the [download
  page]({{ site.baseurl }}/downloads.html) and copy it into the
  `/lib` directory.  Alternatively, a Flink distribution that includes
  hadoop can be built by packaging `flink-dist` and activating the
  `include-hadoop` maven profile.

  As hadoop is no longer included in `flink-dist` by default, specifying
  `-DwithoutHadoop` when packaging `flink-dist` no longer impacts the build.

* **FlinkKafkaConsumer will now filter restored partitions based on topic
  specification
  ([FLINK-10342](https://issues.apache.org/jira/browse/FLINK-10342))**:
  Starting from Flink 1.8.0, the `FlinkKafkaConsumer` now always filters out
  restored partitions that are no longer associated with a specified topic to
  subscribe to in the restored execution. This behaviour did not exist in
  previous versions of the `FlinkKafkaConsumer`. If you wish to retain the
  previous behaviour, please use the
  `disableFilterRestoredPartitionsWithSubscribedTopics()` configuration method
  on the `FlinkKafkaConsumer`.

  Consider this example: if you had a Kafka Consumer that was consuming from
  topic `A`, you did a savepoint, then changed your Kafka consumer to instead
  consume from topic `B`, and then restarted your job from the savepoint.
  Before this change, your consumer would now consume from both topic `A` and
  `B` because it was stored in state that the consumer was consuming from topic
  `A`. With the change, your consumer would only consume from topic `B` after
  restore because it now filters the topics that are stored in state using the
  configured topics.

 * **Change in the Maven modules of Table API
   ([FLINK-11064](https://issues.apache.org/jira/browse/FLINK-11064))**: Users
   that had a `flink-table` dependency before, need to update their
   dependencies to `flink-table-planner` and the correct dependency of
   `flink-table-api-*`, depending on whether Java or Scala is used: one of
   `flink-table-api-java-bridge` or `flink-table-api-scala-bridge`.

## Known Issues

* **Discarded checkpoint can cause Tasks to fail
  ([FLINK-11662](https://issues.apache.org/jira/browse/FLINK-11662))**: There is
  a race condition that can lead to erroneous checkpoint failures. This mostly
  occurs when restarting from a savepoint or checkpoint takes a long time at the
  sources of a job. If you see random checkpointing failures that don&#39;t seem to
  have a good explanation you might be affected. Please see the Jira issue for
  more details and a workaround for the problem.


## Release Notes

Please review the [release
notes]({{ site.DOCS_BASE_URL }}flink-docs-release-1.8/release-notes/flink-1.8.html)
for a more detailed list of changes and new features if you plan to upgrade
your Flink setup to Flink 1.8.

## List of Contributors

We would like to acknowledge all community members for contributing to this
release.  Special credits go to the following members for contributing to the
1.8.0 release (according to `git log --pretty=&quot;%an&quot; release-1.7.0..release-1.8.0 | sort | uniq` without manual deduplication):

Addison Higham, Aitozi, Aleksey Pak, Alexander Fedulov, Alexey Trenikhin, Aljoscha Krettek, Andrey Zagrebin, Artsem Semianenka, Asura7969, Avi, Barisa Obradovic, Benchao Li, Bo WANG, Chesnay Schepler, Congxian Qiu, Cristian, David Anderson, Dawid Wysakowicz, Dian Fu, DuBin, EAlexRojas, EronWright, Eugen Yushin, Fabian Hueske, Fokko Driesprong, Gary Yao, Hequn Cheng, Igal Shilman, Jamie Grier, JaryZhen, Jeff Zhang, Jihyun Cho, Jinhu Wu, Joerg Schad, KarmaGYZ, Kezhu Wang, Konstantin Knauf, Kostas Kloudas, Lakshmi, Lakshmi Gururaja Rao, Lavkesh Lahngir, Li, Shuangjiang, Mai Nakagawa, Matrix42, Matt, Maximilian Michels, Mododo, Nico Kruber, Paul Lin, Piotr Nowojski, Qi Yu, Qin, Robert, Robert Metzger, Romano Vacca, Rong Rong, Rune Skou Larsen, Seth Wiesman, Shannon Carey, Shimin Yang, Shuyi Chen, Stefan Richter, Stephan Ewen, SuXingLee, TANG Wen-hui, Tao Yang, Thomas Weise, Till Rohrmann, Timo Walther, Tom Goong, Tony Feng, Tony Wei, Tzu-Li (Gordon) Tai, Tzu-Li Chen, Ufuk Celebi, Xingcan Cui, Xpray, XuQianJin-Stars, Xue Yu, Yangze Guo, Ying Xu, Yiqun Lin, Yu Li, Yuanyang Wu, Yun Tang, ZILI CHEN, Zhanchun Zhang, Zhijiang, ZiLi Chen, acqua.csq, alex04.wang, ap, azagrebin, blueszheng, boshu Zheng, chengjie.wu, chensq, chummyhe89, eaglewatcherwb, hequn8128, ifndef-SleePy, intsmaze, jackyyin, jinhu.wjh, jparkie, jrthe42, junsheng.wu, kgorman, kkloudas, kkolman, klion26, lamber-ken, leesf, libenchao, lining, liuzhaokun, lzh3636, maqingxiang, mb-datadome, okidogi, park.yq, sunhaibotb, sunjincheng121, tison, unknown, vinoyang, wenhuitang, wind, xueyu, xuqianjin, yanghua, zentol, zhangzhanchun, zhijiang, zhuzhu.zz, zy, 仲炜, 砚田, 谢磊

</description>
<pubDate>Tue, 09 Apr 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/04/09/release-1.8.0.html</link>
<guid isPermaLink="true">/news/2019/04/09/release-1.8.0.html</guid>
</item>

<item>
<title>Flink and Prometheus: Cloud-native monitoring of streaming applications</title>
<description>This blog post describes how developers can leverage Apache Flink&#39;s built-in [metrics system]({{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html) together with [Prometheus](https://prometheus.io/) to observe and monitor streaming applications in an effective way. This is a follow-up post from my [Flink Forward](https://flink-forward.org/) Berlin 2018 talk ([slides](https://www.slideshare.net/MaximilianBode1/monitoring-flink-with-prometheus), [video](https://www.ververica.com/flink-forward-berlin/resources/monitoring-flink-with-prometheus)). We will cover some basic Prometheus concepts and why it is a great fit for monitoring Apache Flink stream processing jobs. There is also an example to showcase how you can utilize Prometheus with Flink to gain insights into your applications and be alerted on potential degradations of your Flink jobs.

## Why Prometheus?

Prometheus is a metrics-based monitoring system that was originally created in 2012. The system is completely open-source (under the Apache License 2) with a vibrant community behind it and it has graduated from the Cloud Native Foundation last year – a sign of maturity, stability and production-readiness. As we mentioned, the system is based on metrics and it is designed to measure the overall health, behavior and performance of a service. Prometheus features a multi-dimensional data model as well as a flexible query language. It is designed for reliability and can easily be deployed in traditional or containerized environments. Some of the important Prometheus concepts are:

* **Metrics:** Prometheus defines metrics as floats of information that change in time. These time series have millisecond precision.

* **Labels** are the key-value pairs associated with time series that support Prometheus&#39; flexible and powerful data model – in contrast to hierarchical data structures that one might experience with traditional metrics systems.

* **Scrape:** Prometheus is a pull-based system and fetches (&quot;scrapes&quot;) metrics data from specified sources that expose HTTP endpoints with a text-based format.

* **PromQL** is Prometheus&#39; [query language](https://prometheus.io/docs/prometheus/latest/querying/basics/). It can be used for both building dashboards and setting up alert rules that will trigger when specific conditions are met.

When considering metrics and monitoring systems for your Flink jobs, there are many [options]({{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html). Flink offers native support for exposing data to Prometheus via the `PrometheusReporter` configuration. Setting up this integration is very easy.

Prometheus is a great choice as usually Flink jobs are not running in isolation but in a greater context of microservices. For making metrics available to Prometheus from other parts of a larger system, there are two options: There exist [libraries for all major languages](https://prometheus.io/docs/instrumenting/clientlibs/) to instrument other applications. Additionally, there is a wide variety of [exporters](https://prometheus.io/docs/instrumenting/exporters/), which are tools that expose metrics of third-party systems (like databases or Apache Kafka) as Prometheus metrics.

## Prometheus and Flink in Action

We have provided a [GitHub repository](https://github.com/mbode/flink-prometheus-example) that demonstrates the integration described above. To have a look, clone the repository, make sure [Docker](https://docs.docker.com/install/) is installed and run: 

```
./gradlew composeUp
```

This builds a Flink job using the build tool [Gradle](https://gradle.org/) and starts up a local environment based on [Docker Compose](https://docs.docker.com/compose/) running the job in a [Flink job cluster]({{ site.DOCS_BASE_URL }}flink-docs-release-1.7/ops/deployment/docker.html#flink-job-cluster) (reachable at [http://localhost:8081](http://localhost:8081/)) as well as a Prometheus instance ([http://localhost:9090](http://localhost:9090/)).

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-03-11-prometheus-monitoring/prometheusexamplejob.png&quot; width=&quot;600px&quot; alt=&quot;PrometheusExampleJob in Flink Web UI&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Job graph and custom metric for example job in Flink web interface.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

The `PrometheusExampleJob` has three operators: Random numbers up to 10,000 are generated, then a map counts the events and creates a histogram of the values passed through. Finally, the events are discarded without further output. The very simple code below is from the second operator. It illustrates how easy it is to add custom metrics relevant to your business logic into your Flink job.

```java
class FlinkMetricsExposingMapFunction extends RichMapFunction&lt;Integer, Integer&gt; {
  private transient Counter eventCounter;

  @Override
  public void open(Configuration parameters) {
    eventCounter = getRuntimeContext().getMetricGroup().counter(&quot;events&quot;);
  }

  @Override
  public Integer map(Integer value) {
    eventCounter.inc();
    return value;
  }
}
```
&lt;center&gt;&lt;i&gt;&lt;small&gt;Excerpt from &lt;a href=&quot;https://github.com/mbode/flink-prometheus-example/blob/master/src/main/java/com/github/mbode/flink_prometheus_example/FlinkMetricsExposingMapFunction.java&quot;&gt;FlinkMetricsExposingMapFunction.java&lt;/a&gt; demonstrating custom Flink metric.&lt;/small&gt;&lt;/i&gt;&lt;/center&gt;

## Configuring Prometheus with Flink

To start monitoring Flink with Prometheus, the following steps are necessary:

1. Make the `PrometheusReporter` jar available to the classpath of the Flink cluster (it comes with the Flink distribution):

        cp /opt/flink/opt/flink-metrics-prometheus-1.7.2.jar /opt/flink/lib

2. [Configure the reporter]({{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html#reporter) in Flink&#39;s _flink-conf.yaml_. All job managers and task managers will expose the metrics on the configured port.

        metrics.reporters: prom
        metrics.reporter.prom.class: org.apache.flink.metrics.prometheus.PrometheusReporter
        metrics.reporter.prom.port: 9999

3. Prometheus needs to know where to scrape metrics. In a static scenario, you can simply [configure Prometheus](https://prometheus.io/docs/prometheus/latest/configuration/configuration/) in _prometheus.yml_ with the following:

        scrape_configs:
        - job_name: &#39;flink&#39;
          static_configs:
          - targets: [&#39;job-cluster:9999&#39;, &#39;taskmanager1:9999&#39;, &#39;taskmanager2:9999&#39;]

    In more dynamic scenarios we recommend using Prometheus&#39; service discovery support for different platforms such as Kubernetes, AWS EC2 and more.

Both custom metrics are now available in Prometheus:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-03-11-prometheus-monitoring/prometheus.png&quot; width=&quot;600px&quot; alt=&quot;Prometheus web UI with example metric&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Example metric in Prometheus web UI.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

More technical metrics from the Flink cluster (like checkpoint sizes or duration, Kafka offsets or resource consumption) are also available. If you are interested, you can check out the HTTP endpoints exposing all Prometheus metrics for the job managers and the two task managers on [http://localhost:9249](http://localhost:9249/metrics), [http://localhost:9250](http://localhost:9250/metrics) and [http://localhost:9251](http://localhost:9251/metrics), respectively.

To test Prometheus&#39; alerting feature, kill one of the Flink task managers via

```
docker kill taskmanager1
```

Our Flink job can recover from this partial failure via the mechanism of [Checkpointing]({{ site.DOCS_BASE_URL }}flink-docs-release-1.7/dev/stream/state/checkpointing.html). Nevertheless, after roughly one minute (as configured in the alert rule) the following alert will fire:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-03-11-prometheus-monitoring/prometheusalerts.png&quot; width=&quot;600px&quot; alt=&quot;Prometheus web UI with example alert&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Example alert in Prometheus web UI.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

In real-world situations alerts like this one can be routed through a component called [Alertmanager](https://prometheus.io/docs/alerting/alertmanager/) and be grouped into notifications to systems like email, PagerDuty or Slack.

Go ahead and play around with the setup, and check out the [Grafana](https://grafana.com/grafana) instance reachable at [http://localhost:3000](http://localhost:3000/) (credentials _admin:flink_) for visualizing Prometheus metrics. If there are any questions or problems, feel free to [create an issue](https://github.com/mbode/flink-prometheus-example/issues). Once finished, do not forget to tear down the setup via

```
./gradlew composeDown
```
&lt;br/&gt;

## Conclusion

Using Prometheus together with Flink provides an easy way for effective monitoring and alerting of your Flink jobs. Both projects have exciting and vibrant communities behind them with new developments and additions scheduled for upcoming releases. We encourage you to try the two technologies together as it has immensely improved our insights into Flink jobs running in production.
</description>
<pubDate>Mon, 11 Mar 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/features/2019/03/11/prometheus-monitoring.html</link>
<guid isPermaLink="true">/features/2019/03/11/prometheus-monitoring.html</guid>
</item>

<item>
<title>What to expect from Flink Forward San Francisco 2019</title>
<description>The third annual Flink Forward San Francisco is just a few weeks away! As always, Flink Forward will be the right place to meet and mingle with experienced Flink users, contributors, and committers. Attendees will hear and chat about the latest developments around Flink and learn from technical deep-dive sessions and exciting use cases that were put into production with Flink. The event will take place on April 1-2, 2019 at Hotel Nikko in San Francisco. The [program committee](https://sf-2019.flink-forward.org/program-committee) assembled an amazing [lineup of speakers](https://sf-2019.flink-forward.org/speakers) who will cover many different aspects of Apache Flink and stream processing. 

Some highlights of the program are:

* [Realtime Store Visit Predictions at Scale](https://sf-2019.flink-forward.org/conference-program#realtime-store-visit-predictions-at-scale): Luca Giovagnoli from *Yelp* will talk about a &quot;multidisciplinary&quot; Flink application that combines geospatial clustering algorithms, Machine Learning models, and cutting-edge stream-processing technology.

* [Real-time Processing with Flink for Machine Learning at Netflix](https://sf-2019.flink-forward.org/conference-program#real-time-processing-with-flink-for-machine-learning-at-netflix): Elliot Chow will discuss the practical aspects of using Apache Flink to power Machine Learning algorithms for video recommendations, search results ranking, and selection of artwork images at *Netflix*.

* [Building production Flink jobs with Airstream at Airbnb](https://sf-2019.flink-forward.org/conference-program#building-production-flink-jobs-with-airstream-at-airbnb): Pala Muthiah and Hao Wang will reveal how *Airbnb* builds real time data pipelines with Airstream, Airbnb&#39;s computation framework that is powered by Flink SQL.

* [When Table meets AI: Build Flink AI Ecosystem on Table API](https://sf-2019.flink-forward.org/conference-program#when-table-meets-ai--build-flink-ai-ecosystem-on-table-api): Shaoxuan Wang from *Alibaba* will discuss how they are building a solid AI ecosystem for unified batch/streaming Machine Learning data pipelines on top of Flink&#39;s Table API.

* [Adventures in Scaling from Zero to 5 Billion Data Points per Day](https://sf-2019.flink-forward.org/conference-program#adventures-in-scaling-from-zero-to-5-billion-data-points-per-day): Dave Torok will take us through *Comcast&#39;s* journey in scaling the company&#39;s operationalized Machine Learning framework from the very early days in production to processing more than 5 billion data points per day.

If you&#39;re new to Apache Flink or want to deepen your knowledge around the framework, Flink Forward features again a full day of training. 

You can choose from 3 training tracks:

* [Introduction to Streaming with Apache Flink](https://sf-2019.flink-forward.org/training-program#introduction-to-streaming-with-apache-flink): A hands-on, in-depth introduction to stream processing and Apache Flink, this course emphasizes those features of Flink that make it easy to build and manage accurate, fault tolerant applications on streams.

* [Analyzing Streaming Data with Flink SQL](https://sf-2019.flink-forward.org/training-program#analyzing-streaming-data-with-flink-sql): In this hands-on training, you will learn what it means to run SQL queries on data streams and how to fully leverage the potential of SQL on Flink. We&#39;ll also cover some of the more recent features such as time-versioned joins and the MATCH RECOGNIZE clause.

* [Troubleshooting and Operating Flink at large scale](https://sf-2019.flink-forward.org/training-program#apache-flink-troubleshooting---operations): In this training, we will focus on everything you need to run Apache Flink applications reliably and efficiently in production including topics like capacity planning, monitoring, troubleshooting and tuning Apache Flink.

If you haven&#39;t done so yet, check out the [full schedule](http://sf-2019.flink-forward.org/conference-program) and [register](https://sf-2019.flink-forward.org/register) your attendance. &lt;br&gt;
I&#39;m looking forward to meet you at Flink Forward San Francisco.

*Fabian*</description>
<pubDate>Wed, 06 Mar 2019 11:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/03/06/ffsf-preview.html</link>
<guid isPermaLink="true">/news/2019/03/06/ffsf-preview.html</guid>
</item>

<item>
<title>Monitoring Apache Flink Applications 101</title>
<description>&lt;!-- improve style of tables --&gt;
&lt;style&gt;
  table { border: 0px solid black; table-layout: auto; width: 800px; }
  th, td { border: 1px solid black; padding: 5px; padding-left: 10px; padding-right: 10px; }
  th { text-align: center }
  td { vertical-align: top }
&lt;/style&gt;

This blog post provides an introduction to Apache Flink’s built-in monitoring
and metrics system, that allows developers to effectively monitor their Flink
jobs. Oftentimes, the task of picking the relevant metrics to monitor a
Flink application can be overwhelming for a DevOps team that is just starting
with stream processing and Apache Flink. Having worked with many organizations
that deploy Flink at scale, I would like to share my experience and some best
practice with the community.

With business-critical applications running on Apache Flink, performance monitoring
becomes an increasingly important part of a successful production deployment. It 
ensures that any degradation or downtime is immediately identified and resolved
as quickly as possible.

Monitoring goes hand-in-hand with observability, which is a prerequisite for
troubleshooting and performance tuning. Nowadays, with the complexity of modern
enterprise applications and the speed of delivery increasing, an engineering
team must understand and have a complete overview of its applications’ status at
any given point in time.

## Flink’s Metrics System

The foundation for monitoring Flink jobs is its [metrics
system](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html&gt;)
which consists of two components; `Metrics` and `MetricsReporters`.

### Metrics

Flink comes with a comprehensive set of built-in metrics such as:

* Used JVM Heap / NonHeap / Direct Memory (per Task-/JobManager)
* Number of Job Restarts (per Job)
* Number of Records Per Second (per Operator)
* ...

These metrics have different scopes and measure more general (e.g. JVM or
operating system) as well as Flink-specific aspects.

As a user, you can and should add application-specific metrics to your
functions. Typically these include counters for the number of invalid records or
the number of records temporarily buffered in managed state. Besides counters,
Flink offers additional metrics types like gauges and histograms. For
instructions on how to register your own metrics with Flink’s metrics system
please check out [Flink’s
documentation](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html#registering-metrics&gt;).
In this blog post, we will focus on how to get the most out of Flink’s built-in
metrics.

### MetricsReporters

All metrics can be queried via Flink’s REST API. However, users can configure
MetricsReporters to send the metrics to external systems. Apache Flink provides
reporters to the most common monitoring tools out-of-the-box including JMX,
Prometheus, Datadog, Graphite and InfluxDB. For information about how to
configure a reporter check out Flink’s [MetricsReporter
documentation](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html#reporter&gt;).

In the remaining part of this blog post, we will go over some of the most
important metrics to monitor your Apache Flink application.

## Monitoring General Health

The first thing you want to monitor is whether your job is actually in a *RUNNING*
state. In addition, it pays off to monitor the number of restarts and the time
since the last restart.

Generally speaking, successful checkpointing is a strong indicator of the
general health of your application. For each checkpoint, checkpoint barriers
need to flow through the whole topology of your Flink job and events and
barriers cannot overtake each other. Therefore, a successful checkpoint shows
that no channel is fully congested.

**Key Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`uptime` | job | The time that the job has been running without interruption. |
`fullRestarts` | job | The total number of full restarts since this job was submitted. |
`numberOfCompletedCheckpoints` | job | The number of successfully completed checkpoints. |
`numberOfFailedCheckpoints` | job | The number of failed checkpoints. |

&lt;br/&gt;

**Example Dashboard Panels**

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-1.png&quot; width=&quot;800px&quot; alt=&quot;Uptime (35 minutes), Restarting Time (3 milliseconds) and Number of Full Restarts (7)&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Uptime (35 minutes), Restarting Time (3 milliseconds) and Number of Full Restarts (7)&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-2.png&quot; width=&quot;800px&quot; alt=&quot;Completed Checkpoints (18336), Failed (14)&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Completed Checkpoints (18336), Failed (14)&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

**Possible Alerts**

* `ΔfullRestarts` &amp;gt; `threshold`
* `ΔnumberOfFailedCheckpoints` &amp;gt; `threshold`


## Monitoring Progress &amp; Throughput

Knowing that your application is RUNNING and checkpointing is working fine is good,
but it does not tell you whether the application is actually making progress and
keeping up with the upstream systems.

### Throughput

Flink provides multiple metrics to measure the throughput of our application.
For each operator or task (remember: a task can contain multiple [chained
tasks](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/dev/stream/operators/#task-chaining-and-resource-groups&gt;)
Flink counts the number of records and bytes going in and out. Out of those
metrics, the rate of outgoing records per operator is often the most intuitive
and easiest to reason about.

**Key Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`numRecordsOutPerSecond` | task | The number of records this operator/task sends per second. |
`numRecordsOutPerSecond` | operator | The number of records this operator sends per second. |

&lt;br/&gt;

**Example Dashboard Panels**

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-3.png&quot; width=&quot;800px&quot; alt=&quot;Mean Records Out per Second per Operator&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Mean Records Out per Second per Operator&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

**Possible Alerts**

* `recordsOutPerSecond` = `0` (for a non-Sink operator)

_Note_: Source operators always have zero incoming records. Sink operators
always have zero outgoing records because the metrics only count
Flink-internal communication. There is a [JIRA
ticket](&lt;https://issues.apache.org/jira/browse/FLINK-7286&gt;) to change this
behavior.

### Progress

For applications, that use event time semantics, it is important that watermarks
progress over time. A watermark of time _t_ tells the framework, that it
should not anymore expect to receive  events with a timestamp earlier than _t_,
and in turn, to trigger all operations that were scheduled for a timestamp &amp;lt; _t_.
For example, an event time window that ends at _t_ = 30 will be closed and
evaluated once the watermark passes 30.

As a consequence, you should monitor the watermark at event time-sensitive
operators in your application, such as process functions and windows. If the
difference between the current processing time and the watermark, known as
even-time skew, is unusually high, then it typically implies one of two issues.
First, it could mean that your are simply processing old events, for example
during catch-up after a downtime or when your job is simply not able to keep up
and events are queuing up. Second, it could mean a single upstream sub-task has
not sent a watermark for a long time (for example because it did not receive any
events to base the watermark on), which also prevents the watermark in
downstream operators to progress. This [JIRA
ticket](&lt;https://issues.apache.org/jira/browse/FLINK-5017&gt;) provides further
information and a work around for the latter.

**Key Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`currentOutputWatermark` | operator | The last watermark this operator has emitted. |

&lt;br/&gt;

**Example Dashboard Panels**

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-4.png&quot; width=&quot;800px&quot; alt=&quot;Event Time Lag per Subtask of a single operator in the topology. In this case, the watermark is lagging a few seconds behind for each subtask.&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Event Time Lag per Subtask of a single operator in the topology. In this case, the watermark is lagging a few seconds behind for each subtask.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

**Possible Alerts**

* `currentProcessingTime - currentOutputWatermark` &amp;gt; `threshold`

### &quot;Keeping Up&quot;

When consuming from a message queue, there is often a direct way to monitor if
your application is keeping up. By using connector-specific metrics you can
monitor how far behind the head of the message queue your current consumer group
is. Flink forwards the underlying metrics from most sources.

**Key Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`records-lag-max` | user | applies to `FlinkKafkaConsumer`. The maximum lag in terms of the number of records for any partition in this window. An increasing value over time is your best indication that the consumer group is not keeping up with the producers. |
`millisBehindLatest` | user | applies to `FlinkKinesisConsumer`. The number of milliseconds a consumer is behind the head of the stream. For any consumer and Kinesis shard, this indicates how far it is behind the current time. |

&lt;br/&gt;

**Possible Alerts**

* `records-lag-max`  &amp;gt; `threshold`
* `millisBehindLatest` &amp;gt; `threshold`

## Monitoring Latency

Generally speaking, latency is the delay between the creation of an event and
the time at which results based on this event become visible. Once the event is
created it is usually stored in a persistent message queue, before it is
processed by Apache Flink, which then writes the results to a database or calls
a downstream system. In such a pipeline, latency can be introduced at each stage
and for various reasons including the following:

1. It might take a varying amount of time until events are persisted in the
message queue.
2. During periods of high load or during recovery, events might spend some time
in the message queue until they are processed by Flink (see previous section).
3. Some operators in a streaming topology need to buffer events for some time
(e.g. in a time window) for functional reasons.
4. Each computation in your Flink topology (framework or user code), as well as
each network shuffle, takes time and adds to latency.
5. If the application emits through a transactional sink, the sink will only
commit and publish transactions upon successful checkpoints of Flink, adding
latency usually up to the checkpointing interval for each record.

In practice, it has proven invaluable to add timestamps to your events at
multiple stages (at least at creation, persistence, ingestion by Flink,
publication by Flink, possibly sampling those to save bandwidth). The
differences between these timestamps can be exposed as a user-defined metric in
your Flink topology to derive the latency distribution of each stage.

In the rest of this section, we will only consider latency, which is introduced
inside the Flink topology and cannot be attributed to transactional sinks or
events being buffered for functional reasons (4.).

To this end, Flink comes with a feature called [Latency
Tracking](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html#latency-tracking&gt;).
When enabled, Flink will insert so-called latency markers periodically at all
sources. For each sub-task, a latency distribution from each source to this
operator will be reported. The granularity of these histograms can be further
controlled by setting _metrics.latency.granularity_ as desired.

Due to the potentially high number of histograms (in particular for
_metrics.latency.granularity: subtask_), enabling latency tracking can
significantly impact the performance of the cluster. It is recommended to only
enable it to locate sources of latency during debugging.

**Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`latency` | operator | The latency from the source operator to this operator. |
`restartingTime` | job | The time it took to restart the job, or how long the current restart has been in progress. |

&lt;br/&gt;

**Example Dashboard Panel**

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-5.png&quot; width=&quot;800px&quot; alt=&quot;Latency distribution between a source and a single sink subtask.&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;Latency distribution between a source and a single sink subtask.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

## JVM Metrics

So far we have only looked at Flink-specific metrics. As long as latency &amp;
throughput of your application are in line with your expectations and it is
checkpointing consistently, this is probably everything you need. On the other
hand, if you job’s performance is starting to degrade among the firstmetrics you
want to look at are memory consumption and CPU load of your Task- &amp; JobManager
JVMs.

### Memory

Flink reports the usage of Heap, NonHeap, Direct &amp; Mapped memory for JobManagers
and TaskManagers. 

* Heap memory - as with most JVM applications - is the most volatile and important
metric to watch. This is especially true when using Flink’s filesystem
statebackend as it keeps all state objects on the JVM Heap. If the size of
long-living objects on the Heap increases significantly, this can usually be
attributed to the size of your application state (check the 
[checkpointing metrics](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html#checkpointing&gt;)
for an estimated size of the on-heap state). The possible reasons for growing
state are very application-specific. Typically, an increasing number of keys, a
large event-time skew between different input streams or simply missing state
cleanup may cause growing state.

* NonHeap memory is dominated by the metaspace, the size of which is unlimited by default
and holds class metadata as well as static content. There is a 
[JIRA Ticket](&lt;https://issues.apache.org/jira/browse/FLINK-10317&gt;) to limit the size
to 250 megabyte by default. 

* The biggest driver of Direct memory is by far the
number of Flink’s network buffers, which can be
[configured](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/ops/config.html#configuring-the-network-buffers&gt;).

* Mapped memory is usually close to zero as Flink does not use memory-mapped files.

In a containerized environment you should additionally monitor the overall
memory consumption of the Job- and TaskManager containers to ensure they don’t
exceed their resource limits. This is particularly important, when using the
RocksDB statebackend, since RocksDB allocates a considerable amount of
memory off heap. To understand how much memory RocksDB might use, you can
checkout [this blog
post](&lt;https://www.da-platform.com/blog/manage-rocksdb-memory-size-apache-flink&gt;)
by Stefan Richter.

**Key Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`Status.JVM.Memory.NonHeap.Committed` | job-/taskmanager | The amount of non-heap memory guaranteed to be available to the JVM (in bytes). |
`Status.JVM.Memory.Heap.Used` | job-/taskmanager | The amount of heap memory currently used (in bytes). |
`Status.JVM.Memory.Heap.Committed` | job-/taskmanager | The amount of heap memory guaranteed to be available to the JVM (in bytes). |
`Status.JVM.Memory.Direct.MemoryUsed` | job-/taskmanager | The amount of memory used by the JVM for the direct buffer pool (in bytes). |
`Status.JVM.Memory.Mapped.MemoryUsed` | job-/taskmanager | The amount of memory used by the JVM for the mapped buffer pool (in bytes). |
`Status.JVM.GarbageCollector.G1 Young Generation.Time` | job-/taskmanager | The total time spent performing G1 Young Generation garbage collection. |
`Status.JVM.GarbageCollector.G1 Old Generation.Time` | job-/taskmanager | The total time spent performing G1 Old Generation garbage collection. |

&lt;br/&gt;

**Example Dashboard Panel**

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-6.png&quot; width=&quot;800px&quot; alt=&quot;TaskManager memory consumption and garbage collection times.&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;TaskManager memory consumption and garbage collection times.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-7.png&quot; width=&quot;800px&quot; alt=&quot;JobManager memory consumption and garbage collection times.&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;JobManager memory consumption and garbage collection times.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

**Possible Alerts**

* `container memory limit` &amp;lt; `container memory + safety margin`

### CPU

Besides memory, you should also monitor the CPU load of the TaskManagers. If
your TaskManagers are constantly under very high load, you might be able to
improve the overall performance by decreasing the number of task slots per
TaskManager (in case of a Standalone setup), by providing more resources to the
TaskManager (in case of a containerized setup), or by providing more
TaskManagers. In general, a system already running under very high load during
normal operations, will need much more time to catch-up after recovering from a
downtime. During this time you will see a much higher latency (event-time skew) than
usual.

A sudden increase in the CPU load might also be attributed to high garbage
collection pressure, which should be visible in the JVM memory metrics as well.

If one or a few TaskManagers are constantly under very high load, this can slow
down the whole topology due to long checkpoint alignment times and increasing
event-time skew. A common reason is skew in the partition key of the data, which
can be mitigated by pre-aggregating before the shuffle or keying on a more
evenly distributed key.

**Key Metrics**

Metric | Scope | Description |
------ | ----- | ----------- |
`Status.JVM.CPU.Load` | job-/taskmanager | The recent CPU usage of the JVM. |

&lt;br/&gt;

**Example Dashboard Panel**

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/2019-02-21-monitoring-best-practices/fig-8.png&quot; width=&quot;800px&quot; alt=&quot;TaskManager &amp; JobManager CPU load.&quot;/&gt;
&lt;br/&gt;
&lt;i&gt;&lt;small&gt;TaskManager &amp; JobManager CPU load.&lt;/small&gt;&lt;/i&gt;
&lt;/center&gt;
&lt;br/&gt;

## System Resources

In addition to the JVM metrics above, it is also possible to use Flink’s metrics
system to gather insights about system resources, i.e. memory, CPU &amp;
network-related metrics for the whole machine as opposed to the Flink processes
alone. System resource monitoring is disabled by default and requires additional
dependencies on the classpath. Please check out the 
[Flink system resource metrics documentation](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html#system-resources&gt;) for
additional guidance and details. System resource monitoring in Flink can be very
helpful in setups without existing host monitoring capabilities.

## Conclusion

This post tries to shed some light on Flink’s metrics and monitoring system. You
can utilise it as a starting point when you first think about how to
successfully monitor your Flink application. I highly recommend to start
monitoring your Flink application early on in the development phase. This way
you will be able to improve your dashboards and alerts over time and, more
importantly, observe the performance impact of the changes to your application
throughout the development phase. By doing so, you can ask the right questions
about the runtime behaviour of your application, and learn much more about
Flink’s internals early on.

Last but not least, this post only scratches the surface of the overall metrics
and monitoring capabilities of Apache Flink. I highly recommend going over
[Flink’s metrics documentation](&lt;{{ site.DOCS_BASE_URL }}flink-docs-release-1.7/monitoring/metrics.html&gt;)
for a full reference of Flink’s metrics system.</description>
<pubDate>Mon, 25 Feb 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/02/25/monitoring-best-practices.html</link>
<guid isPermaLink="true">/news/2019/02/25/monitoring-best-practices.html</guid>
</item>

<item>
<title>Apache Flink 1.6.4 Released</title>
<description>The Apache Flink community released the fourth bugfix version of the Apache Flink 1.6 series.

This release includes more than 25 fixes and minor improvements for Flink 1.6.3. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.6.4.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.6.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.4&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10721&#39;&gt;FLINK-10721&lt;/a&gt;] -         Kafka discovery-loop exceptions may be swallowed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10761&#39;&gt;FLINK-10761&lt;/a&gt;] -         MetricGroup#getAllVariables can deadlock
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10774&#39;&gt;FLINK-10774&lt;/a&gt;] -         connection leak when partition discovery is disabled and open throws exception
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10848&#39;&gt;FLINK-10848&lt;/a&gt;] -         Flink&amp;#39;s Yarn ResourceManager can allocate too many excess containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11022&#39;&gt;FLINK-11022&lt;/a&gt;] -         Update LICENSE and NOTICE files for older releases
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11071&#39;&gt;FLINK-11071&lt;/a&gt;] -         Dynamic proxy classes cannot be resolved when deserializing job graph
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11084&#39;&gt;FLINK-11084&lt;/a&gt;] -         Incorrect ouput after two consecutive split and select
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11119&#39;&gt;FLINK-11119&lt;/a&gt;] -         Incorrect Scala example for Table Function
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11134&#39;&gt;FLINK-11134&lt;/a&gt;] -         Invalid REST API request should not log the full exception in Flink logs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11151&#39;&gt;FLINK-11151&lt;/a&gt;] -         FileUploadHandler stops working if the upload directory is removed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11173&#39;&gt;FLINK-11173&lt;/a&gt;] -         Proctime attribute validation throws an incorrect exception message
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11224&#39;&gt;FLINK-11224&lt;/a&gt;] -         Log is missing in scala-shell
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11232&#39;&gt;FLINK-11232&lt;/a&gt;] -         Empty Start Time of sub-task on web dashboard
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11234&#39;&gt;FLINK-11234&lt;/a&gt;] -         ExternalTableCatalogBuilder unable to build a batch-only table
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11235&#39;&gt;FLINK-11235&lt;/a&gt;] -         Elasticsearch connector leaks threads if no connection could be established
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11251&#39;&gt;FLINK-11251&lt;/a&gt;] -         Incompatible metric name on prometheus reporter
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11389&#39;&gt;FLINK-11389&lt;/a&gt;] -         Incorrectly use job information when call getSerializedTaskInformation in class TaskDeploymentDescriptor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11584&#39;&gt;FLINK-11584&lt;/a&gt;] -         ConfigDocsCompletenessITCase fails DescriptionBuilder#linebreak() is used
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11585&#39;&gt;FLINK-11585&lt;/a&gt;] -         Prefix matching in ConfigDocsGenerator can result in wrong assignments
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10910&#39;&gt;FLINK-10910&lt;/a&gt;] -         Harden Kubernetes e2e test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11079&#39;&gt;FLINK-11079&lt;/a&gt;] -         Skip deployment for flnk-storm-examples
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11207&#39;&gt;FLINK-11207&lt;/a&gt;] -         Update Apache commons-compress from 1.4.1 to 1.18
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11262&#39;&gt;FLINK-11262&lt;/a&gt;] -         Bump jython-standalone to 2.7.1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11289&#39;&gt;FLINK-11289&lt;/a&gt;] -         Rework example module structure to account for licensing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11304&#39;&gt;FLINK-11304&lt;/a&gt;] -         Typo in time attributes doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11469&#39;&gt;FLINK-11469&lt;/a&gt;] -         fix Tuning Checkpoints and Large State doc
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/02/25/release-1.6.4.html</link>
<guid isPermaLink="true">/news/2019/02/25/release-1.6.4.html</guid>
</item>

<item>
<title>Apache Flink 1.7.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.7 series.

This release includes more than 40 fixes and minor improvements for Flink 1.7.1, covering several critical
recovery issues as well as problems in the Flink streaming connectors.

The list below includes a detailed list of all fixes.
We highly recommend all users to upgrade to Flink 1.7.2.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.7.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.7.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.7.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11179&#39;&gt;FLINK-11179&lt;/a&gt;] -          JoinCancelingITCase#testCancelSortMatchWhileDoingHeavySorting test error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11180&#39;&gt;FLINK-11180&lt;/a&gt;] -         ProcessFailureCancelingITCase#testCancelingOnProcessFailure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11181&#39;&gt;FLINK-11181&lt;/a&gt;] -         SimpleRecoveryITCaseBase test error
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10721&#39;&gt;FLINK-10721&lt;/a&gt;] -         Kafka discovery-loop exceptions may be swallowed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10761&#39;&gt;FLINK-10761&lt;/a&gt;] -         MetricGroup#getAllVariables can deadlock
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10774&#39;&gt;FLINK-10774&lt;/a&gt;] -         connection leak when partition discovery is disabled and open throws exception
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10848&#39;&gt;FLINK-10848&lt;/a&gt;] -         Flink&amp;#39;s Yarn ResourceManager can allocate too many excess containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11046&#39;&gt;FLINK-11046&lt;/a&gt;] -         ElasticSearch6Connector cause thread blocked when index failed with retry
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11071&#39;&gt;FLINK-11071&lt;/a&gt;] -         Dynamic proxy classes cannot be resolved when deserializing job graph
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11083&#39;&gt;FLINK-11083&lt;/a&gt;] -         CRowSerializerConfigSnapshot is not instantiable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11084&#39;&gt;FLINK-11084&lt;/a&gt;] -         Incorrect ouput after two consecutive split and select
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11100&#39;&gt;FLINK-11100&lt;/a&gt;] -         Presto S3 FileSystem E2E test broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11119&#39;&gt;FLINK-11119&lt;/a&gt;] -         Incorrect Scala example for Table Function
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11134&#39;&gt;FLINK-11134&lt;/a&gt;] -         Invalid REST API request should not log the full exception in Flink logs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11145&#39;&gt;FLINK-11145&lt;/a&gt;] -         Fix Hadoop version handling in binary release script
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11151&#39;&gt;FLINK-11151&lt;/a&gt;] -         FileUploadHandler stops working if the upload directory is removed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11168&#39;&gt;FLINK-11168&lt;/a&gt;] -         LargePlanTest times out on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11173&#39;&gt;FLINK-11173&lt;/a&gt;] -         Proctime attribute validation throws an incorrect exception message
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11187&#39;&gt;FLINK-11187&lt;/a&gt;] -         StreamingFileSink with S3 backend transient socket timeout issues 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11191&#39;&gt;FLINK-11191&lt;/a&gt;] -         Exception in code generation when ambiguous columns in MATCH_RECOGNIZE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11194&#39;&gt;FLINK-11194&lt;/a&gt;] -         missing Scala 2.12 build of HBase connector 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11201&#39;&gt;FLINK-11201&lt;/a&gt;] -         Document SBT dependency requirements when using MiniClusterResource
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11224&#39;&gt;FLINK-11224&lt;/a&gt;] -         Log is missing in scala-shell
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11227&#39;&gt;FLINK-11227&lt;/a&gt;] -         The DescriptorProperties contains some bounds checking errors
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11232&#39;&gt;FLINK-11232&lt;/a&gt;] -         Empty Start Time of sub-task on web dashboard
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11234&#39;&gt;FLINK-11234&lt;/a&gt;] -         ExternalTableCatalogBuilder unable to build a batch-only table
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11235&#39;&gt;FLINK-11235&lt;/a&gt;] -         Elasticsearch connector leaks threads if no connection could be established
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11246&#39;&gt;FLINK-11246&lt;/a&gt;] -         Fix distinct AGG visibility issues
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11251&#39;&gt;FLINK-11251&lt;/a&gt;] -         Incompatible metric name on prometheus reporter
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11279&#39;&gt;FLINK-11279&lt;/a&gt;] -         Invalid week interval parsing in ExpressionParser
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11302&#39;&gt;FLINK-11302&lt;/a&gt;] -         FlinkS3FileSystem uses an incorrect path for temporary files.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11389&#39;&gt;FLINK-11389&lt;/a&gt;] -         Incorrectly use job information when call getSerializedTaskInformation in class TaskDeploymentDescriptor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11419&#39;&gt;FLINK-11419&lt;/a&gt;] -         StreamingFileSink fails to recover after taskmanager failure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11436&#39;&gt;FLINK-11436&lt;/a&gt;] -         Java deserialization failure of the AvroSerializer when used in an old CompositeSerializers
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        New Feature
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10457&#39;&gt;FLINK-10457&lt;/a&gt;] -         Support SequenceFile for StreamingFileSink
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10910&#39;&gt;FLINK-10910&lt;/a&gt;] -         Harden Kubernetes e2e test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11023&#39;&gt;FLINK-11023&lt;/a&gt;] -         Update LICENSE and NOTICE files for flink-connectors
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11079&#39;&gt;FLINK-11079&lt;/a&gt;] -         Skip deployment for flink-storm-examples
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11207&#39;&gt;FLINK-11207&lt;/a&gt;] -         Update Apache commons-compress from 1.4.1 to 1.18
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11216&#39;&gt;FLINK-11216&lt;/a&gt;] -         Back to top button is missing in the Joining document and is not properly placed in the Process Function document
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11262&#39;&gt;FLINK-11262&lt;/a&gt;] -         Bump jython-standalone to 2.7.1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11289&#39;&gt;FLINK-11289&lt;/a&gt;] -         Rework example module structure to account for licensing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11304&#39;&gt;FLINK-11304&lt;/a&gt;] -         Typo in time attributes doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11331&#39;&gt;FLINK-11331&lt;/a&gt;] -         Fix errors in tableApi.md and functions.md
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11469&#39;&gt;FLINK-11469&lt;/a&gt;] -         fix  Tuning Checkpoints and Large State doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11473&#39;&gt;FLINK-11473&lt;/a&gt;] -         Clarify Documenation on Latency Tracking
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11628&#39;&gt;FLINK-11628&lt;/a&gt;] -         Cache maven on travis
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Fri, 15 Feb 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/02/15/release-1.7.2.html</link>
<guid isPermaLink="true">/news/2019/02/15/release-1.7.2.html</guid>
</item>

<item>
<title>Batch as a Special Case of Streaming and Alibaba&#39;s contribution of Blink</title>
<description>Last week, we [broke the news](https://lists.apache.org/thread.html/2f7330e85d702a53b4a2b361149930b50f2e89d8e8a572f8ee2a0e6d@%3Cdev.flink.apache.org%3E) that Alibaba decided to contribute its Flink-fork, called Blink, back to the Apache Flink project. Why is that a big thing for Flink, what will it mean for users and the community, and how does it fit into Flink’s overall vision? Let&#39;s take a step back to understand this better...

## A Unified Approach to Batch and Streaming

Since its early days, Apache Flink has followed the philosophy of taking a unified approach to batch and streaming data processing. The core building block is *&quot;continuous processing of unbounded data streams&quot;*: if you can do that, you can also do offline processing of bounded data sets (batch processing use cases), because these are just streams that happen to end at some point.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/unified-batch-streaming-blink/bounded-unbounded.png&quot; width=&quot;600px&quot; alt=&quot;Processing of bounded and unbounded data.&quot;/&gt;
&lt;/center&gt;
&lt;br&gt;

The *&quot;streaming first, with batch as a special case of streaming&quot;* philosophy is supported by various projects (for example [Flink](https://flink.apache.org), [Beam](https://beam.apache.org), etc.) and often been cited as a powerful way to build data applications that [generalize across real-time and offline processing](https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101) and to help greatly reduce the complexity of data infrastructures.

### Why are there still batch processors?

However, *&quot;batch is just a special case of streaming&quot;* does not mean that any stream processor is now the right tool for your batch processing use cases - the introduction of stream processors did not render batch processors obsolete:

* Pure stream processing systems are very slow at batch processing workloads. No one would consider it a good idea to use a stream processor that shuffles through message queues to analyze large amounts of available data.

* Unified APIs like [Apache Beam](https://beam.apache.org) often delegate to different runtimes depending on whether the data is continuous/unbounded of fix/bounded. For example, the implementations of the batch and streaming runtime of Google Cloud Dataflow are different, to get the desired performance and resilience in each case.

* *Apache Flink* has a streaming API that can do bounded/unbounded use cases, but still offers a separate DataSet API and runtime stack that is faster for batch use cases.

What is the reason for the above? Where did *&quot;batch is just a special case of streaming&quot;* go wrong?

The answer is simple, nothing is wrong with that paradigm. Unifying batch and streaming in the API is one aspect. One needs to also exploit certain characteristics of the special case “bounded data” in the runtime to competitively handle batch processing use cases. After all, batch processors have been built specifically for that special case.

## Batch on top of a Streaming Runtime

We always believed that it is possible to have a runtime that is state-of-the-art for both stream processing and batch processing use cases at the same time. A runtime that is streaming-first, but can exploit just the right amount of special properties of bounded streams to be as fast for batch use cases as dedicated batch processors. **This is the unique approach that Flink takes.**

Apache Flink has a network stack that supports both [low-latency/high-throughput streaming data exchanges](https://www.ververica.com/flink-forward-berlin/resources/improving-throughput-and-latency-with-flinks-network-stack), as well as high-throughput batch shuffles. Flink has streaming runtime operators for many operations, but also specialized operators for bounded inputs, which get used when you choose the DataSet API or select the batch environment in the Table API.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/unified-batch-streaming-blink/stream-batch-joins.png&quot; width=&quot;500px&quot; alt=&quot;Streaming and batch joins.&quot;/&gt;
&lt;br&gt;
&lt;i&gt;The figure illustrates a streaming join and a batch join. The batch join can read one input fully into a hash table and then probe with the other input. The stream join needs to build tables for both sides, because it needs to continuously process both inputs. 
For data larger than memory, the batch join can partition both data sets into subsets that fit in memory (data hits disk once) whereas the continuous nature of the stream join requires it to always keep all data in the table and repeatedly hit disk on cache misses.&lt;/i&gt;
&lt;/center&gt;
&lt;br&gt;

Because of that, Apache Flink has been actually demonstrating some pretty impressive batch processing performance since its early days. The below benchmark is a bit older, but validated our architectural approach early on.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/unified-batch-streaming-blink/sort-performance.png&quot; width=&quot;500px&quot; alt=&quot;Sort performance.&quot;/&gt;
&lt;br&gt;
&lt;i&gt;Time to sort 3.2 TB (80 GB/node), in seconds&lt;br&gt;
(&lt;a href=&quot;https://www.slideshare.net/FlinkForward/dongwon-kim-a-comparative-performance-evaluation-of-flink&quot; target=&quot;blank&quot;&gt;Presentation by Dongwon Kim, Flink Forward Berlin 2015&lt;/a&gt;.)&lt;/i&gt;
&lt;/center&gt;
&lt;br&gt;

## What is still missing?

To conclude the approach and make Flink&#39;s experience on bounded data (batch) state-of-the-art, we need to add a few more enhancements. We believe that these features are key to realizing our vision:

**(1) A truly unified runtime operator stack**: Currently the bounded and unbounded operators have a different network and threading model and don&#39;t mix and match. The original reason was that batch operators followed a &quot;pull model&quot; (easier for batch algorithms), while streaming operators followed a &quot;push model&quot; (better latency/throughput characteristics). In a unified stack, continuous streaming operators are the foundation. When operating on bounded data without latency constraints, the API or the query optimizer can select from a larger set of operators. The optimizer can pick, for example, a specialized join operator that first consumes one input stream entirely before reading the second input stream.

**(2) Exploiting bounded streams to reduce the scope of fault tolerance**: When input data is bounded, it is possible to completely buffer data during shuffles (memory or disk) and replay that data after a failure. This makes recovery more fine grained and thus much more efficient.

**(3) Exploiting bounded stream operator properties for scheduling**: A continuous unbounded streaming application needs (by definition) all operators running at the same time. An application on bounded data can schedule operations after another, depending on how the operators consume data (e.g., first build hash table, then probe hash table). This increases resource efficiency.

**(4) Enabling these special case optimizations for the DataStream API**: Currently, only the Table API (which is unified across bounded/unbounded streams) activates these optimizations when working on bounded data.

**(5) Performance and coverage for SQL**: SQL is the de-facto standard data language, and while it is also being rapidly adopted for continuous streaming use cases, there is absolutely no way past it for bounded/batch use cases. To be competitive with the best batch engines, Flink needs more coverage and performance for the SQL query execution. While the core data-plane in Flink is high performance, the speed of SQL execution ultimately depends a lot also on optimizer rules, a rich set of operators, and features like code generation.

## Enter Blink

Blink is a fork of Apache Flink, originally created inside Alibaba to improve Flink’s behavior for internal use cases. Blink adds a series of improvements and integrations (see the [Readme](https://github.com/apache/flink/blob/blink/README.md) for details), many of which fall into the category of improved bounded-data/batch processing and SQL. In fact, of the above list of features for a unified batch/streaming system, Blink implements significant steps forward in all except (4):

**Unified Stream Operators:** Blink extends the Flink streaming runtime operator model to support selectively reading from different inputs, while keeping the push model for very low latency. This control over the inputs helps to now support algorithms like hybrid hash-joins on the same operator and threading model as continuous symmetric joins through RocksDB. These operators also form the basis for future features like [“Side Inputs”](https://cwiki.apache.org/confluence/display/FLINK/FLIP-17+Side+Inputs+for+DataStream+API). 

**Table API &amp; SQL Query Processor:** The SQL query processor is the component that evolved the changed most compared to the latest Flink master branch:

- While Flink currently translates queries either into DataSet or DataStream programs (depending on the characteristics of their inputs), Blink translates queries to a data flow of the aforementioned stream operators.

- Blink adds many more runtime operators for common SQL operations like semi-joins, anti-joins, etc.

- The query planner (optimizer) is still based on Apache Calcite, but has many more optimization rules (incl. join reordering) and uses a proper cost model for planning.

- Stream operators are more aggressively chained.

- The common data structures (sorters, hash tables) and serializers are extended to go even further in operating on binary data and saving serialization overhead. Code generation is used for the row serializers.

**Improved Scheduling and Failure Recovery:** Finally, Blink implements several improvements for task scheduling and fault tolerance. The scheduling strategies use resources better by exploiting how the operators process their input data. The failover strategies recover more fine-grained along the boundaries of persistent shuffles. A failed JobManager can be replaced without restarting a running application.

The changes in Blink result in a big improvement in performance. The below numbers were reported by the developers of Blink to give a rough impression of the performance gains.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/unified-batch-streaming-blink/blink-flink-tpch.png&quot; width=&quot;600px&quot; alt=&quot;TPC-H performance of Blink and Flink.&quot;/&gt;
&lt;br&gt;
&lt;i&gt;Relative performance of Blink versus Flink 1.6.0 in the TPC-H benchmark, query by query.&lt;br&gt;
The performance improvement is in average 10x.&lt;br&gt;
&lt;a href=&quot;https://www.ververica.com/flink-forward-berlin/resources/unified-engine-for-data-processing-and-ai&quot; target=&quot;blank&quot;&gt;Presentation by Xiaowei Jiang at Flink Forward Berlin, 2018&lt;/a&gt;.)&lt;/i&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/unified-batch-streaming-blink/blink-spark-tpcds.png&quot; width=&quot;600px&quot; alt=&quot;TPC-DS performace of Blink and Spark.&quot;/&gt;
&lt;br&gt;
&lt;i&gt;Performance of Blink versus Spark in the TPC-DS benchmark, aggregate time for all queries together.&lt;br&gt;
&lt;a href=&quot;https://www.bilibili.com/video/av42325467/?p=3&quot; target=&quot;blank&quot;&gt;Presentation by Xiaowei Jiang at Flink Forward Beijing, 2018&lt;/a&gt;.&lt;/i&gt;
&lt;/center&gt;
&lt;br&gt;

## How do we plan to merge Blink and Flink?

Blink’s code is currently available as a [branch](https://github.com/apache/flink/tree/blink) in the Apache Flink repository. It is a challenge to merge a such big amount of changes, while making the merge process as non-disruptive as possible and keeping public APIs as stable as possible. 

The community’s [merge plan](https://lists.apache.org/thread.html/6066abd0f09fc1c41190afad67770ede8efd0bebc36f00938eecc118@%3Cdev.flink.apache.org%3E) focuses initially on the bounded/batch processing features mentioned above and follows the following approach to ensure a smooth integration:

* To merge Blink’s _SQL/Table API query processor_ enhancements, we exploit the fact that both Flink and Blink have the same APIs: SQL and the Table API.
Following some restructuring of the Table/SQL module ([FLIP-32](https://cwiki.apache.org/confluence/display/FLINK/FLIP-32%3A+Restructure+flink-table+for+future+contributions)) we plan to merge the Blink query planner (optimizer) and runtime (operators) as an additional query processor next to the current SQL runtime. Think of it as two different runners for the same APIs.&lt;br&gt;
Initially, users will be able to select which query processor to use. After a transition period in which the new query processor will be developed to subsume the current query processor, the current processor will most likely be deprecated and eventually dropped. Given that SQL is such a well defined interface, we anticipate that this transition has little friction for users. Mostly a pleasant surprise to have broader SQL feature coverage and a boost in performance.

* To support the merge of Blink’s _enhancements to scheduling and recovery_ for jobs on bounded data, the Flink community is already working on refactoring its current schedule and adding support for [pluggable scheduling and fail-over strategies](https://issues.apache.org/jira/browse/FLINK-10429).&lt;br&gt;
Once this effort is finished, we can add Blink’s scheduling and recovery strategies as a new scheduling strategy that is used by the new query processor. Eventually, we plan to use the new scheduling strategy also for bounded DataStream programs.

* The extended catalog support, DDL support, as well as support for Hive’s catalog and integrations is currently going through separate design discussions. We plan to leverage existing code here whenever it makes sense.

## Summary

We believe that the data processing stack of the future is based on stream processing: The elegance of stream processing with its ability to model offline processing (batch), real-time data processing, and event-driven applications in the same way, while offering high performance and consistency is simply too compelling.

Exploiting certain properties of bounded data is important for a stream processor to achieve the same performance as dedicated batch processors. While Flink always supported batch processing, the project is taking the next step in building a unified runtime and towards **becoming a stream processor that is competitive with batch processing systems even on their home turf: OLAP SQL.** The contribution of Alibaba’s Blink code helps the Flink community to pick up the speed on this development.</description>
<pubDate>Wed, 13 Feb 2019 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2019/02/13/unified-batch-streaming-blink.html</link>
<guid isPermaLink="true">/news/2019/02/13/unified-batch-streaming-blink.html</guid>
</item>

<item>
<title>Apache Flink 1.5.6 Released</title>
<description>The Apache Flink community released the sixth and last bugfix version of the Apache Flink 1.5 series.

This release includes more than 47 fixes and minor improvements for Flink 1.5.5. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.5.6.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.5.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.6&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10252&#39;&gt;FLINK-10252&lt;/a&gt;] -         Handle oversized metric messages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10863&#39;&gt;FLINK-10863&lt;/a&gt;] -         Assign uids to all operators
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8336&#39;&gt;FLINK-8336&lt;/a&gt;] -         YarnFileStageTestS3ITCase.testRecursiveUploadForYarnS3 test instability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9646&#39;&gt;FLINK-9646&lt;/a&gt;] -         ExecutionGraphCoLocationRestartTest.testConstraintsAfterRestart failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10166&#39;&gt;FLINK-10166&lt;/a&gt;] -         Dependency problems when executing SQL query in sql-client
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10309&#39;&gt;FLINK-10309&lt;/a&gt;] -         Cancel with savepoint fails with java.net.ConnectException when using the per job-mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10419&#39;&gt;FLINK-10419&lt;/a&gt;] -         ClassNotFoundException while deserializing user exceptions from checkpointing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10455&#39;&gt;FLINK-10455&lt;/a&gt;] -         Potential Kafka producer leak in case of failures
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10482&#39;&gt;FLINK-10482&lt;/a&gt;] -         java.lang.IllegalArgumentException: Negative number of in progress checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10491&#39;&gt;FLINK-10491&lt;/a&gt;] -         Deadlock during spilling data in SpillableSubpartition 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10566&#39;&gt;FLINK-10566&lt;/a&gt;] -         Flink Planning is exponential in the number of stages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10581&#39;&gt;FLINK-10581&lt;/a&gt;] -         YarnConfigurationITCase.testFlinkContainerMemory test instability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10642&#39;&gt;FLINK-10642&lt;/a&gt;] -         CodeGen split fields errors when maxGeneratedCodeLength equals 1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10655&#39;&gt;FLINK-10655&lt;/a&gt;] -         RemoteRpcInvocation not overwriting ObjectInputStream&amp;#39;s ClassNotFoundException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10669&#39;&gt;FLINK-10669&lt;/a&gt;] -         Exceptions &amp;amp; errors are not properly checked in logs in e2e tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10670&#39;&gt;FLINK-10670&lt;/a&gt;] -         Fix Correlate codegen error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10674&#39;&gt;FLINK-10674&lt;/a&gt;] -         Fix handling of retractions after clean up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10690&#39;&gt;FLINK-10690&lt;/a&gt;] -         Tests leak resources via Files.list
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10693&#39;&gt;FLINK-10693&lt;/a&gt;] -         Fix Scala EitherSerializer duplication
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10715&#39;&gt;FLINK-10715&lt;/a&gt;] -         E2e tests fail with ConcurrentModificationException in MetricRegistryImpl
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10750&#39;&gt;FLINK-10750&lt;/a&gt;] -         SocketClientSinkTest.testRetry fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10752&#39;&gt;FLINK-10752&lt;/a&gt;] -         Result of AbstractYarnClusterDescriptor#validateClusterResources is ignored
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10753&#39;&gt;FLINK-10753&lt;/a&gt;] -         Propagate and log snapshotting exceptions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10770&#39;&gt;FLINK-10770&lt;/a&gt;] -         Some generated functions are not opened properly.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10773&#39;&gt;FLINK-10773&lt;/a&gt;] -         Resume externalized checkpoint end-to-end test fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10821&#39;&gt;FLINK-10821&lt;/a&gt;] -         Resuming Externalized Checkpoint E2E test does not resume from Externalized Checkpoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10839&#39;&gt;FLINK-10839&lt;/a&gt;] -         Fix implementation of PojoSerializer.duplicate() w.r.t. subclass serializer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10856&#39;&gt;FLINK-10856&lt;/a&gt;] -         Harden resume from externalized checkpoint E2E test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10857&#39;&gt;FLINK-10857&lt;/a&gt;] -         Conflict between JMX and Prometheus Metrics reporter
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10880&#39;&gt;FLINK-10880&lt;/a&gt;] -         Failover strategies should not be applied to Batch Execution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10913&#39;&gt;FLINK-10913&lt;/a&gt;] -         ExecutionGraphRestartTest.testRestartAutomatically unstable on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10925&#39;&gt;FLINK-10925&lt;/a&gt;] -         NPE in PythonPlanStreamer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10990&#39;&gt;FLINK-10990&lt;/a&gt;] -         Enforce minimum timespan in MeterView
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10998&#39;&gt;FLINK-10998&lt;/a&gt;] -         flink-metrics-ganglia has LGPL dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11011&#39;&gt;FLINK-11011&lt;/a&gt;] -         Elasticsearch 6 sink end-to-end test unstable
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4173&#39;&gt;FLINK-4173&lt;/a&gt;] -         Replace maven-assembly-plugin by maven-shade-plugin in flink-metrics
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9869&#39;&gt;FLINK-9869&lt;/a&gt;] -         Send PartitionInfo in batch to Improve perfornance
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10613&#39;&gt;FLINK-10613&lt;/a&gt;] -         Remove logger casts in HBaseConnectorITCase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10614&#39;&gt;FLINK-10614&lt;/a&gt;] -         Update test_batch_allround.sh e2e to new testing infrastructure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10637&#39;&gt;FLINK-10637&lt;/a&gt;] -         Start MiniCluster with random REST port
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10678&#39;&gt;FLINK-10678&lt;/a&gt;] -         Add a switch to run_test to configure if logs should be checked for errors/excepions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10906&#39;&gt;FLINK-10906&lt;/a&gt;] -         docker-entrypoint.sh logs credentails during startup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10916&#39;&gt;FLINK-10916&lt;/a&gt;] -         Include duplicated user-specified uid into error message
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11005&#39;&gt;FLINK-11005&lt;/a&gt;] -         Define flink-sql-client uber-jar dependencies via artifactSet
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Test
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10606&#39;&gt;FLINK-10606&lt;/a&gt;] -         Construct NetworkEnvironment simple for tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10607&#39;&gt;FLINK-10607&lt;/a&gt;] -         Unify to remove duplicated NoOpResultPartitionConsumableNotifier
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10827&#39;&gt;FLINK-10827&lt;/a&gt;] -         Add test for duplicate() to SerializerTestBase
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 26 Dec 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/12/26/release-1.5.6.html</link>
<guid isPermaLink="true">/news/2018/12/26/release-1.5.6.html</guid>
</item>

<item>
<title>Apache Flink 1.6.3 Released</title>
<description>The Apache Flink community released the third bugfix version of the Apache Flink 1.6 series.

This release includes more than 80 fixes and minor improvements for Flink 1.6.2. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.6.3.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.6.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.3&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10097&#39;&gt;FLINK-10097&lt;/a&gt;] -         More tests to increase StreamingFileSink test coverage
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10252&#39;&gt;FLINK-10252&lt;/a&gt;] -         Handle oversized metric messages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10367&#39;&gt;FLINK-10367&lt;/a&gt;] -         Avoid recursion stack overflow during releasing SingleInputGate
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10863&#39;&gt;FLINK-10863&lt;/a&gt;] -         Assign uids to all operators in general purpose testing job
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8336&#39;&gt;FLINK-8336&lt;/a&gt;] -         YarnFileStageTestS3ITCase.testRecursiveUploadForYarnS3 test instability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9635&#39;&gt;FLINK-9635&lt;/a&gt;] -         Local recovery scheduling can cause spread out of tasks
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9646&#39;&gt;FLINK-9646&lt;/a&gt;] -         ExecutionGraphCoLocationRestartTest.testConstraintsAfterRestart failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9878&#39;&gt;FLINK-9878&lt;/a&gt;] -         IO worker threads BLOCKED on SSL Session Cache while CMS full gc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10149&#39;&gt;FLINK-10149&lt;/a&gt;] -         Fink Mesos allocates extra port when not configured to do so.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10166&#39;&gt;FLINK-10166&lt;/a&gt;] -         Dependency problems when executing SQL query in sql-client
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10309&#39;&gt;FLINK-10309&lt;/a&gt;] -         Cancel with savepoint fails with java.net.ConnectException when using the per job-mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10357&#39;&gt;FLINK-10357&lt;/a&gt;] -         Streaming File Sink end-to-end test failed with mismatch
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10359&#39;&gt;FLINK-10359&lt;/a&gt;] -         Scala example in DataSet docs is broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10364&#39;&gt;FLINK-10364&lt;/a&gt;] -         Test instability in NonHAQueryableStateFsBackendITCase#testMapState
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10419&#39;&gt;FLINK-10419&lt;/a&gt;] -         ClassNotFoundException while deserializing user exceptions from checkpointing
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10425&#39;&gt;FLINK-10425&lt;/a&gt;] -         taskmanager.host is not respected
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10455&#39;&gt;FLINK-10455&lt;/a&gt;] -         Potential Kafka producer leak in case of failures
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10463&#39;&gt;FLINK-10463&lt;/a&gt;] -         Null literal cannot be properly parsed in Java Table API function call
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10481&#39;&gt;FLINK-10481&lt;/a&gt;] -         Wordcount end-to-end test in docker env unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10482&#39;&gt;FLINK-10482&lt;/a&gt;] -         java.lang.IllegalArgumentException: Negative number of in progress checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10491&#39;&gt;FLINK-10491&lt;/a&gt;] -         Deadlock during spilling data in SpillableSubpartition 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10566&#39;&gt;FLINK-10566&lt;/a&gt;] -         Flink Planning is exponential in the number of stages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10567&#39;&gt;FLINK-10567&lt;/a&gt;] -         Lost serialize fields when ttl state store with the mutable serializer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10570&#39;&gt;FLINK-10570&lt;/a&gt;] -         State grows unbounded when &amp;quot;within&amp;quot; constraint not applied
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10581&#39;&gt;FLINK-10581&lt;/a&gt;] -         YarnConfigurationITCase.testFlinkContainerMemory test instability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10642&#39;&gt;FLINK-10642&lt;/a&gt;] -         CodeGen split fields errors when maxGeneratedCodeLength equals 1
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10655&#39;&gt;FLINK-10655&lt;/a&gt;] -         RemoteRpcInvocation not overwriting ObjectInputStream&amp;#39;s ClassNotFoundException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10663&#39;&gt;FLINK-10663&lt;/a&gt;] -         Closing StreamingFileSink can cause NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10669&#39;&gt;FLINK-10669&lt;/a&gt;] -         Exceptions &amp;amp; errors are not properly checked in logs in e2e tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10670&#39;&gt;FLINK-10670&lt;/a&gt;] -         Fix Correlate codegen error
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10674&#39;&gt;FLINK-10674&lt;/a&gt;] -         Fix handling of retractions after clean up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10681&#39;&gt;FLINK-10681&lt;/a&gt;] -         elasticsearch6.ElasticsearchSinkITCase fails if wrong JNA library installed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10690&#39;&gt;FLINK-10690&lt;/a&gt;] -         Tests leak resources via Files.list
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10693&#39;&gt;FLINK-10693&lt;/a&gt;] -         Fix Scala EitherSerializer duplication
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10715&#39;&gt;FLINK-10715&lt;/a&gt;] -         E2e tests fail with ConcurrentModificationException in MetricRegistryImpl
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10750&#39;&gt;FLINK-10750&lt;/a&gt;] -         SocketClientSinkTest.testRetry fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10752&#39;&gt;FLINK-10752&lt;/a&gt;] -         Result of AbstractYarnClusterDescriptor#validateClusterResources is ignored
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10753&#39;&gt;FLINK-10753&lt;/a&gt;] -         Propagate and log snapshotting exceptions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10763&#39;&gt;FLINK-10763&lt;/a&gt;] -         Interval join produces wrong result type in Scala API
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10770&#39;&gt;FLINK-10770&lt;/a&gt;] -         Some generated functions are not opened properly.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10773&#39;&gt;FLINK-10773&lt;/a&gt;] -         Resume externalized checkpoint end-to-end test fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10809&#39;&gt;FLINK-10809&lt;/a&gt;] -         Using DataStreamUtils.reinterpretAsKeyedStream produces corrupted keyed state after restore
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10816&#39;&gt;FLINK-10816&lt;/a&gt;] -         Fix LockableTypeSerializer.duplicate() 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10821&#39;&gt;FLINK-10821&lt;/a&gt;] -         Resuming Externalized Checkpoint E2E test does not resume from Externalized Checkpoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10839&#39;&gt;FLINK-10839&lt;/a&gt;] -         Fix implementation of PojoSerializer.duplicate() w.r.t. subclass serializer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10842&#39;&gt;FLINK-10842&lt;/a&gt;] -         Waiting loops are broken in e2e/common.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10856&#39;&gt;FLINK-10856&lt;/a&gt;] -         Harden resume from externalized checkpoint E2E test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10857&#39;&gt;FLINK-10857&lt;/a&gt;] -         Conflict between JMX and Prometheus Metrics reporter
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10880&#39;&gt;FLINK-10880&lt;/a&gt;] -         Failover strategies should not be applied to Batch Execution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10913&#39;&gt;FLINK-10913&lt;/a&gt;] -         ExecutionGraphRestartTest.testRestartAutomatically unstable on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10925&#39;&gt;FLINK-10925&lt;/a&gt;] -         NPE in PythonPlanStreamer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10946&#39;&gt;FLINK-10946&lt;/a&gt;] -         Resuming Externalized Checkpoint (rocks, incremental, scale up) end-to-end test failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10990&#39;&gt;FLINK-10990&lt;/a&gt;] -         Enforce minimum timespan in MeterView
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10992&#39;&gt;FLINK-10992&lt;/a&gt;] -         Jepsen: Do not use /tmp as HDFS Data Directory
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10997&#39;&gt;FLINK-10997&lt;/a&gt;] -         Avro-confluent-registry does not bundle any dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10998&#39;&gt;FLINK-10998&lt;/a&gt;] -         flink-metrics-ganglia has LGPL dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11011&#39;&gt;FLINK-11011&lt;/a&gt;] -         Elasticsearch 6 sink end-to-end test unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11017&#39;&gt;FLINK-11017&lt;/a&gt;] -         Time interval for window aggregations in SQL is wrongly translated if specified with YEAR_MONTH resolution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11029&#39;&gt;FLINK-11029&lt;/a&gt;] -         Incorrect parameter in Working with state doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11041&#39;&gt;FLINK-11041&lt;/a&gt;] -         ReinterpretDataStreamAsKeyedStreamITCase.testReinterpretAsKeyedStream failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11045&#39;&gt;FLINK-11045&lt;/a&gt;] -         UserCodeClassLoader has not been set correctly for RuntimeUDFContext in CollectionExecutor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11083&#39;&gt;FLINK-11083&lt;/a&gt;] -         CRowSerializerConfigSnapshot is not instantiable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11087&#39;&gt;FLINK-11087&lt;/a&gt;] -         Broadcast state migration Incompatibility from 1.5.3 to 1.7.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11123&#39;&gt;FLINK-11123&lt;/a&gt;] -         Missing import in ML quickstart docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11136&#39;&gt;FLINK-11136&lt;/a&gt;] -         Fix the logical of merge for DISTINCT aggregates
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4173&#39;&gt;FLINK-4173&lt;/a&gt;] -         Replace maven-assembly-plugin by maven-shade-plugin in flink-metrics
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10353&#39;&gt;FLINK-10353&lt;/a&gt;] -         Restoring a KafkaProducer with Semantic.EXACTLY_ONCE from a savepoint written with Semantic.AT_LEAST_ONCE fails with NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10608&#39;&gt;FLINK-10608&lt;/a&gt;] -         Add avro files generated by datastream-allround-test to RAT exclusions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10613&#39;&gt;FLINK-10613&lt;/a&gt;] -         Remove logger casts in HBaseConnectorITCase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10614&#39;&gt;FLINK-10614&lt;/a&gt;] -         Update test_batch_allround.sh e2e to new testing infrastructure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10637&#39;&gt;FLINK-10637&lt;/a&gt;] -         Start MiniCluster with random REST port
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10678&#39;&gt;FLINK-10678&lt;/a&gt;] -         Add a switch to run_test to configure if logs should be checked for errors/excepions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10692&#39;&gt;FLINK-10692&lt;/a&gt;] -         Harden Confluent schema E2E test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10883&#39;&gt;FLINK-10883&lt;/a&gt;] -         Submitting a jobs without enough slots times out due to a unspecified timeout
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10906&#39;&gt;FLINK-10906&lt;/a&gt;] -         docker-entrypoint.sh logs credentails during startup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10916&#39;&gt;FLINK-10916&lt;/a&gt;] -         Include duplicated user-specified uid into error message
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10951&#39;&gt;FLINK-10951&lt;/a&gt;] -         Disable enforcing of YARN container virtual memory limits in tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11005&#39;&gt;FLINK-11005&lt;/a&gt;] -         Define flink-sql-client uber-jar dependencies via artifactSet
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Test
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10606&#39;&gt;FLINK-10606&lt;/a&gt;] -         Construct NetworkEnvironment simple for tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10607&#39;&gt;FLINK-10607&lt;/a&gt;] -         Unify to remove duplicated NoOpResultPartitionConsumableNotifier
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10827&#39;&gt;FLINK-10827&lt;/a&gt;] -         Add test for duplicate() to SerializerTestBase
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Wish
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10793&#39;&gt;FLINK-10793&lt;/a&gt;] -         Change visibility of TtlValue and TtlSerializer to public for external tools
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 22 Dec 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/12/22/release-1.6.3.html</link>
<guid isPermaLink="true">/news/2018/12/22/release-1.6.3.html</guid>
</item>

<item>
<title>Apache Flink 1.7.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.7 series.

This release includes 27 fixes and minor improvements for Flink 1.7.0. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.7.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.7.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.7.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.7.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10252&#39;&gt;FLINK-10252&lt;/a&gt;] -         Handle oversized metric messages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10367&#39;&gt;FLINK-10367&lt;/a&gt;] -         Avoid recursion stack overflow during releasing SingleInputGate
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10522&#39;&gt;FLINK-10522&lt;/a&gt;] -         Check if RecoverableWriter supportsResume and act accordingly.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10963&#39;&gt;FLINK-10963&lt;/a&gt;] -         Cleanup small objects uploaded to S3 as independent objects
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8336&#39;&gt;FLINK-8336&lt;/a&gt;] -         YarnFileStageTestS3ITCase.testRecursiveUploadForYarnS3 test instability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9646&#39;&gt;FLINK-9646&lt;/a&gt;] -         ExecutionGraphCoLocationRestartTest.testConstraintsAfterRestart failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10149&#39;&gt;FLINK-10149&lt;/a&gt;] -         Fink Mesos allocates extra port when not configured to do so.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10359&#39;&gt;FLINK-10359&lt;/a&gt;] -         Scala example in DataSet docs is broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10482&#39;&gt;FLINK-10482&lt;/a&gt;] -         java.lang.IllegalArgumentException: Negative number of in progress checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10566&#39;&gt;FLINK-10566&lt;/a&gt;] -         Flink Planning is exponential in the number of stages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10997&#39;&gt;FLINK-10997&lt;/a&gt;] -         Avro-confluent-registry does not bundle any dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11011&#39;&gt;FLINK-11011&lt;/a&gt;] -         Elasticsearch 6 sink end-to-end test unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11013&#39;&gt;FLINK-11013&lt;/a&gt;] -         Fix distinct aggregates for group window in Table API
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11017&#39;&gt;FLINK-11017&lt;/a&gt;] -         Time interval for window aggregations in SQL is wrongly translated if specified with YEAR_MONTH resolution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11029&#39;&gt;FLINK-11029&lt;/a&gt;] -         Incorrect parameter in Working with state doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11032&#39;&gt;FLINK-11032&lt;/a&gt;] -         Elasticsearch (v6.3.1) sink end-to-end test unstable on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11033&#39;&gt;FLINK-11033&lt;/a&gt;] -         Elasticsearch (v6.3.1) sink end-to-end test unstable on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11041&#39;&gt;FLINK-11041&lt;/a&gt;] -         ReinterpretDataStreamAsKeyedStreamITCase.testReinterpretAsKeyedStream failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11044&#39;&gt;FLINK-11044&lt;/a&gt;] -         RegisterTableSink docs incorrect
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11045&#39;&gt;FLINK-11045&lt;/a&gt;] -         UserCodeClassLoader has not been set correctly for RuntimeUDFContext in CollectionExecutor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11047&#39;&gt;FLINK-11047&lt;/a&gt;] -         CoGroupGroupSortTranslationTest does not compile with scala 2.12
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11085&#39;&gt;FLINK-11085&lt;/a&gt;] -         NoClassDefFoundError in presto-s3 filesystem
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11087&#39;&gt;FLINK-11087&lt;/a&gt;] -         Broadcast state migration Incompatibility from 1.5.3 to 1.7.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11094&#39;&gt;FLINK-11094&lt;/a&gt;] -         Restored state in RocksDBStateBackend that has not been accessed in restored execution causes NPE on snapshot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11123&#39;&gt;FLINK-11123&lt;/a&gt;] -         Missing import in ML quickstart docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11136&#39;&gt;FLINK-11136&lt;/a&gt;] -         Fix the logical of merge for DISTINCT aggregates
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-11080&#39;&gt;FLINK-11080&lt;/a&gt;] -         Define flink-connector-elasticsearch6 uber-jar dependencies via artifactSet
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Fri, 21 Dec 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/12/21/release-1.7.1.html</link>
<guid isPermaLink="true">/news/2018/12/21/release-1.7.1.html</guid>
</item>

<item>
<title>Apache Flink 1.7.0 Release Announcement</title>
<description>The Apache Flink community is pleased to announce Apache Flink 1.7.0. 
The latest release includes more than 420 resolved issues and some exciting additions to Flink that we describe in the following sections of this post. 
Please check the [complete changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12343585) for more details.


Flink 1.7.0 is API-compatible with previous 1.x.y releases for APIs annotated with the `@Public` annotation.
The release is available now and we encourage everyone to [download the release](http://flink.apache.org/downloads.html) and check out the updated [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.7/).
Feedback through the Flink [mailing lists](http://flink.apache.org/community.html#mailing-lists) or [JIRA](https://issues.apache.org/jira/projects/FLINK/summary) is, as always, very much appreciated!

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html) on the Flink project site.

{% toc %}

## Flink 1.7.0 - Extending the reach of Stream Processing

In Flink 1.7.0 we come closer to our goals of enabling fast data processing and building data-intensive applications for the Flink community in a seamless way. 
Our latest release includes some exciting new features and improvements such as support for Scala 2.12, an exactly-once S3 file sink, the integration of complex event processing with streaming SQL and more features that we explain below.

## New Features and Improvements

* **Scala 2.12 Support in Apache Flink** ([FLINK-7811](https://issues.apache.org/jira/browse/FLINK-7811)):
  Apache Flink 1.7.0 is the first release which comes with full support for Scala 2.12. 
  This allows users to write Flink applications with a newer Scala version and to leverage the Scala 2.12 ecosystem.

* **State Evolution** ([FLINK-9376](https://issues.apache.org/jira/browse/FLINK-9376)):
  In many cases, a long-running Flink application needs to evolve during its lifetime because of changing requirements. 
  Changing the user state without losing the current application progress in the form of its state is a crucial requirement for application evolution.

  With Flink 1.7.0, the community added state evolution which allows you to flexibly adapt a long-running application&#39;s user states schema, while maintaining compatibility with previous savepoints. 
  With state evolution it is possible to add or remove columns to your state schema in order to change which business features will be captured by your application after it has been deployed.

  State schema evolution now works out-of-the-box when using Avro&#39;s generated classes as user state, meaning that the schema of the state can be evolved according to Avro&#39;s specifications. 
  While Avro types are the only built-in type that supports schema evolution as of Flink 1.7, the community continues working to further extend support to other types in future Flink releases.

* **Exactly-once S3 StreamingFileSink** ([FLINK-9752](https://issues.apache.org/jira/browse/FLINK-9752)):
  The `StreamingFileSink` which was introduced in Flink 1.6.0 is now extended to also support writing to S3 filesystems with exactly-once processing guarantees. 
  Using this feature allows users to build exactly-once end-to-end pipelines writing to S3.

* **`MATCH_RECOGNIZE` Support in Streaming SQL** ([FLINK-6935](https://issues.apache.org/jira/browse/FLINK-6935)):
  This is a major addition to Apache Flink 1.7.0 that provides initial support of the [`MATCH_RECOGNIZE`](https://ci.apache.org/projects/flink/flink-docs-release-1.7/dev/table/streaming/match_recognize.html) standard to Flink SQL. 
  This feature combines both complex event processing (CEP) and SQL for easy pattern matching on data streams and, thus, enabling a whole set of new use cases.

  This feature is currently in beta phase so we welcome any feedback and suggestions from the community for future iterations and improvements.

* **Temporal Tables and Temporal Joins in Streaming SQL** ([FLINK-9712](https://issues.apache.org/jira/browse/FLINK-9712)):
  Temporal Tables is a new concept in Apache Flink that gives a (parameterized) view on a table’s changing history and returns the content of a table at a specific point in time. 

  As an example, we can use a table with historical currency exchange rates. 
  Such a table is constantly growing/evolving as time progresses and newly updated exchange rates are added. 
  Temporal Table is a view that can return the actual state of those exchange rates to any given point of time. 
  With such a table it is possible to convert a stream of orders in different currencies to a common currency using the correct exchange rate.

  Temporal Joins allow for memory and computational-efficient joins of Streaming data with an ever-changing/updating table, using either processing time or event time, while being ANSI SQL compliant.

* **Miscellaneous Features for Streaming SQL**:
  Besides the major features mentioned above, Flink&#39;s Table &amp; SQL API has been extended to serve more use cases.

  The following built-in functions were added to the APIs: `TO_BASE64`, `LOG2`, `LTRIM`, `REPEAT`, `REPLACE`, `COSH`, `SINH`, `TANH`

  The SQL Client now supports the [definition of views](https://ci.apache.org/projects/flink/flink-docs-release-1.7/dev/table/sqlClient.html#sql-views) both in an environment file and within a CLI session. 
  Furthermore, basic SQL statement auto-completion has been added to the CLI.

  The community added an [Elasticsearch 6 table sink](https://ci.apache.org/projects/flink/flink-docs-release-1.7/dev/table/connect.html#elasticsearch-connector) which allows to store updating results of a dynamic table.

* **Versioned REST API** ([FLINK-7551](https://issues.apache.org/jira/browse/FLINK-7551)):
  Beginning with Flink 1.7.0, the REST API is versioned. 
  This guarantees the stability of Flink’s REST API so that third-party applications can be developed against a stable API in Flink. 
  Thus, future Flink upgrades will not require changes to existing third-party integrations.

* **Kafka 2.0 Connector** ([FLINK-10598](https://issues.apache.org/jira/browse/FLINK-10598)):
  Apache Flink 1.7.0 continues to add more connectors, making it even easier to interact with more external systems. 
  In this release, the community added the Kafka 2.0 connector which allows to read from and write to Kafka 2.0 with exactly-once guarantees.

* **Local Recovery** ([FLINK-9635](https://issues.apache.org/jira/browse/FLINK-9635)):
  Apache Flink 1.7.0 completes the local recovery feature by extending Flink’s scheduling to take previous deployment locations into account in case of recovery. 

  If local recovery is enabled Flink will keep a local copy of the latest checkpoint on the machine where the task is running. 
  By scheduling tasks to their previous locations, Flink will, thus, minimize the network traffic for restoring state by reading checkpoint state from local disk. 
  This feature considerably improves recovery speed.

* **Removal of Flink’s Legacy Mode** ([FLINK-10392](https://issues.apache.org/jira/browse/FLINK-10392)):
  Apache Flink 1.7.0 marks the release where the Flip-6 effort has been fully completed and reached feature parity with the legacy mode. 
  Consequently, this release removes support for the legacy mode.

## Release Notes

Please review the [release notes](https://ci.apache.org/projects/flink/flink-docs-release-1.7/release-notes/flink-1.7.html) if you plan to upgrade your Flink setup to Flink 1.7.

## List of Contributors

We would like to acknowledge all community members for contributing to this release. 
Special credits go to the following members for contributing to the 1.7.0 release (according to git): 

Aitozi, Alex Arkhipov, Alexander Koltsov, Alexey Trenikhin, Alice, Alice Yan, Aljoscha Krettek, Andrei Poluliakh, Andrey Zagrebin, Ashwin Sinha, Barisa Obradovic, Ben La Monica, Benoit Meriaux, Bowen Li, Chesnay Schepler, Christophe Jolif, Congxian Qiu, Craig Foster, David Anderson, Dawid Wysakowicz, Dian Fu, Diego Carvallo, Dimitris Palyvos, Eugen Yushin, Fabian Hueske, Florian Schmidt, Gary Yao, Guibo Pan, Hequn Cheng, Hiroaki Yoshida, Igal Shilman, JIN SUN, Jamie Grier, Jayant Ameta, Jeff Zhang, Jeffrey Chung, Jicaar, Jin Sun, Joe Malt, Johannes Dillmann, Jun Zhang, Kostas Kloudas, Krzysztof Białek, Lakshmi Gururaja Rao, Liu Biao, Mahesh Senniappan, Manuel Hoffmann, Mark Cho, Max Feng, Mike Pedersen, Mododo, Nico Kruber, Oleksandr Nitavskyi, Osman Şamil AKÇELİK, Patrick Lucas, Paul Lam, Piotr Nowojski, Rick Hofstede, Rong R, Rong Rong, Sayat Satybaldiyev, Sebastian Klemke, Seth Wiesman, Shimin Yang, Shuyi Chen, Stefan Richter, Stephan Ewen, Stephen Jason, Thomas Weise, Till Rohrmann, Timo Walther, Tzu-Li &quot;tison&quot; Chen, Tzu-Li (Gordon) Tai, Tzu-Li Chen, Wosin, Xingcan Cui, Xpray, Xue Yu, Yangze Guo, Ying Xu, Yun Tang, Zhijiang, blues Zheng, hequn8128, ifndef-SleePy, jerryjzhang, jrthe42, jyc.jia, kkolman, lihongli, linjun, linzhaoming, liurenjie1024, liuxianjiao, lrl, lsy, lzqdename, maqingxiang, maqingxiang-it, minwenjun, shuai-xu, sihuazhou, snuyanzin, wind, xuewei.linxuewei, xueyu, xuqianjin, yanghua, yangshimin, zhijiang, 谢磊, 陈梓立</description>
<pubDate>Fri, 30 Nov 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/11/30/release-1.7.0.html</link>
<guid isPermaLink="true">/news/2018/11/30/release-1.7.0.html</guid>
</item>

<item>
<title>Apache Flink 1.6.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.6 series.

This release includes more than 30 fixes and minor improvements for Flink 1.6.1. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.6.2.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.6.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10242&#39;&gt;FLINK-10242&lt;/a&gt;] -         Latency marker interval should be configurable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10243&#39;&gt;FLINK-10243&lt;/a&gt;] -         Add option to reduce latency metrics granularity
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10331&#39;&gt;FLINK-10331&lt;/a&gt;] -         Reduce number of flush requests to the network stack
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10332&#39;&gt;FLINK-10332&lt;/a&gt;] -         Move data available notification in PipelinedSubpartition out of the synchronized block
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5542&#39;&gt;FLINK-5542&lt;/a&gt;] -         YARN client incorrectly uses local YARN config to check vcore capacity
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9567&#39;&gt;FLINK-9567&lt;/a&gt;] -         Flink does not release resource in Yarn Cluster mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9788&#39;&gt;FLINK-9788&lt;/a&gt;] -         ExecutionGraph Inconsistency prevents Job from recovering
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9884&#39;&gt;FLINK-9884&lt;/a&gt;] -         Slot request may not be removed when it has already be assigned in slot manager
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9891&#39;&gt;FLINK-9891&lt;/a&gt;] -         Flink cluster is not shutdown in YARN mode when Flink client is stopped
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9932&#39;&gt;FLINK-9932&lt;/a&gt;] -         Timed-out TaskExecutor slot-offers to JobMaster leak the slot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10135&#39;&gt;FLINK-10135&lt;/a&gt;] -         Certain cluster-level metrics are no longer exposed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10157&#39;&gt;FLINK-10157&lt;/a&gt;] -         Allow `null` user values in map state with TTL
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10222&#39;&gt;FLINK-10222&lt;/a&gt;] -         Table scalar function expression parses error when function name equals the exists keyword suffix
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10259&#39;&gt;FLINK-10259&lt;/a&gt;] -         Key validation for GroupWindowAggregate is broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10263&#39;&gt;FLINK-10263&lt;/a&gt;] -         User-defined function with LITERAL paramters yields CompileException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10316&#39;&gt;FLINK-10316&lt;/a&gt;] -         Add check to KinesisProducer that aws.region is set
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10354&#39;&gt;FLINK-10354&lt;/a&gt;] -         Savepoints should be counted as retained checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10363&#39;&gt;FLINK-10363&lt;/a&gt;] -         S3 FileSystem factory prints secrets into logs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10379&#39;&gt;FLINK-10379&lt;/a&gt;] -         Can not use Table Functions in Java Table API
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10383&#39;&gt;FLINK-10383&lt;/a&gt;] -         Hadoop configurations on the classpath seep into the S3 file system configs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10390&#39;&gt;FLINK-10390&lt;/a&gt;] -         DataDog MetricReporter leaks connections
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10400&#39;&gt;FLINK-10400&lt;/a&gt;] -         Return failed JobResult if job terminates in state FAILED or CANCELED
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10415&#39;&gt;FLINK-10415&lt;/a&gt;] -         RestClient does not react to lost connection
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10444&#39;&gt;FLINK-10444&lt;/a&gt;] -         Make S3 entropy injection work with FileSystem safety net
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10451&#39;&gt;FLINK-10451&lt;/a&gt;] -         TableFunctionCollector should handle the life cycle of ScalarFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10465&#39;&gt;FLINK-10465&lt;/a&gt;] -         Jepsen: runit supervised sshd is stopped on tear down
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10469&#39;&gt;FLINK-10469&lt;/a&gt;] -         FileChannel may not write the whole buffer in a single call to FileChannel.write(Buffer buffer)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10487&#39;&gt;FLINK-10487&lt;/a&gt;] -         fix invalid Flink SQL example
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10516&#39;&gt;FLINK-10516&lt;/a&gt;] -         YarnApplicationMasterRunner does not initialize FileSystem with correct Flink Configuration during setup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10524&#39;&gt;FLINK-10524&lt;/a&gt;] -         MemoryManagerConcurrentModReleaseTest.testConcurrentModificationWhileReleasing failed on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10532&#39;&gt;FLINK-10532&lt;/a&gt;] -         Broken links in documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10544&#39;&gt;FLINK-10544&lt;/a&gt;] -         Remove custom settings.xml for snapshot deployments
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9061&#39;&gt;FLINK-9061&lt;/a&gt;] -         Add entropy to s3 path for better scalability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10075&#39;&gt;FLINK-10075&lt;/a&gt;] -         HTTP connections to a secured REST endpoint flood the log
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10260&#39;&gt;FLINK-10260&lt;/a&gt;] -         Confusing log messages during TaskManager registration
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10282&#39;&gt;FLINK-10282&lt;/a&gt;] -         Provide separate thread-pool for REST endpoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10291&#39;&gt;FLINK-10291&lt;/a&gt;] -         Generate JobGraph with fixed/configurable JobID in StandaloneJobClusterEntrypoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10311&#39;&gt;FLINK-10311&lt;/a&gt;] -         HA end-to-end/Jepsen tests for standby Dispatchers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10312&#39;&gt;FLINK-10312&lt;/a&gt;] -         Wrong / missing exception when submitting job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10371&#39;&gt;FLINK-10371&lt;/a&gt;] -         Allow to enable SSL mutual authentication on REST endpoints by configuration
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10375&#39;&gt;FLINK-10375&lt;/a&gt;] -         ExceptionInChainedStubException hides wrapped exception in cause
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10582&#39;&gt;FLINK-10582&lt;/a&gt;] -         Make REST executor thread priority configurable
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 29 Oct 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/10/29/release-1.6.2.html</link>
<guid isPermaLink="true">/news/2018/10/29/release-1.6.2.html</guid>
</item>

<item>
<title>Apache Flink 1.5.5 Released</title>
<description>The Apache Flink community released the fifth bugfix version of the Apache Flink 1.5 series.

This release includes more than 20 fixes and minor improvements for Flink 1.5.4. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.5.5.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.5.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.5&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10242&#39;&gt;FLINK-10242&lt;/a&gt;] -         Latency marker interval should be configurable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10243&#39;&gt;FLINK-10243&lt;/a&gt;] -         Add option to reduce latency metrics granularity
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10331&#39;&gt;FLINK-10331&lt;/a&gt;] -         Reduce number of flush requests to the network stack
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10332&#39;&gt;FLINK-10332&lt;/a&gt;] -         Move data available notification in PipelinedSubpartition out of the synchronized block
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5542&#39;&gt;FLINK-5542&lt;/a&gt;] -         YARN client incorrectly uses local YARN config to check vcore capacity
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9567&#39;&gt;FLINK-9567&lt;/a&gt;] -         Flink does not release resource in Yarn Cluster mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9788&#39;&gt;FLINK-9788&lt;/a&gt;] -         ExecutionGraph Inconsistency prevents Job from recovering
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9884&#39;&gt;FLINK-9884&lt;/a&gt;] -         Slot request may not be removed when it has already be assigned in slot manager
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9891&#39;&gt;FLINK-9891&lt;/a&gt;] -         Flink cluster is not shutdown in YARN mode when Flink client is stopped
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9932&#39;&gt;FLINK-9932&lt;/a&gt;] -         Timed-out TaskExecutor slot-offers to JobMaster leak the slot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10135&#39;&gt;FLINK-10135&lt;/a&gt;] -         Certain cluster-level metrics are no longer exposed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10222&#39;&gt;FLINK-10222&lt;/a&gt;] -         Table scalar function expression parses error when function name equals the exists keyword suffix
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10259&#39;&gt;FLINK-10259&lt;/a&gt;] -         Key validation for GroupWindowAggregate is broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10316&#39;&gt;FLINK-10316&lt;/a&gt;] -         Add check to KinesisProducer that aws.region is set
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10354&#39;&gt;FLINK-10354&lt;/a&gt;] -         Savepoints should be counted as retained checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10400&#39;&gt;FLINK-10400&lt;/a&gt;] -         Return failed JobResult if job terminates in state FAILED or CANCELED
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10415&#39;&gt;FLINK-10415&lt;/a&gt;] -         RestClient does not react to lost connection
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10451&#39;&gt;FLINK-10451&lt;/a&gt;] -         TableFunctionCollector should handle the life cycle of ScalarFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10469&#39;&gt;FLINK-10469&lt;/a&gt;] -         FileChannel may not write the whole buffer in a single call to FileChannel.write(Buffer buffer)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10487&#39;&gt;FLINK-10487&lt;/a&gt;] -         fix invalid Flink SQL example
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10516&#39;&gt;FLINK-10516&lt;/a&gt;] -         YarnApplicationMasterRunner does not initialize FileSystem with correct Flink Configuration during setup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10524&#39;&gt;FLINK-10524&lt;/a&gt;] -         MemoryManagerConcurrentModReleaseTest.testConcurrentModificationWhileReleasing failed on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10544&#39;&gt;FLINK-10544&lt;/a&gt;] -         Remove custom settings.xml for snapshot deployments
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10075&#39;&gt;FLINK-10075&lt;/a&gt;] -         HTTP connections to a secured REST endpoint flood the log
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10260&#39;&gt;FLINK-10260&lt;/a&gt;] -         Confusing log messages during TaskManager registration
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10282&#39;&gt;FLINK-10282&lt;/a&gt;] -         Provide separate thread-pool for REST endpoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10312&#39;&gt;FLINK-10312&lt;/a&gt;] -         Wrong / missing exception when submitting job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10375&#39;&gt;FLINK-10375&lt;/a&gt;] -         ExceptionInChainedStubException hides wrapped exception in cause
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10582&#39;&gt;FLINK-10582&lt;/a&gt;] -         Make REST executor thread priority configurable
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Mon, 29 Oct 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/10/29/release-1.5.5.html</link>
<guid isPermaLink="true">/news/2018/10/29/release-1.5.5.html</guid>
</item>

<item>
<title>Apache Flink 1.6.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.6 series.

This release includes 60 fixes and minor improvements for Flink 1.6.1. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.6.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.6.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.6.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9637&#39;&gt;FLINK-9637&lt;/a&gt;] -         Add public user documentation for TTL feature
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10068&#39;&gt;FLINK-10068&lt;/a&gt;] -         Add documentation for async/RocksDB-based timers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10085&#39;&gt;FLINK-10085&lt;/a&gt;] -         Update AbstractOperatorRestoreTestBase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10087&#39;&gt;FLINK-10087&lt;/a&gt;] -         Update BucketingSinkMigrationTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10089&#39;&gt;FLINK-10089&lt;/a&gt;] -         Update FlinkKafkaConsumerBaseMigrationTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10090&#39;&gt;FLINK-10090&lt;/a&gt;] -         Update ContinuousFileProcessingMigrationTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10091&#39;&gt;FLINK-10091&lt;/a&gt;] -         Update WindowOperatorMigrationTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10092&#39;&gt;FLINK-10092&lt;/a&gt;] -         Update StatefulJobSavepointMigrationITCase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10109&#39;&gt;FLINK-10109&lt;/a&gt;] -         Add documentation for StreamingFileSink
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9289&#39;&gt;FLINK-9289&lt;/a&gt;] -         Parallelism of generated operators should have max parallism of input
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9546&#39;&gt;FLINK-9546&lt;/a&gt;] -         The heartbeatTimeoutIntervalMs of HeartbeatMonitor should be larger than 0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9693&#39;&gt;FLINK-9693&lt;/a&gt;] -         Possible memory leak in jobmanager retaining archived checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9972&#39;&gt;FLINK-9972&lt;/a&gt;] -         Debug memory logging not working 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10011&#39;&gt;FLINK-10011&lt;/a&gt;] -         Old job resurrected during HA failover
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10063&#39;&gt;FLINK-10063&lt;/a&gt;] -         Jepsen: Automatically restart Mesos Processes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10101&#39;&gt;FLINK-10101&lt;/a&gt;] -         Mesos web ui url is missing.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10105&#39;&gt;FLINK-10105&lt;/a&gt;] -         Test failure because of jobmanager.execution.failover-strategy is outdated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10115&#39;&gt;FLINK-10115&lt;/a&gt;] -         Content-length limit is also applied to FileUploads
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10116&#39;&gt;FLINK-10116&lt;/a&gt;] -         createComparator fails on case class with Unit type fields prior to the join-key
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10141&#39;&gt;FLINK-10141&lt;/a&gt;] -         Reduce lock contention introduced with 1.5
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10142&#39;&gt;FLINK-10142&lt;/a&gt;] -         Reduce synchronization overhead for credit notifications
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10150&#39;&gt;FLINK-10150&lt;/a&gt;] -         Chained batch operators interfere with each other other
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10151&#39;&gt;FLINK-10151&lt;/a&gt;] -         [State TTL] Fix false recursion call in TransformingStateTableKeyGroupPartitioner.tryAddToSource
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10154&#39;&gt;FLINK-10154&lt;/a&gt;] -         Make sure we always read at least one record in KinesisConnector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10169&#39;&gt;FLINK-10169&lt;/a&gt;] -         RowtimeValidator fails with custom TimestampExtractor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10172&#39;&gt;FLINK-10172&lt;/a&gt;] -         Inconsistentcy in ExpressionParser and ExpressionDsl for order by asc/desc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10192&#39;&gt;FLINK-10192&lt;/a&gt;] -         SQL Client table visualization mode does not update correctly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10193&#39;&gt;FLINK-10193&lt;/a&gt;] -         Default RPC timeout is used when triggering savepoint via JobMasterGateway
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10204&#39;&gt;FLINK-10204&lt;/a&gt;] -         StreamElementSerializer#copy broken for LatencyMarkers 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10255&#39;&gt;FLINK-10255&lt;/a&gt;] -         Standby Dispatcher locks submitted JobGraphs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10261&#39;&gt;FLINK-10261&lt;/a&gt;] -         INSERT INTO does not work with ORDER BY clause
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10267&#39;&gt;FLINK-10267&lt;/a&gt;] -         [State] Fix arbitrary iterator access on RocksDBMapIterator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10269&#39;&gt;FLINK-10269&lt;/a&gt;] -         Elasticsearch 6 UpdateRequest fail because of binary incompatibility
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10283&#39;&gt;FLINK-10283&lt;/a&gt;] -         FileCache logs unnecessary warnings
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10293&#39;&gt;FLINK-10293&lt;/a&gt;] -         RemoteStreamEnvironment does not forward port to RestClusterClient
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10314&#39;&gt;FLINK-10314&lt;/a&gt;] -         Blocking calls in Execution Graph creation bring down cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10328&#39;&gt;FLINK-10328&lt;/a&gt;] -         Stopping the ZooKeeperSubmittedJobGraphStore should release all currently held locks
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10329&#39;&gt;FLINK-10329&lt;/a&gt;] -         Fail with exception if job cannot be removed by ZooKeeperSubmittedJobGraphStore#removeJobGraph
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        New Feature
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10022&#39;&gt;FLINK-10022&lt;/a&gt;] -         Add metrics for input/output buffers
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9013&#39;&gt;FLINK-9013&lt;/a&gt;] -         Document yarn.containers.vcores only being effective when adapting YARN config
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9446&#39;&gt;FLINK-9446&lt;/a&gt;] -         Compatibility table not up-to-date
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9795&#39;&gt;FLINK-9795&lt;/a&gt;] -         Update Mesos documentation for flip6
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9859&#39;&gt;FLINK-9859&lt;/a&gt;] -         More Akka config options
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9899&#39;&gt;FLINK-9899&lt;/a&gt;] -         Add more metrics to the Kinesis source connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9962&#39;&gt;FLINK-9962&lt;/a&gt;] -         allow users to specify TimeZone in DateTimeBucketer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10001&#39;&gt;FLINK-10001&lt;/a&gt;] -         Improve Kubernetes documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10006&#39;&gt;FLINK-10006&lt;/a&gt;] -         Improve logging in BarrierBuffer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10020&#39;&gt;FLINK-10020&lt;/a&gt;] -         Kinesis Consumer listShards should support more recoverable exceptions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10082&#39;&gt;FLINK-10082&lt;/a&gt;] -         Initialize StringBuilder in Slf4jReporter with estimated size
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10094&#39;&gt;FLINK-10094&lt;/a&gt;] -         Always backup default config for end-to-end tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10110&#39;&gt;FLINK-10110&lt;/a&gt;] -         Harden e2e Kafka shutdown
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10131&#39;&gt;FLINK-10131&lt;/a&gt;] -         Improve logging around ResultSubpartition
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10137&#39;&gt;FLINK-10137&lt;/a&gt;] -         YARN: Log completed Containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10164&#39;&gt;FLINK-10164&lt;/a&gt;] -         Add support for resuming from savepoints to StandaloneJobClusterEntrypoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10170&#39;&gt;FLINK-10170&lt;/a&gt;] -         Support string representation for map and array types in descriptor-based Table API
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10185&#39;&gt;FLINK-10185&lt;/a&gt;] -         Make ZooKeeperStateHandleStore#releaseAndTryRemove synchronous
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10223&#39;&gt;FLINK-10223&lt;/a&gt;] -         TaskManagers should log their ResourceID during startup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10301&#39;&gt;FLINK-10301&lt;/a&gt;] -         Allow a custom Configuration in StreamNetworkBenchmarkEnvironment
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10325&#39;&gt;FLINK-10325&lt;/a&gt;] -         [State TTL] Refactor TtlListState to use only loops, no java stream API for performance
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Test
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10084&#39;&gt;FLINK-10084&lt;/a&gt;] -         Migration tests weren&amp;#39;t updated for 1.5
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 20 Sep 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/09/20/release-1.6.1.html</link>
<guid isPermaLink="true">/news/2018/09/20/release-1.6.1.html</guid>
</item>

<item>
<title>Apache Flink 1.5.4 Released</title>
<description>The Apache Flink community released the fourth bugfix version of the Apache Flink 1.5 series.

This release includes more than 20 fixes and minor improvements for Flink 1.5.4. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.5.4.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.5.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.4&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9878&#39;&gt;FLINK-9878&lt;/a&gt;] -         IO worker threads BLOCKED on SSL Session Cache while CMS full gc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10011&#39;&gt;FLINK-10011&lt;/a&gt;] -         Old job resurrected during HA failover
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10101&#39;&gt;FLINK-10101&lt;/a&gt;] -         Mesos web ui url is missing.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10115&#39;&gt;FLINK-10115&lt;/a&gt;] -         Content-length limit is also applied to FileUploads
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10116&#39;&gt;FLINK-10116&lt;/a&gt;] -         createComparator fails on case class with Unit type fields prior to the join-key
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10141&#39;&gt;FLINK-10141&lt;/a&gt;] -         Reduce lock contention introduced with 1.5
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10142&#39;&gt;FLINK-10142&lt;/a&gt;] -         Reduce synchronization overhead for credit notifications
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10150&#39;&gt;FLINK-10150&lt;/a&gt;] -         Chained batch operators interfere with each other other
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10172&#39;&gt;FLINK-10172&lt;/a&gt;] -         Inconsistentcy in ExpressionParser and ExpressionDsl for order by asc/desc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10193&#39;&gt;FLINK-10193&lt;/a&gt;] -         Default RPC timeout is used when triggering savepoint via JobMasterGateway
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10204&#39;&gt;FLINK-10204&lt;/a&gt;] -         StreamElementSerializer#copy broken for LatencyMarkers 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10255&#39;&gt;FLINK-10255&lt;/a&gt;] -         Standby Dispatcher locks submitted JobGraphs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10261&#39;&gt;FLINK-10261&lt;/a&gt;] -         INSERT INTO does not work with ORDER BY clause
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10267&#39;&gt;FLINK-10267&lt;/a&gt;] -         [State] Fix arbitrary iterator access on RocksDBMapIterator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10293&#39;&gt;FLINK-10293&lt;/a&gt;] -         RemoteStreamEnvironment does not forward port to RestClusterClient
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10314&#39;&gt;FLINK-10314&lt;/a&gt;] -         Blocking calls in Execution Graph creation bring down cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10328&#39;&gt;FLINK-10328&lt;/a&gt;] -         Stopping the ZooKeeperSubmittedJobGraphStore should release all currently held locks
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10329&#39;&gt;FLINK-10329&lt;/a&gt;] -         Fail with exception if job cannot be removed by ZooKeeperSubmittedJobGraphStore#removeJobGraph
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10082&#39;&gt;FLINK-10082&lt;/a&gt;] -         Initialize StringBuilder in Slf4jReporter with estimated size
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10131&#39;&gt;FLINK-10131&lt;/a&gt;] -         Improve logging around ResultSubpartition
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10137&#39;&gt;FLINK-10137&lt;/a&gt;] -         YARN: Log completed Containers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10185&#39;&gt;FLINK-10185&lt;/a&gt;] -         Make ZooKeeperStateHandleStore#releaseAndTryRemove synchronous
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10223&#39;&gt;FLINK-10223&lt;/a&gt;] -         TaskManagers should log their ResourceID during startup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10301&#39;&gt;FLINK-10301&lt;/a&gt;] -         Allow a custom Configuration in StreamNetworkBenchmarkEnvironment
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Thu, 20 Sep 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/09/20/release-1.5.4.html</link>
<guid isPermaLink="true">/news/2018/09/20/release-1.5.4.html</guid>
</item>

<item>
<title>Apache Flink 1.5.3 Released</title>
<description>The Apache Flink community released the third bugfix version of the Apache Flink 1.5 series.

This release includes more than 20 fixes and minor improvements for Flink 1.5.3. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.5.3.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.5.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.3&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9951&#39;&gt;FLINK-9951&lt;/a&gt;] -         Update scm developerConnection
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5750&#39;&gt;FLINK-5750&lt;/a&gt;] -         Incorrect translation of n-ary Union
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9289&#39;&gt;FLINK-9289&lt;/a&gt;] -         Parallelism of generated operators should have max parallism of input
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9546&#39;&gt;FLINK-9546&lt;/a&gt;] -         The heartbeatTimeoutIntervalMs of HeartbeatMonitor should be larger than 0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9655&#39;&gt;FLINK-9655&lt;/a&gt;] -         Externalized checkpoint E2E test fails on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9693&#39;&gt;FLINK-9693&lt;/a&gt;] -         Possible memory leak in jobmanager retaining archived checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9694&#39;&gt;FLINK-9694&lt;/a&gt;] -         Potentially NPE in CompositeTypeSerializerConfigSnapshot constructor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9923&#39;&gt;FLINK-9923&lt;/a&gt;] -         OneInputStreamTaskTest.testWatermarkMetrics fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9935&#39;&gt;FLINK-9935&lt;/a&gt;] -         Batch Table API: grouping by window and attribute causes java.lang.ClassCastException:
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9936&#39;&gt;FLINK-9936&lt;/a&gt;] -         Mesos resource manager unable to connect to master after failover
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9946&#39;&gt;FLINK-9946&lt;/a&gt;] -         Quickstart E2E test archetype version is hard-coded
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9969&#39;&gt;FLINK-9969&lt;/a&gt;] -         Unreasonable memory requirements to complete examples/batch/WordCount
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9972&#39;&gt;FLINK-9972&lt;/a&gt;] -         Debug memory logging not working 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9978&#39;&gt;FLINK-9978&lt;/a&gt;] -         Source release sha contains absolute file path
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9985&#39;&gt;FLINK-9985&lt;/a&gt;] -         Incorrect parameter order in document
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9988&#39;&gt;FLINK-9988&lt;/a&gt;] -           job manager does not respect property jobmanager.web.address
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10013&#39;&gt;FLINK-10013&lt;/a&gt;] -         Fix Kerberos integration for FLIP-6 YarnTaskExecutorRunner 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10033&#39;&gt;FLINK-10033&lt;/a&gt;] -         Let Task release reference to Invokable on shutdown
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10070&#39;&gt;FLINK-10070&lt;/a&gt;] -         Flink cannot be compiled with maven 3.0.x
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        New Feature
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10022&#39;&gt;FLINK-10022&lt;/a&gt;] -         Add metrics for input/output buffers
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9446&#39;&gt;FLINK-9446&lt;/a&gt;] -         Compatibility table not up-to-date
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9765&#39;&gt;FLINK-9765&lt;/a&gt;] -         Improve CLI responsiveness when cluster is not reachable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9806&#39;&gt;FLINK-9806&lt;/a&gt;] -         Add a canonical link element to documentation HTML
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9859&#39;&gt;FLINK-9859&lt;/a&gt;] -         More Akka config options
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9942&#39;&gt;FLINK-9942&lt;/a&gt;] -         Guard handlers against null fields in requests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9986&#39;&gt;FLINK-9986&lt;/a&gt;] -         Remove unnecessary information from .version.properties file
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9987&#39;&gt;FLINK-9987&lt;/a&gt;] -         Rework ClassLoader E2E test to not rely on .version.properties file
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10006&#39;&gt;FLINK-10006&lt;/a&gt;] -         Improve logging in BarrierBuffer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-10016&#39;&gt;FLINK-10016&lt;/a&gt;] -         Make YARN/Kerberos end-to-end test stricter
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 21 Aug 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/08/21/release-1.5.3.html</link>
<guid isPermaLink="true">/news/2018/08/21/release-1.5.3.html</guid>
</item>

<item>
<title>Apache Flink 1.6.0 Release Announcement</title>
<description>The Apache Flink community is proud to announce the 1.6.0 release. Over the past 2 months, the Flink community has worked hard to resolve more than 360 issues. Please check the [complete changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12342760) for more details.

Flink 1.6.0 is the seventh major release in the 1.x.y series. It is API-compatible with previous 1.x.y releases for APIs annotated with the `@Public` annotation.

We encourage everyone to [download the release](http://flink.apache.org/downloads.html) and check out the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.6/).
Feedback through the Flink [mailing lists](http://flink.apache.org/community.html#mailing-lists) or [JIRA](https://issues.apache.org/jira/projects/FLINK/summary) is, as always, very much appreciated!

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html) on the Flink project site.

{% toc %}

## Flink 1.6 - The next step in stateful stream processing

In Flink 1.6.0 we continue the groundwork we laid out in earlier versions: Enabling Flink users to seamlessly run fast data processing and build data-driven and data-intensive applications effortlessly. 

* Flink&#39;s state support is one of the key features which makes Flink so versatile and powerful when it comes to implementing all kinds of use cases. 
To make it even easier, the community added **native support for state TTL** ([FLINK-9510](https://issues.apache.org/jira/browse/FLINK-9510), [FLINK-9938](https://issues.apache.org/jira/browse/FLINK-9938)). 
This feature allows to clean up state after it has expired. 
With Flink 1.6.0 **timer state can now go out of core** ([FLINK-9485](https://issues.apache.org/jira/browse/FLINK-9485)) by storing the relevant state in RocksDB. 
Last but not least, we also **improved the deletion of timers** ([FLINK-9423](https://issues.apache.org/jira/browse/FLINK-9423)) significantly.

* With Flink 1.5.0 we reworked Flink&#39;s distributed architecture to add support for resource elasticity and different deployment scenarios, most notably a better container integration. 
In Flink 1.6.0 we follow up on some of the unfinished aspects of this work: **All external communication, including job submissions, is now HTTP/REST based** ([FLINK-9280](https://issues.apache.org/jira/browse/FLINK-9280)) which eases container setups considerably. 
Flink 1.6.0 also comes with a **container entrypoint** ([FLINK-9488](https://issues.apache.org/jira/browse/FLINK-9488)) which allows to easily bootstrap a containerized job cluster.

* Streaming SQL is one of the features with the most disruptive potential, because it makes Flink much more accessible. 
In Apache Flink 1.6.0 the community **improved further the SQL CLI** ([FLINK-8863](https://issues.apache.org/jira/browse/FLINK-8863)) making the **executions of streaming and batch queries** ([FLINK-8861](https://issues.apache.org/jira/browse/FLINK-8861)) against a multitude of data sources a piece of cake. 
In addition, the **full Avro support** ([FLINK-9444](https://issues.apache.org/jira/browse/FLINK-9444)) makes reading any kind of Avro data seamless. 
Last but not least, the community **hardened Flink&#39;s CEP library** ([FLINK-9418](https://issues.apache.org/jira/browse/FLINK-9418)) that can now handle significantly larger use cases.

* What would be a distributed processing engine without its connectors to talk to the outside world? 
In the latest Flink release we added a **new StreamingFileSink** ([FLINK-9750](https://issues.apache.org/jira/browse/FLINK-9750)) that succeeds the `BucketingSink` as the standard file sink. 
The community also added support for **ElasticSearch 6.x** ([FLINK-7386](https://issues.apache.org/jira/browse/FLINK-7386)) and implemented multiple **AvroDeserializationSchemas** ([FLINK-9338](https://issues.apache.org/jira/browse/FLINK-9338)) to easily ingest Avro data.

## New Features and Improvements

### Improving Flink&#39;s State Support

* **Support for State TTL** ([FLINK-9510](https://issues.apache.org/jira/browse/FLINK-9510), [FLINK-9938](https://issues.apache.org/jira/browse/FLINK-9938)):
This feature allows to specify a time-to-live (TTL) for Flink state. 
Once the time-to-live has been exceeded Flink will no longer give access to the respective state values. 
The expired data is cleaned up on access so that the operator keyed state doesn’t grow infinitely and it won&#39;t be included in subsequent checkpoints.
This feature fully complies with new data protection regulations (e.g. GDPR).

* **Scalable Timers Based on RocksDB** ([FLINK-9485](https://issues.apache.org/jira/browse/FLINK-9485)):
Flink’s timer state can now be stored in RocksDB, allowing the technology to support significantly bigger timer state since it can go out of core/spill to disk. 
Previously, users were limited to the heap memory size. 
On top of that, snapshots of the timer state are now asynchronous, i.e., they no longer block the processing pipeline during checkpoints and can be incremental.

* **Faster Timer Deletions** ([FLINK-9423](https://issues.apache.org/jira/browse/FLINK-9423)): 
Improving Flink’s internal timer data structure such that the deletion complexity is reduced from O(n) to O(log n). 
This significantly improves Flink jobs using timers. 
Deleting timers is also exposed through a user-facing API now.

### Extending Flink&#39;s Deployment Options

* **Job Cluster Container Entrypoint** ([FLINK-9488](https://issues.apache.org/jira/browse/FLINK-9488)):
Flink 1.6.0 provides an easy-to-use container entrypoint to bootstrap a job cluster. 
Combining this entrypoint with a user-code jar creates a self-contained image which automatically executes the contained Flink job when deployed. 
Since the image already contains the Flink job, client communication is no longer necessary. 
Avoiding additional communication steps with the client reduces the number of moving parts and improves operations in a container environment significantly.

* **Fully RESTified Job Submission** ([FLINK-9280](https://issues.apache.org/jira/browse/FLINK-9280)):
The Flink client now sends all job-relevant content via a single POST call to the server. 
This allows a much easier integration with cluster management frameworks and container environments, since opening custom ports is no longer necessary.

### Enhancing SQL and Table API

* **User-Defined Function in SQL Client CLI** ([FLINK-8863](https://issues.apache.org/jira/browse/FLINK-8863)):
The SQL Client CLI now supports the registration of user-defined functions. 
This considerably improves the CLI’s expressiveness, because SQL queries can be enriched with more powerful custom table, aggregate, and scalar functions.

* **Support for Batch Queries in SQL Client CLI** ([FLINK-8861](https://issues.apache.org/jira/browse/FLINK-8861)):
The SQL Client CLI now supports the execution of batch queries.

* **Support for INSERT INTO Statements in SQL Client CLI** ([FLINK-8858](https://issues.apache.org/jira/browse/FLINK-8858)):
By supporting SQL’s INSERT INTO statements, the SQL Client CLI can be used to submit long-running SQL queries to Flink that sink their results in external systems. 
The SQL Client itself can be shut down after submission without stopping the job. 

* **Unified Table Sinks and Formats** ([FLINK-8866](https://issues.apache.org/jira/browse/FLINK-8866), [FLINK-8558](https://issues.apache.org/jira/browse/FLINK-8558)):
In the past, table sinks had to be configured programmatically and were tied to a specific format and implementation.
This release reworked these aspects by decoupling formats from connectors and improving how table sinks are discovered and configured. 
Table sinks can now be defined in a YAML file using string-based properties without having to write a single line of code.

* **New Kafka Table Sink** ([FLINK-9846](https://issues.apache.org/jira/browse/FLINK-9846)):
The Kafka table sink now uses the new unified APIs and supports both JSON and Avro formats.

* **Full SQL Avro Support** ([FLINK-9444](https://issues.apache.org/jira/browse/FLINK-9444)):
Flink’s Table &amp; SQL API now understands the full spectrum of Avro types including generic/specific records and logical types. 
The types are automatically mapped from and to Flink-equivalent types allowing to specify end-to-end ETL pipelines in SQL.

* **Improved Expressiveness of SQL and Table API** ([FLINK-5878](https://issues.apache.org/jira/browse/FLINK-5878), [FLINK-8688](https://issues.apache.org/jira/browse/FLINK-8688), [FLINK-6810](https://issues.apache.org/jira/browse/FLINK-6810)):
Flink’s Table &amp; SQL API supports left, right, and full outer joins that allow for continuous result-updating queries.
SQL aggregate functions support the `DISTINCT` keyword. 
Queries such as `COUNT(DISTINCT column)` are supported for windowed and non-windowed aggregations.
Both SQL and Table API now include more built-in functions such as `MD5, SHA1, SHA2, LOG`, and `UNNEST` for multisets.

### More Connectors

* **New StreamingFileSink** ([FLINK-9750](https://issues.apache.org/jira/browse/FLINK-9750)):
The new `StreamingFileSink` is an exactly-once sink for writing to filesystems which capitalizes on the knowledge acquired from the previous `BucketingSink`. 
Exactly-once is supported through integration of the sink with Flink’s checkpointing mechanism.
The new sink is built upon Flink’s own `FileSystem` abstraction and it supports local file system and HDFS, with plans for S3 support in the near future.
It exposes pluggable file rolling and bucketing policies.
Apart from row-wise encoding formats, the new `StreamingFileSink` comes with support for Parquet.
Other bulk-encoding formats like ORC can be easily added using the exposed APIs.

* **ElasticSearch 6.x Connector and Improved Support for Older Versions** ([FLINK-7386](https://issues.apache.org/jira/browse/FLINK-7386)):
Flink now comes with a connector for ElasticSearch 6.x, that is built on top of Elasticsearch’s new [high level REST client](https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high.html).
For older ElasticSearch versions which still use the native Java `TransportClient`, Flink&#39;s Elasticsearch connectors now support up to Elasticsearch version 5.6.10.
Some APIs in the `RequestIndexer&#39;s` public interface of the ElasticSearch connector have been deprecated. 
Please refer to the Javadoc / documentation for the new preferred API.

* **Avro Deserialization Schemas** ([FLINK-9338](https://issues.apache.org/jira/browse/FLINK-9338)):
Flink comes now with a `DeserializationSchema` which allows deserializing Avro encoded messages. 
It also adds out-of-the-box integration with Confluent’s schema registry.

### Jepsen Based Distributed Tests Suite

The Flink community added a Jepsen based test suite ([FLINK-9004](https://issues.apache.org/jira/browse/FLINK-9004)) which validates the behavior of Flink’s distributed cluster components under real-world faults. 
It is a first step towards a higher test coverage for Flink&#39;s fault tolerance mechanisms. 
The community intends to incrementally improve test coverage with it.

### Various Other Features and Improvements

* **Hardened CEP Library** ([FLINK-9418](https://issues.apache.org/jira/browse/FLINK-9418)):
The CEP operator’s internal NFA state is now backed by Flink state.
That way it can go out of core to support much larger use cases.

* **More Expressive DataStream Joins** ([FLINK-8478](https://issues.apache.org/jira/browse/FLINK-8478)):
Flink 1.6.0 adds support for interval joins in the DataStream API. 
With this feature it is now possible to join together events from different streams where elements from one stream lie in a specified time interval relative to elements from the other stream.
Check out the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.6/dev/stream/operators/joining.html) for more details.

* **Intra-Cluster Mutual Authentication** ([FLINK-9312](https://issues.apache.org/jira/browse/FLINK-9312)):
Flink’s cluster components now enforce mutual authentication with their peers. 
This allows only Flink components to talk to each other, making it impossible for malicious actors to impersonate Flink components in order to eavesdrop on the cluster communication.

## Release Notes

Please review the [release notes](https://ci.apache.org/projects/flink/flink-docs-release-1.6/release-notes/flink-1.6.html) if you plan to upgrade your Flink setup to Flink 1.6.

## List of Contributors

According to git shortlog, the following 112 people contributed to the 1.6.0 release. Thanks to all contributors!

Alejandro Alcalde, Alexander Koltsov, Alexey Tsitkin, Aljoscha Krettek, Andreas Fink, Andrey Zagrebin, Arunan Sugunakumar, Ashwin Sinha, Bill Lee, Bowen Li, Chesnay Schepler, Christophe Jolif, Clément Tamisier, Craig Foster, David Anderson, Dawid Wysakowicz, Deepak Sharnma, Dmitrii_Kniazev, EAlexRojas, Elias Levy, Eron Wright, Ethan Li, Fabian Hueske, Florian Schmidt, Franz Thoma, Gabor Gevay, Georgii Gobozov, Haohui Mai, Jamie Grier, Jeff Zhang, Jelmer Kuperus, Jiayi Liao, Jungtaek Lim, Kailash HD, Ken Geis, Ken Krugler, Lakshmi Gururaja Rao, Leonid Ishimnikov, Matrix42, Michael Gendelman, MichealShin, Moser Thomas W, Nico Duldhardt, Nico Kruber, Oleksandr Nitavskyi, PJ Fanning, Patrick Lucas, Pavel Shvetsov, Philippe Duveau, Piotr Nowojski, Qiu Congxian/klion26, Rinat Sharipov, Rong Rong, Rune Skou Larsen, Sayat Satybaldiyev, Shuyi Chen, Stefan Richter, Stephan Ewen, Stephen Parente, Thomas Weise, Till Rohrmann, Timo Walther, Tobii42, Tzu-Li (Gordon) Tai, Viktor Vlasov, Wosin, Xingcan Cui, Xpray, Yan Zhou, Yazdan.JS, Yun Tang, Zhijiang, Zsolt Donca, an4828, aria, binlijin, blueszheng, davidxdh, gyao, hequn8128, hzyuqi1, jerryjzhang, jparkie, juhoautio, kai-chi, kkloudas, klion26, lamber-ken, lincoln-lil, linjun, liurenjie1024, lsy, maqingxiang-it, maxbelov, mayyamus, minwenjun, neoremind, sampathBhat, shankarganesh1234, shuai.xus, sihuazhou, snuyanzin, triones.deng, vinoyang, xueyu, yangshimin, yuemeng, zhangminglei, zhouhai02, zjureel, 军长, 陈梓立
</description>
<pubDate>Thu, 09 Aug 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/08/09/release-1.6.0.html</link>
<guid isPermaLink="true">/news/2018/08/09/release-1.6.0.html</guid>
</item>

<item>
<title>Apache Flink 1.5.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.5 series.

This release includes more than 20 fixes and minor improvements for Flink 1.5.1. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.5.2.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.5.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9839&#39;&gt;FLINK-9839&lt;/a&gt;] -         End-to-end test: Streaming job with SSL
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5750&#39;&gt;FLINK-5750&lt;/a&gt;] -         Incorrect translation of n-ary Union
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8161&#39;&gt;FLINK-8161&lt;/a&gt;] -         Flakey YARNSessionCapacitySchedulerITCase on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8731&#39;&gt;FLINK-8731&lt;/a&gt;] -         TwoInputStreamTaskTest flaky on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9091&#39;&gt;FLINK-9091&lt;/a&gt;] -         Failure while enforcing releasability in building flink-json module
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9380&#39;&gt;FLINK-9380&lt;/a&gt;] -         Failing end-to-end tests should not clean up logs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9439&#39;&gt;FLINK-9439&lt;/a&gt;] -         DispatcherTest#testJobRecovery dead locks
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9575&#39;&gt;FLINK-9575&lt;/a&gt;] -         Potential race condition when removing JobGraph in HA
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9584&#39;&gt;FLINK-9584&lt;/a&gt;] -         Unclosed streams in Bucketing-/RollingSink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9658&#39;&gt;FLINK-9658&lt;/a&gt;] -         Test data output directories are no longer cleaned up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9706&#39;&gt;FLINK-9706&lt;/a&gt;] -         DispatcherTest#testSubmittedJobGraphListener fails on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9743&#39;&gt;FLINK-9743&lt;/a&gt;] -         PackagedProgram.extractContainedLibraries fails on Windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9754&#39;&gt;FLINK-9754&lt;/a&gt;] -         Release scripts refers to non-existing profile
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9755&#39;&gt;FLINK-9755&lt;/a&gt;] -         Exceptions in RemoteInputChannel#notifyBufferAvailable() are not propagated to the responsible thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9762&#39;&gt;FLINK-9762&lt;/a&gt;] -         CoreOptions.TMP_DIRS wrongly managed on Yarn
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9766&#39;&gt;FLINK-9766&lt;/a&gt;] -         Incomplete/incorrect cleanup in RemoteInputChannelTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9771&#39;&gt;FLINK-9771&lt;/a&gt;] -          &amp;quot;Show Plan&amp;quot; option under Submit New Job in WebUI not working 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9772&#39;&gt;FLINK-9772&lt;/a&gt;] -         Documentation of Hadoop API outdated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9784&#39;&gt;FLINK-9784&lt;/a&gt;] -         Inconsistent use of &amp;#39;static&amp;#39; in AsyncIOExample.java
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9793&#39;&gt;FLINK-9793&lt;/a&gt;] -         When submitting a flink job with yarn-cluster, flink-dist*.jar is repeatedly uploaded
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9810&#39;&gt;FLINK-9810&lt;/a&gt;] -         JarListHandler does not close opened jars
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9838&#39;&gt;FLINK-9838&lt;/a&gt;] -         Slot request failed Exceptions after completing a job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9841&#39;&gt;FLINK-9841&lt;/a&gt;] -         Web UI only show partial taskmanager log 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9842&#39;&gt;FLINK-9842&lt;/a&gt;] -         Job submission fails via CLI with SSL enabled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9847&#39;&gt;FLINK-9847&lt;/a&gt;] -         OneInputStreamTaskTest.testWatermarksNotForwardedWithinChainWhenIdle unstable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9857&#39;&gt;FLINK-9857&lt;/a&gt;] -         Processing-time timers fire too early
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9860&#39;&gt;FLINK-9860&lt;/a&gt;] -         Netty resource leak on receiver side
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9872&#39;&gt;FLINK-9872&lt;/a&gt;] -         SavepointITCase#testSavepointForJobWithIteration does not properly cancel jobs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9908&#39;&gt;FLINK-9908&lt;/a&gt;] -         Inconsistent state of SlotPool after ExecutionGraph cancellation 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9910&#39;&gt;FLINK-9910&lt;/a&gt;] -         Non-queued scheduling failure sometimes does not return the slot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9911&#39;&gt;FLINK-9911&lt;/a&gt;] -         SlotPool#failAllocation is called outside of main thread
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        New Feature
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9499&#39;&gt;FLINK-9499&lt;/a&gt;] -         Allow REST API for running a job to provide job configuration as body of POST request
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9659&#39;&gt;FLINK-9659&lt;/a&gt;] -         Remove hard-coded sleeps in bucketing sink E2E test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9748&#39;&gt;FLINK-9748&lt;/a&gt;] -         create_source_release pollutes flink root directory
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9768&#39;&gt;FLINK-9768&lt;/a&gt;] -         Only build flink-dist for binary releases
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9785&#39;&gt;FLINK-9785&lt;/a&gt;] -         Add remote addresses to LocalTransportException instances
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9801&#39;&gt;FLINK-9801&lt;/a&gt;] -         flink-dist is missing dependency on flink-examples
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9804&#39;&gt;FLINK-9804&lt;/a&gt;] -         KeyedStateBackend.getKeys() does not work on RocksDB MapState
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9811&#39;&gt;FLINK-9811&lt;/a&gt;] -         Add ITCase for interactions of Jar handlers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9873&#39;&gt;FLINK-9873&lt;/a&gt;] -         Log actual state when aborting checkpoint due to task not running
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9881&#39;&gt;FLINK-9881&lt;/a&gt;] -         Typo in a function name in table.scala
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9888&#39;&gt;FLINK-9888&lt;/a&gt;] -         Remove unsafe defaults from release scripts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9909&#39;&gt;FLINK-9909&lt;/a&gt;] -         Remove cancellation of input futures from ConjunctFutures
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 31 Jul 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/07/31/release-1.5.2.html</link>
<guid isPermaLink="true">/news/2018/07/31/release-1.5.2.html</guid>
</item>

<item>
<title>Apache Flink 1.5.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.5 series.

This release includes more than 60 fixes and minor improvements for Flink 1.5.0. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.5.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.5.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.5.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8977&#39;&gt;FLINK-8977&lt;/a&gt;] -         End-to-end test: Manually resume job after terminal failure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8982&#39;&gt;FLINK-8982&lt;/a&gt;] -         End-to-end test: Queryable state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8989&#39;&gt;FLINK-8989&lt;/a&gt;] -         End-to-end test: ElasticSearch connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8996&#39;&gt;FLINK-8996&lt;/a&gt;] -         Include an operator with broadcast and union state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9008&#39;&gt;FLINK-9008&lt;/a&gt;] -         End-to-end test: Quickstarts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9320&#39;&gt;FLINK-9320&lt;/a&gt;] -         Update `test-ha.sh` end-to-end test to use general purpose DataStream job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9322&#39;&gt;FLINK-9322&lt;/a&gt;] -         Add exception throwing map function that simulates failures to the general purpose DataStream job
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9394&#39;&gt;FLINK-9394&lt;/a&gt;] -         Let externalized checkpoint resume e2e also test rescaling
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8785&#39;&gt;FLINK-8785&lt;/a&gt;] -         JobSubmitHandler does not handle JobSubmissionExceptions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8795&#39;&gt;FLINK-8795&lt;/a&gt;] -         Scala shell broken for Flip6
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8946&#39;&gt;FLINK-8946&lt;/a&gt;] -         TaskManager stop sending metrics after JobManager failover
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9174&#39;&gt;FLINK-9174&lt;/a&gt;] -         The type of state created in ProccessWindowFunction.proccess() is inconsistency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9215&#39;&gt;FLINK-9215&lt;/a&gt;] -         TaskManager Releasing  - org.apache.flink.util.FlinkException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9257&#39;&gt;FLINK-9257&lt;/a&gt;] -         End-to-end tests prints &amp;quot;All tests PASS&amp;quot; even if individual test-script returns non-zero exit code
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9258&#39;&gt;FLINK-9258&lt;/a&gt;] -         ConcurrentModificationException in ComponentMetricGroup.getAllVariables
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9326&#39;&gt;FLINK-9326&lt;/a&gt;] -         TaskManagerOptions.NUM_TASK_SLOTS does not work for local/embedded mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9374&#39;&gt;FLINK-9374&lt;/a&gt;] -         Flink Kinesis Producer does not backpressure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9398&#39;&gt;FLINK-9398&lt;/a&gt;] -         Flink CLI list running job returns all jobs except in CREATE state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9437&#39;&gt;FLINK-9437&lt;/a&gt;] -         Revert cypher suite update
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9458&#39;&gt;FLINK-9458&lt;/a&gt;] -         Unable to recover from job failure on YARN with NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9467&#39;&gt;FLINK-9467&lt;/a&gt;] -         No Watermark display on Web UI
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9468&#39;&gt;FLINK-9468&lt;/a&gt;] -         Wrong calculation of outputLimit in LimitedConnectionsFileSystem
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9493&#39;&gt;FLINK-9493&lt;/a&gt;] -         Forward exception when releasing a TaskManager at the SlotPool
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9494&#39;&gt;FLINK-9494&lt;/a&gt;] -         Race condition in Dispatcher with concurrent granting and revoking of leaderhship
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9500&#39;&gt;FLINK-9500&lt;/a&gt;] -         FileUploadHandler does not handle EmptyLastHttpContent
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9524&#39;&gt;FLINK-9524&lt;/a&gt;] -         NPE from ProcTimeBoundedRangeOver.scala
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9530&#39;&gt;FLINK-9530&lt;/a&gt;] -         Task numRecords metrics broken for chains
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9554&#39;&gt;FLINK-9554&lt;/a&gt;] -         flink scala shell doesn&amp;#39;t work in yarn mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9567&#39;&gt;FLINK-9567&lt;/a&gt;] -         Flink does not release resource in Yarn Cluster mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9570&#39;&gt;FLINK-9570&lt;/a&gt;] -         SQL Client merging environments uses AbstractMap
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9580&#39;&gt;FLINK-9580&lt;/a&gt;] -         Potentially unclosed ByteBufInputStream in RestClient#readRawResponse
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9627&#39;&gt;FLINK-9627&lt;/a&gt;] -         Extending &amp;#39;KafkaJsonTableSource&amp;#39; according to comments will result in NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9629&#39;&gt;FLINK-9629&lt;/a&gt;] -         Datadog metrics reporter does not have shaded dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9633&#39;&gt;FLINK-9633&lt;/a&gt;] -         Flink doesn&amp;#39;t use the Savepoint path&amp;#39;s filesystem to create the OuptutStream on Task.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9634&#39;&gt;FLINK-9634&lt;/a&gt;] -         Deactivate previous location based scheduling if local recovery is disabled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9636&#39;&gt;FLINK-9636&lt;/a&gt;] -         Network buffer leaks in requesting a batch of segments during canceling
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9646&#39;&gt;FLINK-9646&lt;/a&gt;] -         ExecutionGraphCoLocationRestartTest.testConstraintsAfterRestart failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9654&#39;&gt;FLINK-9654&lt;/a&gt;] -         Internal error while deserializing custom Scala TypeSerializer instances
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9655&#39;&gt;FLINK-9655&lt;/a&gt;] -         Externalized checkpoint E2E test fails on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9665&#39;&gt;FLINK-9665&lt;/a&gt;] -         PrometheusReporter does not properly unregister metrics
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9676&#39;&gt;FLINK-9676&lt;/a&gt;] -         Deadlock during canceling task and recycling exclusive buffer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9677&#39;&gt;FLINK-9677&lt;/a&gt;] -         RestClient fails for large uploads
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9684&#39;&gt;FLINK-9684&lt;/a&gt;] -         HistoryServerArchiveFetcher not working properly with secure hdfs cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9693&#39;&gt;FLINK-9693&lt;/a&gt;] -         Possible memory leak in jobmanager retaining archived checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9708&#39;&gt;FLINK-9708&lt;/a&gt;] -         Network buffer leaks when buffer request fails during buffer redistribution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9769&#39;&gt;FLINK-9769&lt;/a&gt;] -         FileUploads may be shared across requests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9770&#39;&gt;FLINK-9770&lt;/a&gt;] -         UI jar list broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9789&#39;&gt;FLINK-9789&lt;/a&gt;] -         Watermark metrics for an operator&amp;amp;task shadow each other
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        New Feature
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9153&#39;&gt;FLINK-9153&lt;/a&gt;] -         TaskManagerRunner should support rpc port range
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9280&#39;&gt;FLINK-9280&lt;/a&gt;] -         Extend JobSubmitHandler to accept jar files
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9316&#39;&gt;FLINK-9316&lt;/a&gt;] -         Expose operator unique ID to the user defined functions in DataStream .
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9564&#39;&gt;FLINK-9564&lt;/a&gt;] -         Expose end-to-end module directory to test scripts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9599&#39;&gt;FLINK-9599&lt;/a&gt;] -         Implement generic mechanism to receive files via rest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9669&#39;&gt;FLINK-9669&lt;/a&gt;] -         Introduce task manager assignment store
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9670&#39;&gt;FLINK-9670&lt;/a&gt;] -         Introduce slot manager factory
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9671&#39;&gt;FLINK-9671&lt;/a&gt;] -         Add configuration to enable task manager isolation.
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4301&#39;&gt;FLINK-4301&lt;/a&gt;] -         Parameterize Flink version in Quickstart bash script
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8650&#39;&gt;FLINK-8650&lt;/a&gt;] -         Add tests and documentation for WINDOW clause
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8654&#39;&gt;FLINK-8654&lt;/a&gt;] -         Extend quickstart docs on how to submit jobs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9109&#39;&gt;FLINK-9109&lt;/a&gt;] -         Add flink modify command to documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9355&#39;&gt;FLINK-9355&lt;/a&gt;] -         Simplify configuration of local recovery to a simple on/off
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9372&#39;&gt;FLINK-9372&lt;/a&gt;] -         Typo on Elasticsearch website link (elastic.io --&amp;gt; elastic.co)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9409&#39;&gt;FLINK-9409&lt;/a&gt;] -         Remove flink-avro and flink-json from /opt
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9456&#39;&gt;FLINK-9456&lt;/a&gt;] -         Let ResourceManager notify JobManager about failed/killed TaskManagers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9508&#39;&gt;FLINK-9508&lt;/a&gt;] -         General Spell Check on Flink Docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9517&#39;&gt;FLINK-9517&lt;/a&gt;] -         Fixing broken links on CLI and Upgrade Docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9518&#39;&gt;FLINK-9518&lt;/a&gt;] -         SSL setup Docs config example has wrong keys password 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9549&#39;&gt;FLINK-9549&lt;/a&gt;] -         Fix FlickCEP Docs broken link and minor style changes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9573&#39;&gt;FLINK-9573&lt;/a&gt;] -         Check for leadership with leader session id
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9594&#39;&gt;FLINK-9594&lt;/a&gt;] -         Add documentation for e2e test changes introduced with FLINK-9257
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9595&#39;&gt;FLINK-9595&lt;/a&gt;] -         Add instructions to docs about ceased support of KPL version used in Kinesis connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9638&#39;&gt;FLINK-9638&lt;/a&gt;] -         Add helper script to run single e2e test
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9672&#39;&gt;FLINK-9672&lt;/a&gt;] -         Fail fatally if we cannot submit job on added JobGraph signal
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9707&#39;&gt;FLINK-9707&lt;/a&gt;] -         LocalFileSystem does not support concurrent directory creations
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9729&#39;&gt;FLINK-9729&lt;/a&gt;] -         Duplicate lines for &amp;quot;Weekday name (Sunday .. Saturday)&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-9734&#39;&gt;FLINK-9734&lt;/a&gt;] -         Typo &amp;#39;field-deleimiter&amp;#39; in SQL client docs
&lt;/li&gt;
&lt;/ul&gt;
                                                                                                                                                
</description>
<pubDate>Thu, 12 Jul 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/07/12/release-1.5.1.html</link>
<guid isPermaLink="true">/news/2018/07/12/release-1.5.1.html</guid>
</item>

<item>
<title>Apache Flink 1.5.0 Release Announcement</title>
<description>The Apache Flink community is thrilled to announce the 1.5.0 release. Over the past 5 months, the Flink community has been working hard to resolve more than 780 issues. Please check the [complete changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?version=12341764&amp;projectId=12315522) for more detail. 

Flink 1.5.0 is the sixth major release in the 1.x.y series. As usual, it is API-compatible with previous 1.x.y releases for APIs annotated with the `@Public` annotation.

We encourage everyone to [download the release](http://flink.apache.org/downloads.html) and check out the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.5/).
Feedback through the Flink [mailing lists](http://flink.apache.org/community.html#mailing-lists) or [JIRA](https://issues.apache.org/jira/projects/FLINK/summary) is, as always, very much appreciated!

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html) on the Flink project site.

{% toc %}

## Flink 1.5 - Streaming Evolved

We believe that the field of stream processing, and Apache Flink with it, is taking another major leap at the moment. Stream processing is not just faster analytics and a more principled way of building fast continuous data pipelines. Stream processing is becoming a paradigm to build data-driven and data-intensive applications - it brings together data processing logic and application/business logic.

To help users realize the potential of this change, we spent a lot of effort in this release to rework some fundamental pieces of Flink. We want Flink to feel natural to users who do data engineering / data processing, as well as users who build data/event-driven applications (and of course those who combine both aspects inside their applications). This is an ongoing journey, but here are the first steps on this way:

* We have **redesigned and reimplemented large parts of Flink&#39;s process model**. This effort has been tracked under the name [FLIP-6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077). While not all is completed yet, the changes in Flink 1.5 enable more natural Kubernetes deployments and switch to HTTP/REST for all external communication (to naturally interact with service proxies). Simultaneously, Flink 1.5 simplifies deployments on common cluster managers (YARN, Mesos) and features dynamic resource allocation. 

* Streaming **broadcast state** ([FLINK-4940](https://issues.apache.org/jira/browse/FLINK-4940)) connects a broadcasted stream (e.g., context data, machine learning models, rules/patterns, triggers, ...) with other streams that may maintain (large) keyed state, such as feature vectors, state machines, etc. Prior to Flink 1.5, such use cases could not be easily built.

* To improve support for real-time applications with tight latency constraints, we made **major improvements to Flink’s network stack** ([FLINK-7315](https://issues.apache.org/jira/browse/FLINK-7315)). Flink 1.5 achieves even lower latencies while maintaining a high throughput. In addition, we improved checkpoint stability under backpressure.

* Streaming SQL is more and more recognized as a simple and powerful way to perform streaming analytics, build data pipelines, do feature engineering, or incrementally keep applications updated on changing data. We added a **SQL CLI for streaming SQL queries** ([FLIP-24](https://cwiki.apache.org/confluence/display/FLINK/FLIP-24+-+SQL+Client)) to make this feature easier to get started with.

## New Features and Improvements

### Rewrite of Flink’s Deployment and Process Model

The rewrite of Flink’s deployment and process model (internally known as [FLIP-6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077)) has been in the works for more than a year and was a substantial effort from the Flink community. Many contributors from several organizations, such as data Artisans, Alibaba, and Dell EMC, collaborated on the design and implementation of this feature, which has been the most significant improvement of a Flink core component since the project’s inception.

In a nutshell, the improvements add support for dynamic resource allocation and dynamic release of resources on YARN and Mesos schedulers for better resource utilization, failure recovery, and also dynamic scaling. Moreover, deployments on container management infrastructures like Kubernetes have been simplified and all requests to the JobManager now happen through REST. This includes job submission, cancellation, requesting job status, taking a savepoint, and so on.

The work also builds the foundation for future improvements of Flink’s integration with Kubernetes. In a later version it will be possible to dockerize jobs and deploy them in a natural way as part of the container deployment, i.e., without starting a Flink cluster first. In addition, the work is a big step towards support for applications that are able to automatically adjust their parallelism.

Note that Flink’s programming APIs are not affected by these improvements. 

### Broadcast State

Support for broadcast state, i.e., state that is replicated across all parallel instances of a function, has been an frequently requested feature. Typical use cases for broadcast state involve two streams, a control or configuration stream that serves rules, patterns, or other configuration messages and a regular data stream. The processing of the regular stream is configured by the messages of the control stream. By broadcasting rules or patterns to all parallel instances of a function, they can be applied to all events of the regular stream. 

Of course, broadcasted state can checkpointed and restored just like any other state in Flink with exactly-once state consistency guarantees. Moreover, broadcast state unblocks the implementation of the “dynamic patterns” feature for Flink’s CEP library.

### Improvements to Flink’s Network Stack

The performance of a distributed streaming application heavily depends on the component that transfers events from one operator to another via a network connection. In the context of stream processing, two performance metrics, latency and throughput, are important.

For Flink 1.5, the community worked on two efforts to improve Flink’s network stack, credit-based flow control and improving the transfer latency. Credit-based flow control reduces the amount of data “on the wire” to a minimum while preserving high throughput. This significantly reduces the time to complete a checkpoint in back pressure situations. Moreover, Flink is now able to achieve much lower latencies without a reduction in throughput. 

### Task-Local State Recovery

Flink’s checkpointing mechanism writes copies of an application’s state to a remote, persistent storage and loads it back in case of a failure. This mechanism ensures that state is not lost when an application fails. However, in case of a failure, it might take a while to load the state from the remote storage to recover the application.

Improving the checkpointing and recovery efficiency is an ongoing effort in the Flink community. Prominent features of previous releases were asynchronous and incremental checkpointing. In this release, we improved the efficiency of failure recovery. 

Task-local state recovery leverages the fact that a job typically fails due to a single crashed operator, TaskManager, or machine. When writing the state of operators to the remote storage, Flink can now also keep a copy on the local disk of each machine. In case of failover, the scheduler tries to reschedule tasks to their previous machine and load the state from the local disk instead of the remote storage, resulting in faster recovery.

### Extending Join Support for SQL and Table API

With the 1.5.0 release, Flink adds support for windowed outer equi-joins. Queries like the one shown below allow for joining of tables on bounded time ranges in both event-time and processing-time.

```sql
SELECT d.rideId, d.departureTime, a.arrivalTime
FROM Departures d LEFT OUTER JOIN Arrivals a
  ON d.rideId = a.rideId
  AND a.arrivalTime BETWEEN 
      d.deptureTime AND d.departureTime + &#39;2&#39; HOURS
```

For cases where two streaming tables should not be joined within a bounded time interval, Flink SQL also now supports non-windowed inner joins. This enables full-history matching, which is common in many standard SQL statements.

```sql
SELECT u.name, u.address, o.productId, o.amount
FROM Users u JOIN Orders o
  ON u.userId = o.userId
```

### SQL CLI Client

A few months ago, the community started an effort to add a service to execute streaming and batch SQL queries (FLIP-24). The new SQL CLI client is the first step of this effort and provides a SQL shell to run exploratory queries on data streams. The animation below shows a preview of this features.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/sql_client_demo.gif&quot; style=&quot;width:90%;margin:15px&quot;&gt;
&lt;/center&gt;

### Various Other Features and Improvements

* [OpenStack](https://www.openstack.org/) provides software for creating public and private clouds on pools of resources. Flink now supports OpenStack’s S3-like file system, Swift, for checkpoint and savepoint storage. Swift can be used without Hadoop dependencies.
* Reading and writing JSON messages from and to connectors has been improved. It’s now possible to parse a standard JSON schema in order to configure serializers and deserializers. The SQL CLI Client is able to read JSON records from Kafka.
* Applications can be rescaled without manually triggering a savepoint. Under the hood, Flink will still take a savepoint, stop the application, and rescale it to the new parallelism.
* Improved metrics for watermarks and latency. Flink now reports the minimum watermark in all operators, including sources. Moreover, the latency metrics were reworked for better integration with common metrics systems.
* The `FileInputFormat` (and many derived input formats) now supports reading files from multiple paths.
* The `BucketingSink` supports the specification of custom extensions for multiple parts.
* The `CassandraOutputFormat` can be used to emit `Row` objects.
* The Kinesis consumer allows for more customization.

## Release Notes

Please review the [release notes](https://ci.apache.org/projects/flink/flink-docs-release-1.5/release-notes/flink-1.5.html) if you plan to upgrade your Flink setup to Flink 1.5.

## List of Contributors

According to git shortlog, the following 106 people contributed to the 1.5.0 release. Thanks to all contributors!

Aegeaner, Alejandro Alcalde, Aljoscha Krettek, Andreas Fink, Andrey Zagrebin, Ankit Parashar, Arunan Sugunakumar, Bartłomiej Tartanus, Bowen Li, Cristian, Dan Kelley, David Anderson, Dawid Wysakowicz, Dian Fu, Dmitrii_Kniazev, Dyana Rose, EAlexRojas, Eron Wright, Fabian Hueske, Florian Schmidt, Gabor Gevay, Greg Hogan, Gyula Fora, Jark Wu, Jelmer Kuperus, Joerg Schad, John Eismeier, Kailash HD, Ken Geis, Ken Krugler, Kent Murra, Leonid Ishimnikov, Malcolm Taylor, Matrix42, Michael Fong, Michael Gendelman, Moser Thomas W, Nico Kruber, PJ Fanning, Patrick Lucas, Pavel Shvetsov, Phetsarath, Sourigna, Philip Luppens, Piotr Nowojski, Qiu Congxian/klion26, Razvan, Robert Metzger, Rong Rong, Shuyi Chen, Stefan Richter, Stephan Ewen, Stephen Parente, Steven Langbroek, Thomas Weise, Till Rohrmann, Timo Walther, Tony Wei, Tzu-Li (Gordon) Tai, Ufuk Celebi, Vetriselvan1187, Xingcan Cui, Xpray, Yazdan.JS, Zhijiang, Zohar Mizrahi, aria, biao.liub, binlijin, davidxdh, eastcirclek, eskabetxe, gyao, hequn8128, hzyuqi1, ifndef-SleePy, jparkie, juhoautio, kkloudas, maqingxiang-it, maxbelov, mayyamus, mingleiZhang, neoremind, nichuanlei, okumin, shankarganesh1234, shuai.xus, sihuazhou, summerleafs, sunjincheng121, triones.deng, twalthr, uybhatti, vinoyang, wenlong.lwl, yanghua, yew1eb, yuemeng, zentol, zhangminglei, zhouhai02, zjureel, 军长, 金竹, 王振涛, 陈梓立
</description>
<pubDate>Fri, 25 May 2018 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/05/25/release-1.5.0.html</link>
<guid isPermaLink="true">/news/2018/05/25/release-1.5.0.html</guid>
</item>

<item>
<title>Apache Flink 1.3.3 Released</title>
<description>The Apache Flink community released the third bugfix version of the Apache Flink 1.3 series.

This release includes 4 critical fixes related to checkpointing and recovery. The list below includes a detailed list of all fixes.

We highly recommend all Flink 1.3 series users to upgrade to Flink 1.3.3.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.3.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.3.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.3.3&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:
    
&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7783&#39;&gt;FLINK-7783&lt;/a&gt;] -         Don&amp;#39;t always remove checkpoints in ZooKeeperCompletedCheckpointStore#recover()
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7283&#39;&gt;FLINK-7283&lt;/a&gt;] -         PythonPlanBinderTest issues with python paths
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8487&#39;&gt;FLINK-8487&lt;/a&gt;] -         State loss after multiple restart attempts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8807&#39;&gt;FLINK-8807&lt;/a&gt;] -         ZookeeperCompleted checkpoint store can get stuck in infinite loop
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8890&#39;&gt;FLINK-8890&lt;/a&gt;] -         Compare checkpoints with order in CompletedCheckpoint.checkpointsMatch()
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 15 Mar 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/03/15/release-1.3.3.html</link>
<guid isPermaLink="true">/news/2018/03/15/release-1.3.3.html</guid>
</item>

<item>
<title>Apache Flink 1.4.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.4 series.

This release includes more than 10 fixes and minor improvements for Flink 1.4.1. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.4.2.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.4.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.4.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.4.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6321&#39;&gt;FLINK-6321&lt;/a&gt;] -         RocksDB state backend Checkpointing is not working with KeyedCEP.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7756&#39;&gt;FLINK-7756&lt;/a&gt;] -         RocksDB state backend Checkpointing (Async and Incremental)  is not working with CEP.
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8423&#39;&gt;FLINK-8423&lt;/a&gt;] -         OperatorChain#pushToOperator catch block may fail with NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8451&#39;&gt;FLINK-8451&lt;/a&gt;] -         CaseClassSerializer is not backwards compatible in 1.4
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8520&#39;&gt;FLINK-8520&lt;/a&gt;] -         CassandraConnectorITCase.testCassandraTableSink unstable on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8621&#39;&gt;FLINK-8621&lt;/a&gt;] -         PrometheusReporterTest.endpointIsUnavailableAfterReporterIsClosed unstable on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8692&#39;&gt;FLINK-8692&lt;/a&gt;] -         Mistake in MyMapFunction code snippet
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8735&#39;&gt;FLINK-8735&lt;/a&gt;] -         Add savepoint migration ITCase that covers operator state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8741&#39;&gt;FLINK-8741&lt;/a&gt;] -         KafkaFetcher09/010/011 uses wrong user code classloader
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8772&#39;&gt;FLINK-8772&lt;/a&gt;] -         FlinkKafkaConsumerBase partitions discover missing a log parameter
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8791&#39;&gt;FLINK-8791&lt;/a&gt;] -         Fix documentation on how to link dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8798&#39;&gt;FLINK-8798&lt;/a&gt;] -         Make commons-logging a parent-first pattern
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8849&#39;&gt;FLINK-8849&lt;/a&gt;] -         Wrong link from concepts/runtime to doc on chaining
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8202&#39;&gt;FLINK-8202&lt;/a&gt;] -         Update queryable section on configuration page
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8574&#39;&gt;FLINK-8574&lt;/a&gt;] -         Add timestamps to travis logging messages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8576&#39;&gt;FLINK-8576&lt;/a&gt;] -         Log message for QueryableState loading failure too verbose
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8652&#39;&gt;FLINK-8652&lt;/a&gt;] -         Reduce log level of QueryableStateClient.getKvState() to DEBUG
&lt;/li&gt;
&lt;/ul&gt;
            
&lt;h2&gt;        Task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8308&#39;&gt;FLINK-8308&lt;/a&gt;] -         Update yajl-ruby dependency to 1.3.1 or higher
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 08 Mar 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/03/08/release-1.4.2.html</link>
<guid isPermaLink="true">/news/2018/03/08/release-1.4.2.html</guid>
</item>

<item>
<title>An Overview of End-to-End Exactly-Once Processing in Apache Flink (with Apache Kafka, too!)</title>
<description>*This post is an adaptation of [Piotr Nowojski&#39;s presentation from Flink Forward Berlin 2017](https://berlin.flink-forward.org/kb_sessions/hit-me-baby-just-one-time-building-end-to-end-exactly-once-applications-with-flink/). You can find the slides and a recording of the presentation on the Flink Forward Berlin website.*

Apache Flink 1.4.0, released in December 2017, introduced a significant milestone for stream processing with Flink: a new feature called `TwoPhaseCommitSinkFunction` ([relevant Jira here](https://issues.apache.org/jira/browse/FLINK-7210)) that extracts the common logic of the two-phase commit protocol and makes it possible to build end-to-end exactly-once applications with Flink and a selection of data sources and sinks, including Apache Kafka versions 0.11 and beyond. It provides a layer of abstraction and requires a user to implement only a handful of methods to achieve end-to-end exactly-once semantics. 

If that&#39;s all you need to hear, let us point you [to the relevant place in the Flink documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.4/api/java/org/apache/flink/streaming/api/functions/sink/TwoPhaseCommitSinkFunction.html), where you can read about how to put `TwoPhaseCommitSinkFunction` to use. 

But if you&#39;d like to learn more, in this post, we&#39;ll share an in-depth overview of the new feature and what is happening behind the scenes in Flink. 

Throughout the rest of this post, we&#39;ll: 

* Describe the role of Flink&#39;s checkpoints for guaranteeing exactly-once results within a Flink application.
* Show how Flink interacts with data sources and data sinks via the two-phase commit protocol to deliver _end-to-end_ exactly-once guarantees.
* Walk through a simple example on how to use `TwoPhaseCommitSinkFunction` to implement an exactly-once file sink.

## Exactly-once Semantics Within an Apache Flink Application

When we say &quot;exactly-once semantics&quot;, what we mean is that each incoming event affects the final results exactly once. Even in case of a machine or software failure, there&#39;s no duplicate data and no data that goes unprocessed. 

Flink has long provided exactly-once semantics _within_ a Flink application. Over the past few years, we&#39;ve [written in depth about Flink&#39;s checkpointing](https://data-artisans.com/blog/high-throughput-low-latency-and-exactly-once-stream-processing-with-apache-flink), which is at the core of Flink&#39;s ability to provide exactly-once semantics. The Flink documentation also [provides a thorough overview of the feature](https://ci.apache.org/projects/flink/flink-docs-release-1.4/ops/state/checkpoints.html).

Before we continue, here&#39;s a quick summary of the checkpointing algorithm because understanding checkpoints is necessary for understanding this broader topic. 

A checkpoint in Flink is a consistent snapshot of: 

1. The current state of an application 
2. The position in an input stream 

Flink generates checkpoints on a regular, configurable interval and then writes the checkpoint to a persistent storage system, such as S3 or HDFS. Writing the checkpoint data to the persistent storage happens asynchronously, which means that a Flink application continues to process data during the checkpointing process. 

In the event of a machine or software failure and upon restart, a Flink application resumes processing from the most recent successfully-completed checkpoint; Flink restores application state and rolls back to the correct position in the input stream from a checkpoint before processing starts again. This means that Flink computes results as though the failure never occurred. 

Before Flink 1.4.0, exactly-once semantics were limited to the scope of _a Flink application only_ and did not extend to most of the external systems to which Flink sends data after processing. 

But Flink applications operate in conjunction with a wide range of data sinks, and developers should be able to maintain exactly-once semantics beyond the context of one component.

To provide _end-to-end exactly-once_ semantics--that is, semantics that also apply to the external systems that Flink writes to in addition to the state of the Flink application--these external systems must provide a means to commit or roll back writes that coordinate with Flink&#39;s checkpoints. 

One common approach for coordinating commits and rollbacks in a distributed system is the [two-phase commit protocol](https://en.wikipedia.org/wiki/Two-phase_commit_protocol). In the next section, we&#39;ll go behind the scenes and discuss how Flink&#39;s `TwoPhaseCommitSinkFunction `utilizes the two-phase commit protocol to provide end-to-end exactly-once semantics.

## End-to-end Exactly Once Applications with Apache Flink

We&#39;ll walk through the two-phase commit protocol and how it enables end-to-end exactly-once semantics in a sample Flink application that reads from and writes to Kafka. Kafka is a popular messaging system to use along with Flink, and Kafka recently added support for transactions with its 0.11 release. [This means that Flink now has the necessary mechanism to provide end-to-end exactly-once semantics](https://ci.apache.org/projects/flink/flink-docs-release-1.4/dev/connectors/kafka.html#kafka-011) in applications when receiving data from and writing data to Kafka. 

Flink&#39;s support for end-to-end exactly-once semantics is not limited to Kafka and you can use it with any source / sink that provides the necessary coordination mechanism. For example, [Pravega](http://pravega.io/), an open-source streaming storage system from Dell/EMC, also supports end-to-end exactly-once semantics with Flink via the `TwoPhaseCommitSinkFunction`.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/eo-post-graphic-1.png&quot; width=&quot;600px&quot; alt=&quot;A sample Flink application&quot;/&gt;
&lt;/center&gt;

In the sample Flink application that we&#39;ll discuss today, we have: 

* A data source that reads from Kafka (in Flink, a [KafkaConsumer](https://ci.apache.org/projects/flink/flink-docs-release-1.4/dev/connectors/kafka.html#kafka-consumer))
* A windowed aggregation 
* A data sink that writes data back to Kafka (in Flink, a [KafkaProducer](https://ci.apache.org/projects/flink/flink-docs-release-1.4/dev/connectors/kafka.html#kafka-producer))

For the data sink to provide exactly-once guarantees, it must write all data to Kafka within the scope of a transaction. A commit bundles all writes between two checkpoints. 

This ensures that writes are rolled back in case of a failure. 

However, in a distributed system with multiple, concurrently-running sink tasks, a simple commit or rollback is not sufficient, because all of the components must &quot;agree&quot; together on committing or rolling back to ensure a consistent result. Flink uses the two-phase commit protocol and its pre-commit phase to address this challenge. 

The starting of a checkpoint represents the &quot;pre-commit&quot; phase of our two-phase commit protocol. When a checkpoint starts, the Flink JobManager injects a checkpoint barrier (which separates the records in the data stream into the set that goes into the current checkpoint vs. the set that goes into the next checkpoint) into the data stream. 

The barrier is passed from operator to operator. For every operator, it triggers the operator&#39;s state backend to take a snapshot of its state. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/eo-post-graphic-2.png&quot; width=&quot;600px&quot; alt=&quot;A sample Flink application - precommit&quot;/&gt;
&lt;/center&gt;

The data source stores its Kafka offsets, and after completing this, it passes the checkpoint barrier to the next operator. 

This approach works if an operator has internal state _only_. _Internal state_ is everything that is stored and managed by Flink&#39;s state backends - for example, the windowed sums in the second operator. When a process has only internal state, there is no need to perform any additional action during pre-commit aside from updating the data in the state backends before it is checkpointed. Flink takes care of correctly committing those writes in case of checkpoint success or aborting them in case of failure. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/eo-post-graphic-3.png&quot; width=&quot;600px&quot; alt=&quot;A sample Flink application - precommit without external state&quot;/&gt;
&lt;/center&gt;

However, when a process has _external_ state, this state must be handled a bit differently. External state usually comes in the form of writes to an external system such as Kafka. In that case, to provide exactly-once guarantees, the external system must provide support for transactions that integrates with a two-phase commit protocol.

We know that the data sink in our example has such external state because it&#39;s writing data to Kafka. In this case, in the pre-commit phase, the data sink must pre-commit its external transaction in addition to writing its state to the state backend.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/eo-post-graphic-4.png&quot; width=&quot;600px&quot; alt=&quot;A sample Flink application - precommit with external state&quot;/&gt;
&lt;/center&gt;

The pre-commit phase finishes when the checkpoint barrier passes through all of the operators and the triggered snapshot callbacks complete. At this point the checkpoint completed successfully and consists of the state of the entire application, including pre-committed external state. In case of a failure, we would re-initialize the application from this checkpoint.

The next step is to notify all operators that the checkpoint has succeeded. This is the commit phase of the two-phase commit protocol and the JobManager issues checkpoint-completed callbacks for every operator in the application. The data source and window operator have no external state, and so in the commit phase, these operators don&#39;t have to take any action. The data sink does have external state, though, and commits the transaction with the external writes.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/eo-post-graphic-5.png&quot; width=&quot;600px&quot; alt=&quot;A sample Flink application - commit external state&quot;/&gt;
&lt;/center&gt;

So let&#39;s put all of these different pieces together:

* Once all of the operators complete their pre-commit, they issue a commit.
* If at least one pre-commit fails, all others are aborted, and we roll back to the previous successfully-completed checkpoint.
* After a successful pre-commit, the commit _must_ be guaranteed to eventually succeed -- both our operators and our external system need to make this guarantee. If a commit fails (for example, due to an intermittent network issue), the entire Flink application fails, restarts according to the user&#39;s restart strategy, and there is another commit attempt. This process is critical because if the commit does not eventually succeed, data loss occurs.

Therefore, we can be sure that all operators agree on the final outcome of the checkpoint: all operators agree that the data is either committed or that the commit is aborted and rolled back. 

## Implementing the Two-Phase Commit Operator in Flink

All the logic required to put a two-phase commit protocol together can be a little bit complicated and that&#39;s why Flink extracts the common logic of the two-phase commit protocol into the abstract `TwoPhaseCommitSinkFunction` class`. `

Let&#39;s discuss how to extend a `TwoPhaseCommitSinkFunction` on a simple file-based example. We need to implement only four methods and present their implementations for an exactly-once file sink:

1.  `beginTransaction - `to begin the transaction, we create a temporary file in a temporary directory on our destination file system. Subsequently, we can write data to this file as we process it.
1.  `preCommit - `on pre-commit, we flush the file, close it, and never write to it again. We&#39;ll also start a new transaction for any subsequent writes that belong to the next checkpoint. 
1.  `commit - `on commit, we atomically move the pre-committed file to the actual destination directory. Please note that this increases the latency in the visibility of the output data.
1.  `abort - `on abort, we delete the temporary file.

As we know, if there&#39;s any failure, Flink restores the state of the application to the latest successful checkpoint. One potential catch is in a rare case when the failure occurs after a successful pre-commit but before notification of that fact (a commit) reaches our operator. In that case, Flink restores our operator to the state that has already been pre-committed but not yet committed. 

We must save enough information about pre-committed transactions in checkpointed state to be able to either `abort` or `commit` transactions after a restart. In our example, this would be the path to the temporary file and target directory.

The `TwoPhaseCommitSinkFunction` takes this scenario into account, and it always issues a preemptive commit when restoring state from a checkpoint. It is our responsibility to implement a commit in an idempotent way. Generally, this shouldn&#39;t be an issue. In our example, we can recognize such a situation: the temporary file is not in the temporary directory, but has already been moved to the target directory.

There are a handful of other edge cases that `TwoPhaseCommitSinkFunction` takes into account, too. [Learn more in the Flink documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.4/api/java/org/apache/flink/streaming/api/functions/sink/TwoPhaseCommitSinkFunction.html). 

## Wrapping Up

If you&#39;ve made it this far, thanks for staying with us through a detailed post. Here are some key points that we covered: 

*   Flink&#39;s checkpointing system serves as Flink&#39;s basis for supporting a two-phase commit protocol and providing end-to-end exactly-once semantics.
*   An advantage of this approach is that Flink does not materialize data in transit the way that some other systems do--there&#39;s no need to write every stage of the computation to disk as is the case is most batch processing. 
*   Flink&#39;s new `TwoPhaseCommitSinkFunction` extracts the common logic of the two-phase commit protocol and makes it possible to build end-to-end exactly-once applications with Flink and external systems that support transactions
*   Starting with [Flink 1.4.0](https://data-artisans.com/blog/announcing-the-apache-flink-1-4-0-release), both the Pravega and Kafka 0.11 producers provide exactly-once semantics; Kafka introduced transactions for the first time in Kafka 0.11, which is what made the Kafka exactly-once producer possible in Flink. 
*   The [Kafka 0.11 producer](https://ci.apache.org/projects/flink/flink-docs-release-1.4/dev/connectors/kafka.html#kafka-011) is implemented on top of the `TwoPhaseCommitSinkFunction`, and it offers very low overhead compared to the at-least-once Kafka producer. 

We&#39;re very excited about what this new feature enables, and we look forward to being able to support additional producers with the `TwoPhaseCommitSinkFunction` in the future. 

*This post &lt;a href=&quot;https://data-artisans.com/blog/end-to-end-exactly-once-processing-apache-flink-apache-kafka&quot; target=&quot;_blank&quot;&gt; first appeared on the data Artisans blog &lt;/a&gt;and was contributed to Apache Flink and the Flink blog by the original authors Piotr Nowojski and Mike Winters.*
&lt;link rel=&quot;canonical&quot; href=&quot;https://data-artisans.com/blog/end-to-end-exactly-once-processing-apache-flink-apache-kafka&quot;&gt;
</description>
<pubDate>Thu, 01 Mar 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html</link>
<guid isPermaLink="true">/features/2018/03/01/end-to-end-exactly-once-apache-flink.html</guid>
</item>

<item>
<title>Apache Flink 1.4.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.4 series.

This release includes more than 60 fixes and minor improvements for Flink 1.4.0. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.4.1.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.4.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.4.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.11&lt;/artifactId&gt;
  &lt;version&gt;1.4.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6321&#39;&gt;FLINK-6321&lt;/a&gt;] -         RocksDB state backend Checkpointing is not working with KeyedCEP.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7499&#39;&gt;FLINK-7499&lt;/a&gt;] -         double buffer release in SpillableSubpartitionView
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7756&#39;&gt;FLINK-7756&lt;/a&gt;] -         RocksDB state backend Checkpointing (Async and Incremental)  is not working with CEP.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7760&#39;&gt;FLINK-7760&lt;/a&gt;] -         Restore failing from external checkpointing metadata.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8323&#39;&gt;FLINK-8323&lt;/a&gt;] -         Fix Mod scala function bug
&lt;/li&gt;
&lt;/ul&gt;
        
&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5506&#39;&gt;FLINK-5506&lt;/a&gt;] -         Java 8 - CommunityDetection.java:158 - java.lang.NullPointerException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6951&#39;&gt;FLINK-6951&lt;/a&gt;] -         Incompatible versions of httpcomponents jars for Flink kinesis connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7949&#39;&gt;FLINK-7949&lt;/a&gt;] -         AsyncWaitOperator is not restarting when queue is full
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8145&#39;&gt;FLINK-8145&lt;/a&gt;] -         IOManagerAsync not properly shut down in various tests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8200&#39;&gt;FLINK-8200&lt;/a&gt;] -         RocksDBAsyncSnapshotTest should use temp fold instead of fold with fixed name
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8226&#39;&gt;FLINK-8226&lt;/a&gt;] -         Dangling reference generated after NFA clean up timed out SharedBufferEntry
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8230&#39;&gt;FLINK-8230&lt;/a&gt;] -         NPE in OrcRowInputFormat on nested structs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8235&#39;&gt;FLINK-8235&lt;/a&gt;] -         Cannot run spotbugs for single module
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8242&#39;&gt;FLINK-8242&lt;/a&gt;] -         ClassCastException in OrcTableSource.toOrcPredicate
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8248&#39;&gt;FLINK-8248&lt;/a&gt;] -         RocksDB state backend Checkpointing is not working with KeyedCEP in 1.4
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8249&#39;&gt;FLINK-8249&lt;/a&gt;] -         Kinesis Producer didnt configure region
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8261&#39;&gt;FLINK-8261&lt;/a&gt;] -         Typos in the shading exclusion for jsr305 in the quickstarts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8263&#39;&gt;FLINK-8263&lt;/a&gt;] -         Wrong packaging of flink-core in scala quickstarty
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8265&#39;&gt;FLINK-8265&lt;/a&gt;] -         Missing jackson dependency for flink-mesos
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8270&#39;&gt;FLINK-8270&lt;/a&gt;] -         TaskManagers do not use correct local path for shipped Keytab files in Yarn deployment modes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8275&#39;&gt;FLINK-8275&lt;/a&gt;] -         Flink YARN deployment with Kerberos enabled not working 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8278&#39;&gt;FLINK-8278&lt;/a&gt;] -         Scala examples in Metric documentation do not compile
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8283&#39;&gt;FLINK-8283&lt;/a&gt;] -         FlinkKafkaConsumerBase failing on Travis with no output in 10min
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8295&#39;&gt;FLINK-8295&lt;/a&gt;] -         Netty shading does not work properly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8306&#39;&gt;FLINK-8306&lt;/a&gt;] -         FlinkKafkaConsumerBaseTest has invalid mocks on final methods
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8318&#39;&gt;FLINK-8318&lt;/a&gt;] -         Conflict jackson library with ElasticSearch connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8325&#39;&gt;FLINK-8325&lt;/a&gt;] -         Add COUNT AGG support constant parameter, i.e. COUNT(*), COUNT(1) 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8352&#39;&gt;FLINK-8352&lt;/a&gt;] -         Flink UI Reports No Error on Job Submission Failures
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8355&#39;&gt;FLINK-8355&lt;/a&gt;] -         DataSet Should not union a NULL row for AGG without GROUP BY clause.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8371&#39;&gt;FLINK-8371&lt;/a&gt;] -         Buffers are not recycled in a non-spilled SpillableSubpartition upon release
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8398&#39;&gt;FLINK-8398&lt;/a&gt;] -         Stabilize flaky KinesisDataFetcherTests
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8406&#39;&gt;FLINK-8406&lt;/a&gt;] -         BucketingSink does not detect hadoop file systems
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8409&#39;&gt;FLINK-8409&lt;/a&gt;] -         Race condition in KafkaConsumerThread leads to potential NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8419&#39;&gt;FLINK-8419&lt;/a&gt;] -         Kafka consumer&amp;#39;s offset metrics are not registered for dynamically discovered partitions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8421&#39;&gt;FLINK-8421&lt;/a&gt;] -         HeapInternalTimerService should reconfigure compatible key / namespace serializers on restore
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8433&#39;&gt;FLINK-8433&lt;/a&gt;] -         Update code example for &amp;quot;Managed Operator State&amp;quot; documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8461&#39;&gt;FLINK-8461&lt;/a&gt;] -         Wrong logger configurations for shaded Netty
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8466&#39;&gt;FLINK-8466&lt;/a&gt;] -         ErrorInfo needs to hold Exception as SerializedThrowable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8484&#39;&gt;FLINK-8484&lt;/a&gt;] -         Kinesis consumer re-reads closed shards on job restart
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8485&#39;&gt;FLINK-8485&lt;/a&gt;] -         Running Flink inside Intellij no longer works after upgrading from 1.3.2 to 1.4.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8489&#39;&gt;FLINK-8489&lt;/a&gt;] -         Data is not emitted by second ElasticSearch connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8496&#39;&gt;FLINK-8496&lt;/a&gt;] -         WebUI does not display TM MemorySegment metrics
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8499&#39;&gt;FLINK-8499&lt;/a&gt;] -         Kryo must not be child-first loaded
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8522&#39;&gt;FLINK-8522&lt;/a&gt;] -         DefaultOperatorStateBackend writes data in checkpoint that is never read.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8559&#39;&gt;FLINK-8559&lt;/a&gt;] -         Exceptions in RocksDBIncrementalSnapshotOperation#takeSnapshot cause job to get stuck
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8561&#39;&gt;FLINK-8561&lt;/a&gt;] -         SharedBuffer line 573 uses == to compare BufferEntries instead of .equals.
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8079&#39;&gt;FLINK-8079&lt;/a&gt;] -         Skip remaining E2E tests if one failed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8202&#39;&gt;FLINK-8202&lt;/a&gt;] -         Update queryable section on configuration page
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8243&#39;&gt;FLINK-8243&lt;/a&gt;] -         OrcTableSource should recursively read all files in nested directories of the input path.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8260&#39;&gt;FLINK-8260&lt;/a&gt;] -         Document API of Kafka 0.11 Producer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8264&#39;&gt;FLINK-8264&lt;/a&gt;] -         Add Scala to the parent-first loading patterns
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8271&#39;&gt;FLINK-8271&lt;/a&gt;] -         upgrade from deprecated classes to AmazonKinesis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8287&#39;&gt;FLINK-8287&lt;/a&gt;] -         Flink Kafka Producer docs should clearly state what partitioner is used by default
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8296&#39;&gt;FLINK-8296&lt;/a&gt;] -         Rework FlinkKafkaConsumerBestTest to not use Java reflection for dependency injection
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8346&#39;&gt;FLINK-8346&lt;/a&gt;] -         add S3 signature v4 workaround to docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8362&#39;&gt;FLINK-8362&lt;/a&gt;] -         Shade Elasticsearch dependencies away
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8455&#39;&gt;FLINK-8455&lt;/a&gt;] -         Add Hadoop to the parent-first loading patterns
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8473&#39;&gt;FLINK-8473&lt;/a&gt;] -         JarListHandler may fail with NPE if directory is deleted
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8571&#39;&gt;FLINK-8571&lt;/a&gt;] -         Provide an enhanced KeyedStream implementation to use ForwardPartitioner
&lt;/li&gt;
&lt;/ul&gt;
    
&lt;h2&gt;        Test
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-8472&#39;&gt;FLINK-8472&lt;/a&gt;] -         Extend migration tests for Flink 1.4
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 15 Feb 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2018/02/15/release-1.4.1.html</link>
<guid isPermaLink="true">/news/2018/02/15/release-1.4.1.html</guid>
</item>

<item>
<title>Managing Large State in Apache Flink: An Intro to Incremental Checkpointing</title>
<description>Apache Flink was purpose-built for _stateful_ stream processing. However, what is state in a stream processing application? I defined state and stateful stream processing in a [previous blog post](http://flink.apache.org/features/2017/07/04/flink-rescalable-state.html), and in case you need a refresher, _state is defined as memory in an application&#39;s operators that stores information about previously-seen events that you can use to influence the processing of future events_.

State is a fundamental, enabling concept in stream processing required for a majority of complex use cases. Some examples highlighted in the [Flink documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/state.html):

-   When an application searches for certain event patterns, the state stores the sequence of events encountered so far.
-   When aggregating events per minute, the state holds the pending aggregates.
-   When training a machine learning model over a stream of data points, the state holds the current version of the model parameters.

However, stateful stream processing is only useful in production environments if the state is fault tolerant. &quot;Fault tolerance&quot; means that even if there&#39;s a software or machine failure, the computed end-result is accurate, with no data loss or double-counting of events.

Flink&#39;s fault tolerance has always been a powerful and popular feature, minimizing the impact of software or machine failure on your business and making it possible to guarantee exactly-once results from a Flink application.

Core to this is [checkpointing](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/checkpointing.html), which is the mechanism Flink uses to make application state fault tolerant. A checkpoint in Flink is a global, asynchronous snapshot of application state that&#39;s taken on a regular interval and sent to durable storage (usually, a distributed file system). In the event of a failure, Flink restarts an application using the most recently completed checkpoint as a starting point. Some Apache Flink users run applications with gigabytes or even terabytes of application state. These users reported that with such large state, creating a checkpoint was often a slow and resource intensive operation, which is why in Flink 1.3 we introduced &#39;incremental checkpointing.&#39;

Before incremental checkpointing, every single Flink checkpoint consisted of the full state of an application. We created the incremental checkpointing feature after we noticed that writing the full state for every checkpoint was often unnecessary, as the state changes from one checkpoint to the next were rarely that large. Incremental checkpointing instead maintains the differences (or &#39;delta&#39;) between each checkpoint and stores only the differences between the last checkpoint and the current state.

Incremental checkpoints can provide a significant performance improvement for jobs with a very large state. Early testing of the feature by a production user with terabytes of state shows a drop in checkpoint time from more than 3 minutes down to 30 seconds after implementing incremental checkpoints. This is because the checkpoint doesn&#39;t need to transfer the full state to durable storage on each checkpoint.

### How to Start

Currently, you can only use incremental checkpointing with a RocksDB state back-end, and Flink uses RocksDB&#39;s internal backup mechanism to consolidate checkpoint data over time. As a result, the incremental checkpoint history in Flink does not grow indefinitely, and Flink eventually consumes and prunes old checkpoints automatically.

To enable incremental checkpointing in your application, I recommend you read the [the Apache Flink documentation on checkpointing](https://ci.apache.org/projects/flink/flink-docs-release-1.4/ops/state/large_state_tuning.html#tuning-rocksdb) for full details, but in summary, you enable checkpointing as normal, but enable incremental checkpointing in the constructor by setting the second parameter to `true`.

#### Java Example

```java
StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
env.setStateBackend(new RocksDBStateBackend(filebackend, true));
```

#### Scala Example

```scala
val env = StreamExecutionEnvironment.getExecutionEnvironment()
env.setStateBackend(new RocksDBStateBackend(filebackend, true))
```

By default, Flink retains 1 completed checkpoint, so if you need a higher number, [you can configure it with the following flag](https://ci.apache.org/projects/flink/flink-docs-master/dev/stream/state/checkpointing.html#related-config-options):

```java
state.checkpoints.num-retained
```

### How it Works

Flink&#39;s incremental checkpointing uses [RocksDB checkpoints](https://github.com/facebook/rocksdb/wiki/Checkpoints) as a foundation. RocksDB is a key-value store based on &#39;[log-structured-merge](https://en.wikipedia.org/wiki/Log-structured_merge-tree)&#39; (LSM) trees that collects all changes in a mutable (changeable) in-memory buffer called a &#39;memtable&#39;. Any updates to the same key in the memtable replace previous values, and once the memtable is full, RocksDB writes it to disk with all entries sorted by their key and with light compression applied. Once RocksDB writes the memtable to disk it is immutable (unchangeable) and is now called a &#39;sorted-string-table&#39; (sstable).

A &#39;compaction&#39; background task merges sstables to consolidate potential duplicates for each key, and over time RocksDB deletes the original sstables, with the merged sstable containing all information from across all the other sstables.

On top of this, Flink tracks which sstable files RocksDB has created and deleted since the previous checkpoint, and as the sstables are immutable, Flink uses this to figure out the state changes. To do this, Flink triggers a flush in RocksDB, forcing all memtables into sstables on disk, and hard-linked in a local temporary directory. This process is synchronous to the processing pipeline, and Flink performs all further steps asynchronously and does not block processing.

Then Flink copies all new sstables to stable storage (e.g., HDFS, S3) to reference in the new checkpoint. Flink doesn&#39;t copy all sstables that already existed in the previous checkpoint to stable storage but re-reference them. Any new checkpoints will no longer reference deleted files as deleted sstables in RocksDB are always the result of compaction, and it eventually replaces old tables with an sstable that is the result of a merge. This how in Flink&#39;s incremental checkpoints can prune the checkpoint history.

For tracking changes between checkpoints, the uploading of consolidated tables is redundant work. Flink performs the process incrementally, and typically adds only a small overhead, so we consider this worthwhile because it allows Flink to keep a shorter history of checkpoints to consider in a recovery.

#### An Example

![Example setup]({{ site.baseurl }}/img/blog/incremental_cp_impl_example.svg)
_Example setup_

Take an example with a subtask of one operator that has a keyed state, and the number of retained checkpoints set at **2**. The columns in the figure above show the state of the local RocksDB instance for each checkpoint, the files it references, and the counts in the shared state registry after the checkpoint completes.

For checkpoint &#39;CP 1&#39;, the local RocksDB directory contains two sstable files, it considers these new and uploads them to stable storage using directory names that match the checkpoint name. When the checkpoint completes, Flink creates the two entries in the shared state registry and sets their counts to &#39;1&#39;. The key in the shared state registry is a composite of an operator, subtask, and the original sstable file name. The registry also keeps a mapping from the key to the file path in stable storage.

For checkpoint &#39;CP 2&#39;, RocksDB has created two new sstable files, and the two older ones still exist. For checkpoint &#39;CP 2&#39;, Flink adds the two new files to stable storage and can reference the previous two files. When the checkpoint completes, Flink increases the counts for all referenced files by 1.

For checkpoint &#39;CP 3&#39;, RocksDB&#39;s compaction has merged `sstable-(1)`, `sstable-(2)`, and `sstable-(3)` into `sstable-(1,2,3)` and deleted the original files. This merged file contains the same information as the source files, with all duplicate entries eliminated. In addition to this merged file, `sstable-(4)` still exists and there is now a new `sstable-(5)` file. Flink adds the new `sstable-(1,2,3)` and `sstable-(5)` files to stable storage, `sstable-(4)` is re-referenced from checkpoint &#39;CP 2&#39; and increases the counts for referenced files by 1. The older &#39;CP 1&#39; checkpoint is now deleted as the number of retained checkpoints (2) has been reached. As part of this deletion, Flink decreases the counts for all files referenced &#39;CP 1&#39;, (`sstable-(1)` and `sstable-(2)`), by 1.

For checkpoint &#39;CP-4&#39;, RocksDB has merged `sstable-(4)`, `sstable-(5)`, and a new `sstable-(6)` into `sstable-(4,5,6)`. Flink adds this new table to stable storage and references it together with `sstable-(1,2,3)`, it increases the counts for `sstable-(1,2,3)` and `sstable-(4,5,6)` by 1 and then deletes &#39;CP-2&#39; as the number of retained checkpoints has been reached. As the counts for `sstable-(1)`, `sstable-(2)`, and `sstable-(3)` have now dropped to 0, and Flink deletes them from stable storage.

### Race Conditions and Concurrent Checkpoints

As Flink can execute multiple checkpoints in parallel, sometimes new checkpoints start before confirming previous checkpoints as completed. Because of this, you should consider which the previous checkpoint to use as a basis for a new incremental checkpoint. Flink only references state from a checkpoint confirmed by the checkpoint coordinator so that it doesn&#39;t unintentionally reference a deleted shared file.

### Restoring Checkpoints and Performance Considerations

If you enable incremental checkpointing, there are no further configuration steps needed to recover your state in case of failure. If a failure occurs, Flink&#39;s `JobManager` tells all tasks to restore from the last completed checkpoint, be it a full or incremental checkpoint. Each `TaskManager` then downloads their share of the state from the checkpoint on the distributed file system.

Though the feature can lead to a substantial improvement in checkpoint time for users with a large state, there are trade-offs to consider with incremental checkpointing. Overall, the process reduces the checkpointing time during normal operations but can lead to a longer recovery time depending on the size of your state. If the cluster failure is particularly severe and the Flink `TaskManager`s have to read from multiple checkpoints, recovery can be a slower operation than when using non-incremental checkpointing. You can also no longer delete old checkpoints as newer checkpoints need them, and the history of differences between checkpoints can grow indefinitely over time. You need to plan for larger distributed storage to maintain the checkpoints and the network overhead to read from it.

There are some strategies for improving the convenience/performance trade-off, and I recommend you read [the Flink documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.4/ops/state/checkpoints.html#basics-of-incremental-checkpoints) for more details.

_This post &lt;a href=&quot;https://data-artisans.com/blog/managing-large-state-apache-flink-incremental-checkpointing-overview&quot; target=&quot;_blank&quot;&gt; originally appeared on the data Artisans blog &lt;/a&gt;and was contributed to the Flink blog by Stefan Richter and Chris Ward._
&lt;link rel=&quot;canonical&quot; href=&quot;https://data-artisans.com/blog/managing-large-state-apache-flink-incremental-checkpointing-overview&quot;&gt;


</description>
<pubDate>Tue, 30 Jan 2018 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/features/2018/01/30/incremental-checkpointing.html</link>
<guid isPermaLink="true">/features/2018/01/30/incremental-checkpointing.html</guid>
</item>

<item>
<title>Apache Flink in 2017: Year in Review</title>
<description>2017 was another exciting year for the Apache Flink® community, with 3 major version releases ([Flink 1.2.0 in February](http://flink.apache.org/news/2017/02/06/release-1.2.0.html), [Flink 1.3.0 in June](http://flink.apache.org/news/2017/06/01/release-1.3.0.html), and [Flink 1.4.0 in December](http://flink.apache.org/news/2017/12/12/release-1.4.0.html)) and the first-ever [Flink Forward in San Francisco](https://sf-2017.flink-forward.org/), giving Flink community members in another corner of the globe an opportunity to connect. Users shared details about their innovative production deployments, redefining what is possible with a modern stream processing framework like Flink.

In this post, we&#39;ll look back on the project&#39;s progress over the course of 2017, and we&#39;ll also preview what 2018 has in store.

{%toc%}

## Community Growth

### Github

First, here&#39;s a summary of community statistics from [GitHub](https://github.com/apache/flink). At the time of writing:

-   **Contributors** have increased from 258 in December 2016 to 352 in December 2017 (up **36%**)
-   **Stars** have increased from 1830 in December 2016 to 3036 in December 2017 (up **65%**)
-   **Forks** have increased from 1255 in December 2016 to 2070 in December 2017 (up **65%**)

The community also welcomed **10 new committers in 2017**: Kostas Kloudas, Jark Wu, Stefan Richter, Kurt Young, Theodore Vasiloudis, Xiaogang Shi, Dawid Wysakowicz, Shaoxuan Wang, Jincheng Sun and Haohui Mai.

We also welcomed **3 new members to the [project management committee (PMC)](http://www.apache.org/foundation/governance/pmcs.html)**: Greg Hogan, Tzu-Li (Gordon) Tai and Chesnay Schepler.

![Apache Flink GitHub Stats]({{ site.baseurl }}/img/blog/github-stats-2017.png)

Next, let&#39;s take a look at a few other project stats, starting with number of commits. If we run:

```bash
git log --pretty=oneline --after=12/31/2016 | wc -l
```

Inside the Flink repository, we&#39;ll see a total of **2316** commits so far in 2017, bringing the all-time total commits to **12,532**.

Now, let&#39;s go a bit deeper, here are instructions to take a look at this data yourself.

Download and install gitstats from the [project homepage](http://gitstats.sourceforge.net/), then clone the Apache Flink git repository:

```bash
git clone git@github.com:apache/flink.git
```

Generate the statistics

```bash
gitstats flink/ flink-stats/
```

View all the statistics as an HTML page using your default browser:

```bash
open flink-stats/index.html
```

Flink surpassed 1 million lines of code in 2016, and that trend continued in 2017 with the code base now clocking in at **1,257,949** lines.

![Flink Total Lines of Code]({{ site.baseurl }}/img/blog/flink-lines-of-code-2017.png)

Monday remains the day of the week with the most commits over the project&#39;s history, but Wednesday is catching up:

![Flink Commits by Day of Week]({{ site.baseurl }}/img/blog/flink-dow-2017.png)

5 pm remains the preferred commit time, closely followed by 4 pm:

![Flink Commits by Hour of Day]({{ site.baseurl }}/img/blog/flink-hod-2017.png)

### Meetups

[Apache Flink Meetup membership](https://www.meetup.com/topics/apache-flink/) grew by **20%** this year to a total of **19,767** members at **39** meetups listing Flink as a topic. With meetups on five continents, the Flink community is proud to be truly global.

![Apache Flink Meetup Map]({{ site.baseurl }}/img/blog/flink-meetups-dec2017.png)

## Flink Forward 2017

2017 was the first year we ran a Flink Forward conference in both [Berlin](https://berlin-2017.flink-forward.org) (September 11-13) and [San Francisco](https://sf-2017.flink-forward.org) (April 10-11), and over 350 members of our community attended each event for speaker sessions, training, and discussion about Flink.

[Slides](https://www.slideshare.net/FlinkForward/presentations) and [videos](https://www.youtube.com/channel/UCY8_lgiZLZErZPF47a2hXMA) are available for all speaker sessions, and if you&#39;re interested in learning more about how organizations use Flink in production, we encourage you to browse and watch a couple.

For 2018, Flink Forward will be back in [September in Berlin](https://flink-forward.org/), and in [April in San Francisco](https://sf-2018.flink-forward.org/).

![Flink Forward Speakers]({{ site.baseurl }}/img/blog/speaker-logos-ff2017.png)

## Features and Ecosystem

### Flink Ecosystem Growth

Flink was added to a selection of distributions and integrations during 2017, making it easier for a wider user base to get started with Flink:

-   [Official Docker image](https://hub.docker.com/r/_/flink/)
-   [Official DC/OS and Mesos support](https://ci.apache.org/projects/flink/flink-docs-release-1.3/setup/mesos.html)
-   [A Flink connector](https://data-artisans.com/blog/dellemc-launches-open-source-pravega-complete-apache-flink-connector) for [Pravega](http://pravega.io), Dell/EMC&#39;s streaming storage system.
-   Uber announced AthenaX, a streaming SQL platform [powered by Apache Flink](https://data-artisans.com/blog/uber-introduces-open-source-athenax-streaming-sql-platform-apache-flink).
-   dataArtisans announced an early access program of a SaaS product based on Apache Flink, [dA Platform 2](https://data-artisans.com/blog/da-platform-2-stateful-stream-processing-with-apache-flink-made-easier).

### Feature Timeline in 2017

Just in time for the end of the year, our 1.4 release [read the full release announcement](http://flink.apache.org/news/2017/12/12/release-1.4.0.html) landed in mid-December culminating 5 months of work and the resolution of more than 900 issues. This is the fifth major release in the 1.x.y series.

Here&#39;s a selection of major features added to Flink over the course of 2017:

![Flink Release Timeline 2017]({{ site.baseurl }}/img/blog/flink-releases-2017.png)

If you take a look at [the resolved issues and enhancements for 2017 on Jira](https://issues.apache.org/jira/browse/FLINK-5016?jql=project%20%3D%20FLINK%20AND%20issuetype%20in%20(Bug%2C%20Improvement%2C%20%22New%20Feature%22)%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20resolved%20%3E%3D%202017-01-01%20AND%20resolved%20%3C%3D%202017-12-31%20ORDER%20BY%20resolved%20ASC) you can see that the community resolved over 1,831 issues and feature additions.

[Regarding roadmap commitments from 2016]({{site.baseurl}}/news/2016/12/19/2016-year-in-review.html#looking-ahead-to-2017), there is mixed news, with some items a part of current releases, others scheduled for upcoming releases and some that remain under discussion.

## Looking ahead to 2018

A good source of information about the Flink community&#39;s roadmap is the list of [Flink Improvement Proposals (FLIPs)](https://cwiki.apache.org/confluence/display/FLINK/Flink+Improvement+Proposals) in the project wiki. Below, we&#39;ll highlight a selection of FLIPs accepted by the community as well as some that are still under discussion.

Work is already underway on a number of these features, and some will be included in Flink 1.5 at the beginning of 2018.

-   **Improved BLOB storage architecture**, as described in [FLIP-19](https://cwiki.apache.org/confluence/display/FLINK/FLIP-19:+Improved+BLOB+storage+architecture) to consolidate API usage and improve concurrency.
-   **Integration of SQL and CEP**, as described in [FLIP-20](https://cwiki.apache.org/confluence/display/FLINK/FLIP-20:+Integration+of+SQL+and+CEP) to allow developers to  create complex event processing (CEP) patterns using SQL statements.
-   **Unified checkpoints and savepoints**, as described in [FLIP-10](https://cwiki.apache.org/confluence/display/FLINK/FLIP-10:+Unify+Checkpoints+and+Savepoints), to allow savepoints to be triggered automatically–important for program updates for the sake of error handling because savepoints allow the user to modify both the job and Flink version whereas checkpoints can only be recovered with the same job.
-   **An improved Flink deployment and process model**, as described in [FLIP-6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077), to allow for better integration with Flink and cluster managers and deployment technologies such as Mesos, Docker, and Kubernetes.
-   **Fine-grained recovery from task failures**, as described in [FLIP-1](https://cwiki.apache.org/confluence/display/FLINK/FLIP-1+:+Fine+Grained+Recovery+from+Task+Failures) to improve recovery efficiency and only re-execute failed tasks, reducing the amount of state that Flink needs to transfer on recovery.
- **An SQL Client**, as described in [FLIP-24](https://cwiki.apache.org/confluence/display/FLINK/FLIP-24+-+SQL+Client) to add a service and a client to execute SQL queries against batch and streaming tables.
- **Serving of machine learning models**, as described in [FLIP-23](https://cwiki.apache.org/confluence/display/FLINK/FLIP-23+-+Model+Serving) to add a library that allows users to apply offline-trained machine learning models to data streams.

If you&#39;re interested in getting involved with Flink, we encourage you to take a look at the FLIPs and to join the discussion via the [Flink mailing lists](http://flink.apache.org/community.html#mailing-lists).

Lastly, we&#39;d like to extend a sincere thank you to all the Flink community for making 2017 a great year!
</description>
<pubDate>Thu, 21 Dec 2017 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/12/21/2017-year-in-review.html</link>
<guid isPermaLink="true">/news/2017/12/21/2017-year-in-review.html</guid>
</item>

<item>
<title>Apache Flink 1.4.0 Release Announcement</title>
<description>The Apache Flink community is pleased to announce the 1.4.0 release. Over the past 5 months, the
Flink community has been working hard to resolve more than 900 issues. See the [complete changelog](https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12315522&amp;version=12340533)
for more detail.

This is the fifth major release in the 1.x.y series. It is API-compatible with the other 1.x.y
releases for APIs annotated with the @Public annotation.

We encourage everyone to download the release and check out the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.4/).

Feedback through the [Flink mailing lists](http://flink.apache.org/community.html#mailing-lists) is, as always, gladly encouraged!

You can find the binaries on the updated [Downloads](http://flink.apache.org/downloads.html) page on the Flink project site.

The release includes improvements to many different aspects of Flink, including:

 - The ability to build end-to-end exactly-once applications with Flink and popular data sources and sinks such as Apache Kafka.
 - A more developer-friendly dependency structure as well as Hadoop-free Flink for Flink users who do not have Hadoop dependencies.
 - Support for JOIN and for new sources and sinks in table API and SQL, expanding the range of logic that can be expressed with these APIs.

A summary of some of the features in the release is available below.

For more background on the Flink 1.4.0 release and the work planned for the Flink 1.5.0 release, please refer to [this blog post](http://flink.apache.org/news/2017/11/22/release-1.4-and-1.5-timeline.html) on the Apache Flink blog.

{% toc %}

## New Features and Improvements

### End-to-end Exactly Once Applications with Apache Flink and Apache Kafka and TwoPhaseCommitSinkFunction

Flink 1.4 includes a first version of an exactly-once producer for Apache Kafka 0.11. This producer
enables developers who build Flink applications with Kafka as a data source and sink to compute
exactly-once results not just within the Flink program, but truly “end-to-end” in the application.

The common pattern used for exactly-once applications in Kafka and in other sinks--the two-phase
commit algorithm--has been extracted in Flink 1.4.0 into a common class, the
TwoPhaseCommitSinkFunction ([FLINK-7210](https://issues.apache.org/jira/browse/FLINK-7210)). This
will make it easier for users to create their own exactly-once data sinks in the future.

### Table API and Streaming SQL Enhancements

Flink SQL now supports windowed joins based on processing time and event time
([FLINK-5725](https://issues.apache.org/jira/browse/FLINK-5725)). Users will be able to execute a
join between 2 streaming tables and compute windowed results according to these 2 different concepts
of time. The syntax and semantics in Flink are the same as standard SQL with JOIN and with Flink’s
streaming SQL more broadly.

Flink SQL also now supports “INSERT INTO SELECT” queries, which makes it possible to write results
from SQL directly into a data sink (an external system that receives data from a Flink application).
This improves operability and ease-of-use of Flink SQL.

The Table API now supports aggregations on streaming tables; previously, the only supported
operations on streaming tables were projection, selection, and union
([FLINK-4557](https://issues.apache.org/jira/browse/FLINK-4557)). This feature was initially discussed in Flink
Improvement Proposal 11: [FLIP-11](https://cwiki.apache.org/confluence/display/FLINK/FLIP-11%3A+Table+API+Stream+Aggregations).

The release also adds support for new table API and SQL sources and sinks, including a Kafka 0.11
source and JDBC sink.

Lastly, Flink SQL now uses Apache Calcite 1.14, which was just released in October 2017
([FLINK-7051](https://issues.apache.org/jira/browse/FLINK-7051)).

### A Significantly-Improved Dependency Structure and Reversed Class Loading

Flink 1.4.0 shades a number of dependences and subtle runtime conflicts, including:

 - ASM
 - Guava
 - Jackson
 - Netty
 - Apache Zookeeper

These changes improve Flink’s overall stability and removes friction when embedding Flink or calling
Flink &quot;library style&quot;.

The release also introduces default reversed (child-first) class loading for dynamically-loaded user
code, allowing for different dependencies than those included in the core framework.

For details on those changes please check out the relevant Jira issues:

 - [FLINK-7442](https://issues.apache.org/jira/browse/FLINK-7442)
 - [FLINK-6529](https://issues.apache.org/jira/browse/FLINK-6529)

### Hadoop-free Flink

Apache Flink users without any Apache Hadoop dependencies can now run Flink without Hadoop. Flink
programs that do not rely on Hadoop components can now be much smaller, a benefit particularly in a
container-based setup resulting in less network traffic and better performance.

This includes the addition of Flink’s own Amazon S3 filesystem implementations based on Hadoop&#39;s S3a
and Presto&#39;s S3 file system with properly shaded dependencies ([FLINK-5706](https://issues.apache.org/jira/browse/FLINK-5706)).

The details of these changes regarding Hadoop-free Flink are available in the Jira issue:
[FLINK-2268](https://issues.apache.org/jira/browse/FLINK-2268).

### Improvements to Flink Internals

Flink 1.4.0 introduces a new blob storage architecture that was first discussed in
[Flink Improvement Proposal 19](https://cwiki.apache.org/confluence/display/FLINK/FLIP-19%3A+Improved+BLOB+storage+architecture) ([FLINK-6916](https://issues.apache.org/jira/browse/FLINK-6916)).

This will enable easier integration with both the work being done in [Flink Improvement Proposal 6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077) in
the future and with other improvements in the 1.4.0 release, such as support for messages larger
than the maximum Akka Framesize ([FLINK-6046](https://issues.apache.org/jira/browse/FLINK-6046)).

The improvement also enables Flink to leverage distributed file systems in high availability
settings for optimized distribution of deployment data to TaskManagers.

### Improvements to the Queryable State Client

Flink’s [queryable state](https://ci.apache.org/projects/flink/flink-docs-release-1.4/dev/stream/state/queryable_state.html) makes it possible for users to access application state directly in Flink
before the state has been sent to an external database or key-value store.

Flink 1.4.0 introduces a range of improvements to the queryable state client, including a more
container-friendly architecture, a more user-friendly API that hides configuration parameters, and
the groundwork to be able to expose window state (the state of an in-flight window) in the future.

For details about the changes to queryable state please refer to the umbrella Jira issue:
[FLINK-5675](https://issues.apache.org/jira/browse/FLINK-5675).

### Metrics and Monitoring

Flink’s metrics system now also includes support for Prometheus, an increasingly-popular metrics and
reporting system within the Flink community ([FLINK-6221](https://issues.apache.org/jira/browse/FLINK-6221)).

And the Apache Kafka connector in Flink now exposes metrics for failed and successful offset commits
in the Kafka consumer callback ([FLINK-6998](https://issues.apache.org/jira/browse/FLINK-6998)).

### Connector improvements and fixes

Flink 1.4.0 introduces an Apache Kafka 0.11 connector and, as described above, support for an
exactly-once producer for Kafka 0.11 ([FLINK-6988](https://issues.apache.org/jira/browse/FLINK-6988)).

Additionally, the Flink-Kafka consumer now supports dynamic partition discovery &amp; topic discovery
based on regex. This means that the Flink-Kafka consumer can pick up new Kafka partitions without
needing to restart the job and while maintaining exactly-once guarantees
([FLINK-4022](https://issues.apache.org/jira/browse/FLINK-4022)).

Flink’s Apache Kinesis connector now uses an updated version of the Kinesis Consumer Library and
Kinesis Consumer Library. This introduces improved retry logic to the connector and should
significantly reduce the number of failures caused by Flink writing too quickly to Kinesis
([FLINK-7366](https://issues.apache.org/jira/browse/FLINK-7366)).

Flink’s Apache Cassandra connector now supports Scala tuples--previously, only streams of Java
tuples were supported ([FLINK-4497](https://issues.apache.org/jira/browse/FLINK-4497)). Also, a bug was fixed in
the Cassandra connector that caused messages to be lost in certain instances
([FLINK-4500](https://issues.apache.org/jira/browse/FLINK-4500)).

## Release Notes - Please Read

Some of these changes will require updating the configuration or Maven dependencies for existing
programs. Please read below to see if you might be affected.

### Changes to dynamic class loading of user code

As mentioned above, we changed the way Flink loads user code from the previous default of
*parent-first class loading* (the default for Java) to *child-first classloading*, which is a common
practice in Java Application Servers, where this is also referred to as inverted or reversed class
loading.

This should not affect regular user code but will enable programs to use a different version of
dependencies that come with Flink -- for example Akka, netty, or Jackson. If you want to change back
to the previous default, you can use the configuration setting `classloader.resolve-order: parent-first`,
the new default being `child-first`.

### No more Avro dependency included by default

Flink previously included Avro by default so user programs could simply use Avro and not worry about
adding any dependencies. This behavior was changed in Flink 1.4 because it can lead to dependency
clashes.

You now must manually include the Avro dependency (`flink-avro`) with your program jar (or add it to
the Flink lib folder) if you want to use Avro.

### Hadoop-free Flink

Starting with version 1.4, Flink can run without any Hadoop dependencies present in the Classpath.
Along with simply running without Hadoop, this enables Flink to dynamically use whatever Hadoop
version is available in the classpath.

You could, for example, download the Hadoop-free release of Flink but use that to run on any
supported version of YARN, and Flink would dynamically use the Hadoop dependencies from YARN.

This also means that in cases where you used connectors to HDFS, such as the `BucketingSink` or
`RollingSink`, you now have to ensure that you either use a Flink distribution with bundled Hadoop
dependencies or make sure to include Hadoop dependencies when building a jar file for your
application.

### Bundled S3 FileSystems

Flink 1.4 comes bundled with two different S3 FileSystems based on the Presto S3 FileSystem and
the Hadoop S3A FileSystem. They don&#39;t have dependencies (because all dependencies are
shaded/relocated) and you can use them by dropping the respective file from the `opt` directory
into the `lib` directory of your Flink installation. For more information about this, please refer
to the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.4/ops/filesystems.html#built-in-file-systems).

## List of Contributors

According to git shortlog, the following 106 people contributed to the 1.4.0 release. Thank you to
all contributors!

Ajay Tripathy, Alejandro Alcalde, Aljoscha Krettek, Bang, Phiradet, Bowen Li, Chris Ward, Cristian,
Dan Kelley, David Anderson, Dawid Wysakowicz, Dian Fu, Dmitrii Kniazev, DmytroShkvyra, Fabian
Hueske, FlorianFan, Fokko Driesprong, Gabor Gevay, Gary Yao, Greg Hogan, Haohui Mai, Hequn Cheng,
James Lafa, Jark Wu, Jie Shen, Jing Fan, JingsongLi, Joerg Schad, Juan Paulo Gutierrez, Ken Geis,
Kent Murra, Kurt Young, Lim Chee Hau, Maximilian Bode, Michael Fong, Mike Kobit, Mikhail Lipkovich,
Nico Kruber, Novotnik, Petr, Nycholas de Oliveira e Oliveira, Patrick Lucas, Piotr Nowojski, Robert
Metzger, Rodrigo Bonifacio, Rong Rong, Scott Kidder, Sebastian Klemke, Shuyi Chen, Stefan Richter,
Stephan Ewen, Svend Vanderveken, Till Rohrmann, Tony Wei, Tzu-Li (Gordon) Tai, Ufuk Celebi, Usman
Younas, Vetriselvan1187, Vishnu Viswanath, Wright, Eron, Xingcan Cui, Xpray, Yestin, Yonatan Most,
Zhenzhong Xu, Zhijiang, adebski, asdf2014, bbayani, biao.liub, cactuslrd.lird, dawidwys, desktop,
fengyelei, godfreyhe, gosubpl, gyao, hongyuhong, huafengw, kkloudas, kl0u, lincoln-lil,
lingjinjiang, mengji.fy, minwenjun, mtunique, p1tz, paul, rtudoran, shaoxuan-wang, sirko
bretschneider, sunjincheng121, tedyu, twalthr, uybhatti, wangmiao1981, yew1eb, z00376786, zentol,
zhangminglei, zhe li, zhouhai02, zjureel, 付典, 军长, 宝牛, 淘江, 金竹
</description>
<pubDate>Tue, 12 Dec 2017 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/12/12/release-1.4.0.html</link>
<guid isPermaLink="true">/news/2017/12/12/release-1.4.0.html</guid>
</item>

<item>
<title>Looking Ahead to Apache Flink 1.4.0 and 1.5.0</title>
<description>The Apache Flink 1.4.0 release is on track to happen in the next couple of weeks, and for all of the
readers out there who haven’t been following the release discussion on [Flink’s developer mailing
list](http://flink.apache.org/community.html#mailing-lists), we’d like to provide some details on
what’s coming in Flink 1.4.0 as well as a preview of what the Flink community will save for 1.5.0.

Both releases include ambitious features that we believe will move Flink to an entirely new level in
terms of the types of problems it can solve and applications it can support. The community deserves
lots of credit for its hard work over the past few months, and we’re excited to see these features
in the hands of users.

This post will describe how the community plans to get there and the rationale behind the approach.

## Coming soon: Major Changes to Flink’s Runtime

There are 3 significant improvements to the Apache Flink engine that the community has nearly
completed and that will have a meaningful impact on Flink’s operability and performance.

1. Rework of the deployment model and distributed process
2. Transition from configurable, fixed-interval network I/O to event-driven network I/O and application-level flow control for better backpressure handling
3. Faster recovery from failure

Next, we’ll go through each of these improvements in more detail.

## Reworking Flink’s Deployment Model and Distributed Processing

[FLIP-6](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077) (FLIP is short for
FLink Improvement Proposal and FLIPs are proposals for bigger changes to Flink) is an initiative
that’s been in the works for more than a year and represents a major refactor of Flink’s deployment
model and distributed process. The underlying motivation for FLIP-6 was the fact that Flink is being
adopted by a wider range of developer communities--both developers coming from the big data and
analytics space as well as developers coming from the event-driven applications space.

Modern, stateful stream processing has served as a convergence for these two developer communities.
Despite a significant overlap of the core concepts in the applications being built, each group of
developers has its own set of common tools, deployment models, and expected behaviors when working
with a stream processing framework like Flink.

FLIP-6 will ensure that Flink fits naturally in both of these contexts, behaving as though it’s
native to each ecosystem and operating seamlessly within a broader technology stack. A few of the
specific changes in FLIP-6 that will have such an impact:

 - Leveraging cluster management frameworks to support full resource elasticity
 - First-class support for containerized environments such as Kubernetes and Docker
 - REST-based client-cluster communication to ease operations and 3rd party integrations

FLIP-6, along with already-introduced features like
[rescalable state](https://data-artisans.com/blog/apache-flink-at-mediamath-rescaling-stateful-applications),
lays the groundwork for dynamic scaling in Flink, meaning that Flink programs will be able to scale up or down
automatically based on required resources--a huge step forward in terms of ease of operability and
the efficiency of Flink applications.

## Lower Latency via Improvements to the Apache Flink Network Stack

Speed will always be a key consideration for users who build stream processing applications, and
Flink 1.5 will include a rework of the network stack that will even further improve Flink&#39;s latency.
At the heart of this work is a transition from configurable, fixed-interval network I/O to event-
driven network I/O and application-level flow control, ensuring that Flink will use all available
network capacity, as well as credit-based flow control which offers more fine-grained backpressuring
for improved checkpoint alignments.

In our testing ([see slide 26 here](https://www.slideshare.net/FlinkForward/flink-forward-berlin-2017-nico-kruber-building-a-network-stack-for-optimal-throughput-lowlatency-tradeoffs#26)),
we’ve seen a substantial improvement in latency using event-driven network I/O, and the community
is also doing work to make sure we’re able to provide this increase in speed without a measurable
throughput tradeoff.

## Faster Recovery from Failures

Flink 1.3.0 introduced incremental checkpoints, making it possible to take a checkpoint of state
updates since the last successfully-completed checkpoint only rather than the previous behavior of
only taking checkpoints of the entire state of the application. This has led to significant
performance improvements for users with large state.

Flink 1.5 will introduce task-local recovery, which means that Flink will store a second copy of the
most recent checkpoint on the local disk (or even in main memory) of a task manager. The primary
copy still goes to durable storage so that it’s resilient to machine failures.

In case of failover, the scheduler will try to reschedule tasks to their previous task manager (in
other words, to the same machine again) if this is possible. The task can then recover from the
locally-kept state. This makes it possible to avoid reading all state from the distributed file
system (which is remote over the network). Especially in applications with very large state, not
having to read many gigabytes over the network and instead from local disk will result in
significant performance gains in recovery.

## The Proposed Timeline for Flink 1.4 and Flink 1.5

The good news is that all 3 of the features described above are well underway, and in fact, much of
the work is already covered by open pull requests.

But given these features’ importance and the complexity of the work involved, the community expected
that the QA and testing required would be extensive and would delay the release of the otherwise-
ready features also on the list for the next release.

And so the community decided to withhold the 3 features above (deployment model rework, improvements
to the network stack, and faster recovery) to be included a separate Flink 1.5 release that will
come shortly after the Flink 1.4 release. Flink 1.5 is estimated to come just a couple of months
after 1.4 rather than the typical 4-month cycle in between major releases.

The soon-to-be-released Flink 1.4 represents the current state of Flink without merging those 3
features. And Flink 1.4 is a substantial release in its own right, including, but not limited to,
the following:

- **A significantly improved dependency structure**, removing many of Flink’s dependencies and subtle runtime conflicts. This increases overall stability and removes friction when embedding Flink or calling Flink &quot;library style&quot;.
- **Reversed class loading for dynamically-loaded user code**, allowing for different dependencies than those included in the core framework.
- **An Apache Kafka 0.11 exactly-once producer**, making it possible to build end-to-end exactly once applications with Flink and Kafka.
- **Streaming SQL JOIN based on processing time and event time**, which gives users the full advantage of Flink’s time handling while using a SQL JOIN.
- **Table API / Streaming SQL Source and Sink Additions**, including a Kafka 0.11 source and JDBC sink.
- **Hadoop-free Flink**, meaning that users who don’t rely on any Hadoop components (such as YARN or HDFS) in their Flink applications can use Flink without Hadoop for the first time.
- **Improvements to queryable state**, including a more container-friendly architecture, a more user-friendly API that hides configuration parameters, and the groundwork to be able to expose window state (the state of an in-flight window) in the future.
- **Connector improvements and fixes** for a range of connectors including Kafka, Apache Cassandra, Amazon Kinesis, and more.
- **Improved RPC performance** for faster recovery from failure

The community decided it was best to get these features into a stable version of Flink as soon as
possible, and the separation of what could have been a single (and very substantial) Flink 1.4
release into 1.4 and 1.5 serves that purpose.

We’re excited by what each of these represents for Apache Flink, and we’d like to extend our thanks
to the Flink community for all of their hard work.

If you’d like to follow along with release discussions, [please subscribe to the dev@ mailing
list](http://flink.apache.org/community.html#mailing-lists).

</description>
<pubDate>Wed, 22 Nov 2017 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/11/22/release-1.4-and-1.5-timeline.html</link>
<guid isPermaLink="true">/news/2017/11/22/release-1.4-and-1.5-timeline.html</guid>
</item>

<item>
<title>Apache Flink 1.3.2 Released</title>
<description>The Apache Flink community released the second bugfix version of the Apache Flink 1.3 series.

This release includes more than 60 fixes and minor improvements for Flink 1.3.1. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.3.2.


&lt;div class=&quot;alert alert-warning&quot;&gt;
  Important Notice:

  &lt;p&gt;A user reported a bug in the FlinkKafkaConsumer
  (&lt;a href=&quot;https://issues.apache.org/jira/browse/FLINK-7143&quot;&gt;FLINK-7143&lt;/a&gt;) that is causing
  incorrect partition assignment in large Kafka deployments in the presence of inconsistent broker
  metadata.  In that case multiple parallel instances of the FlinkKafkaConsumer may read from the
  same topic partition, leading to data duplication. In Flink 1.3.2 this bug is fixed but incorrect
  assignments from Flink 1.3.0 and 1.3.1 cannot be automatically fixed by upgrading to Flink 1.3.2
  via a savepoint because the upgraded version would resume the wrong partition assignment from the
  savepoint. If you believe you are affected by this bug (seeing messages from some partitions
  duplicated) please refer to the JIRA issue for an upgrade path that works around that.&lt;/p&gt;

  &lt;p&gt;Before attempting the more elaborate upgrade path, we would suggest to check if you are
  actually affected by this bug. We did not manage to reproduce it in various testing clusters and
  according to the reporting user, it only appeared in rare cases on their very large setup. This
  leads us to believe that most likely only a minority of setups would be affected by this bug.&lt;/p&gt;
&lt;/div&gt;

Notable changes:

 - The default Kafka version for Flink Kafka Consumer 0.10 was bumped from 0.10.0.1 to 0.10.2.1.
 - Some default values for configurations of AWS API call behaviors in the Flink Kinesis Consumer
 were adapted for better default consumption performance: 1) `SHARD_GETRECORDS_MAX` default changed
 to 10,000, and 2) `SHARD_GETRECORDS_INTERVAL_MILLIS` default changed to 200ms.

Updated Maven dependencies:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.3.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.3.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.3.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

List of resolved issues:

&lt;h2&gt;        Sub-task
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6665&#39;&gt;FLINK-6665&lt;/a&gt;] -         Pass a ScheduledExecutorService to the RestartStrategy
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6667&#39;&gt;FLINK-6667&lt;/a&gt;] -         Pass a callback type to the RestartStrategy, rather than the full ExecutionGraph
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6680&#39;&gt;FLINK-6680&lt;/a&gt;] -         App &amp;amp; Flink migration guide: updates for the 1.3 release
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5488&#39;&gt;FLINK-5488&lt;/a&gt;] -         yarnClient should be closed in AbstractYarnClusterDescriptor for error conditions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6376&#39;&gt;FLINK-6376&lt;/a&gt;] -         when deploy flink cluster on the yarn, it is lack of hdfs delegation token.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6541&#39;&gt;FLINK-6541&lt;/a&gt;] -         Jar upload directory not created
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6654&#39;&gt;FLINK-6654&lt;/a&gt;] -         missing maven dependency on &amp;quot;flink-shaded-hadoop2-uber&amp;quot; in flink-dist
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6655&#39;&gt;FLINK-6655&lt;/a&gt;] -         Misleading error message when HistoryServer path is empty
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6742&#39;&gt;FLINK-6742&lt;/a&gt;] -         Improve error message when savepoint migration fails due to task removal
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6774&#39;&gt;FLINK-6774&lt;/a&gt;] -         build-helper-maven-plugin version not set
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6806&#39;&gt;FLINK-6806&lt;/a&gt;] -         rocksdb is not listed as state backend in doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6843&#39;&gt;FLINK-6843&lt;/a&gt;] -         ClientConnectionTest fails on travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6867&#39;&gt;FLINK-6867&lt;/a&gt;] -         Elasticsearch 1.x ITCase still instable due to embedded node instability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6918&#39;&gt;FLINK-6918&lt;/a&gt;] -         Failing tests: ChainLengthDecreaseTest and ChainLengthIncreaseTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6945&#39;&gt;FLINK-6945&lt;/a&gt;] -         TaskCancelAsyncProducerConsumerITCase.testCancelAsyncProducerAndConsumer instable test case
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6964&#39;&gt;FLINK-6964&lt;/a&gt;] -         Fix recovery for incremental checkpoints in StandaloneCompletedCheckpointStore
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6965&#39;&gt;FLINK-6965&lt;/a&gt;] -         Avro is missing snappy dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6987&#39;&gt;FLINK-6987&lt;/a&gt;] -         TextInputFormatTest fails when run in path containing spaces
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6996&#39;&gt;FLINK-6996&lt;/a&gt;] -         FlinkKafkaProducer010 doesn&amp;#39;t guarantee at-least-once semantic
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7005&#39;&gt;FLINK-7005&lt;/a&gt;] -         Optimization steps are missing for nested registered tables
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7011&#39;&gt;FLINK-7011&lt;/a&gt;] -         Instable Kafka testStartFromKafkaCommitOffsets failures on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7025&#39;&gt;FLINK-7025&lt;/a&gt;] -         Using NullByteKeySelector for Unbounded ProcTime NonPartitioned Over
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7034&#39;&gt;FLINK-7034&lt;/a&gt;] -         GraphiteReporter cannot recover from lost connection
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7038&#39;&gt;FLINK-7038&lt;/a&gt;] -         Several misused &amp;quot;KeyedDataStream&amp;quot; term in docs and Javadocs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7041&#39;&gt;FLINK-7041&lt;/a&gt;] -         Deserialize StateBackend from JobCheckpointingSettings with user classloader
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7132&#39;&gt;FLINK-7132&lt;/a&gt;] -         Fix BulkIteration parallelism
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7133&#39;&gt;FLINK-7133&lt;/a&gt;] -         Fix Elasticsearch version interference
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7137&#39;&gt;FLINK-7137&lt;/a&gt;] -         Flink table API defaults top level fields as nullable and all nested fields within CompositeType as non-nullable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7143&#39;&gt;FLINK-7143&lt;/a&gt;] -         Partition assignment for Kafka consumer is not stable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7154&#39;&gt;FLINK-7154&lt;/a&gt;] -         Missing call to build CsvTableSource example
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7158&#39;&gt;FLINK-7158&lt;/a&gt;] -         Wrong test jar dependency in flink-clients
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7177&#39;&gt;FLINK-7177&lt;/a&gt;] -         DataSetAggregateWithNullValuesRule fails creating null literal for non-nullable type
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7178&#39;&gt;FLINK-7178&lt;/a&gt;] -         Datadog Metric Reporter Jar is Lacking Dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7180&#39;&gt;FLINK-7180&lt;/a&gt;] -         CoGroupStream perform checkpoint failed
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7195&#39;&gt;FLINK-7195&lt;/a&gt;] -         FlinkKafkaConsumer should not respect fetched partitions to filter restored partition states
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7216&#39;&gt;FLINK-7216&lt;/a&gt;] -         ExecutionGraph can perform concurrent global restarts to scheduling
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7225&#39;&gt;FLINK-7225&lt;/a&gt;] -         Cutoff exception message in StateDescriptor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7226&#39;&gt;FLINK-7226&lt;/a&gt;] -         REST responses contain invalid content-encoding header
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7231&#39;&gt;FLINK-7231&lt;/a&gt;] -         SlotSharingGroups are not always released in time for new restarts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7234&#39;&gt;FLINK-7234&lt;/a&gt;] -         Fix CombineHint documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7241&#39;&gt;FLINK-7241&lt;/a&gt;] -         Fix YARN high availability documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7255&#39;&gt;FLINK-7255&lt;/a&gt;] -         ListStateDescriptor example uses wrong constructor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7258&#39;&gt;FLINK-7258&lt;/a&gt;] -         IllegalArgumentException in Netty bootstrap with large memory state segment size
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7266&#39;&gt;FLINK-7266&lt;/a&gt;] -         Don&amp;#39;t attempt to delete parent directory on S3
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7268&#39;&gt;FLINK-7268&lt;/a&gt;] -         Zookeeper Checkpoint Store interacting with Incremental State Handles can lead to loss of handles
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7281&#39;&gt;FLINK-7281&lt;/a&gt;] -         Fix various issues in (Maven) release infrastructure
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6365&#39;&gt;FLINK-6365&lt;/a&gt;] -         Adapt default values of the Kinesis connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6575&#39;&gt;FLINK-6575&lt;/a&gt;] -         Disable all tests on Windows that use HDFS
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6682&#39;&gt;FLINK-6682&lt;/a&gt;] -         Improve error message in case parallelism exceeds maxParallelism
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6789&#39;&gt;FLINK-6789&lt;/a&gt;] -         Remove duplicated test utility reducer in optimizer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6874&#39;&gt;FLINK-6874&lt;/a&gt;] -         Static and transient fields ignored for POJOs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6898&#39;&gt;FLINK-6898&lt;/a&gt;] -         Limit size of operator component in metric name
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6937&#39;&gt;FLINK-6937&lt;/a&gt;] -         Fix link markdown in Production Readiness Checklist doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6940&#39;&gt;FLINK-6940&lt;/a&gt;] -         Clarify the effect of configuring per-job state backend
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6998&#39;&gt;FLINK-6998&lt;/a&gt;] -         Kafka connector needs to expose metrics for failed/successful offset commits in the Kafka Consumer callback
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7004&#39;&gt;FLINK-7004&lt;/a&gt;] -         Switch to Travis Trusty image
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7032&#39;&gt;FLINK-7032&lt;/a&gt;] -         Intellij is constantly changing language level of sub projects back to 1.6
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7069&#39;&gt;FLINK-7069&lt;/a&gt;] -         Catch exceptions for each reporter separately
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7149&#39;&gt;FLINK-7149&lt;/a&gt;] -         Add checkpoint ID to &amp;#39;sendValues()&amp;#39; in GenericWriteAheadSink
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7164&#39;&gt;FLINK-7164&lt;/a&gt;] -         Extend integration tests for (externalised) checkpoints, checkpoint store
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7174&#39;&gt;FLINK-7174&lt;/a&gt;] -         Bump dependency of Kafka 0.10.x to the latest one
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7211&#39;&gt;FLINK-7211&lt;/a&gt;] -         Exclude Gelly javadoc jar from release
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7224&#39;&gt;FLINK-7224&lt;/a&gt;] -         Incorrect Javadoc description in all Kafka consumer versions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7228&#39;&gt;FLINK-7228&lt;/a&gt;] -         Harden HistoryServerStaticFileHandlerTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7233&#39;&gt;FLINK-7233&lt;/a&gt;] -         TaskManagerHeapSizeCalculationJavaBashTest failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7287&#39;&gt;FLINK-7287&lt;/a&gt;] -         test instability in Kafka010ITCase.testCommitOffsetsToKafka
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-7290&#39;&gt;FLINK-7290&lt;/a&gt;] -         Make release scripts modular
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 05 Aug 2017 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/08/05/release-1.3.2.html</link>
<guid isPermaLink="true">/news/2017/08/05/release-1.3.2.html</guid>
</item>

<item>
<title>A Deep Dive into Rescalable State in Apache Flink</title>
<description> _Apache Flink 1.2.0, released in February 2017, introduced support for rescalable state. This post provides a detailed overview of stateful stream processing and rescalable state in Flink._
 &lt;br&gt;
 &lt;br&gt;

{% toc %}

## An Intro to Stateful Stream Processing

At a high level, we can consider state in stream processing as memory in operators that remembers information about past input and can be used to influence the processing of future input.

In contrast, operators in _stateless_ stream processing only consider their current inputs, without further context and knowledge about the past. A simple example to illustrate this difference: let us consider a source stream that emits events with schema `e = {event_id:int, event_value:int}`. Our goal is, for each event, to extract and output the `event_value`. We can easily achieve this with a simple source-map-sink pipeline, where the map function extracts the `event_value` from the event and emits it downstream to an outputting sink. This is an instance of stateless stream processing.

But what if we want to modify our job to output the `event_value` only if it is larger than the value from the previous event? In this case, our map function obviously needs some way to remember the `event_value` from a past event — and so this is an instance of stateful stream processing.

This example should demonstrate that state is a fundamental, enabling concept in stream processing that is required for a majority of interesting use cases.

## State in Apache Flink

Apache Flink is a massively parallel distributed system that allows stateful stream processing at large scale. For scalability, a Flink job is logically decomposed into a graph of operators, and the execution of each operator is physically decomposed into multiple parallel operator instances. Conceptually, each parallel operator instance in Flink is an independent task that can be scheduled on its own machine in a network-connected cluster of shared-nothing machines.

For high throughput and low latency in this setting, network communications among tasks must be minimized. In Flink, network communication for stream processing only happens along the logical edges in the job’s operator graph (vertically), so that the stream data can be transferred from upstream to downstream operators.

However, there is no communication between the parallel instances of an operator (horizontally). To avoid such network communication, data locality is a key principle in Flink and strongly affects how state is stored and accessed.

For the sake of data locality, all state data in Flink is always bound to the task that runs the corresponding parallel operator instance and is co-located on the same machine that runs the task.

Through this design, all state data for a task is local, and no network communication between tasks is required for state access. Avoiding this kind of traffic is crucial for the scalability of a massively parallel distributed system like Flink.

For Flink’s stateful stream processing, we differentiate between two different types of state: operator state and keyed state. Operator state is scoped per parallel instance of an operator (sub-task), and keyed state can be thought of as [“operator state that has been partitioned, or sharded, with exactly one state-partition per key”](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/state.html#keyed-state). We could have easily implemented our previous example as operator state: all events that are routed through the operator instance can influence its value.

## Rescaling Stateful Stream Processing Jobs

Changing the parallelism (that is, changing the number of parallel subtasks that perform work for an operator) in stateless streaming is very easy. It requires only starting or stopping parallel instances of stateless operators and dis-/connecting them to/from their upstream and downstream operators as shown in **Figure 1A**.

On the other hand, changing the parallelism of stateful operators is much more involved because we must also (i) redistribute the previous operator state in a (ii) consistent, (iii) meaningful way. Remember that in Flink’s shared-nothing architecture, all state is local to the task that runs the owning parallel operator instance, and there is no communication between parallel operator instances at job runtime.

However, there is already one mechanism in Flink that allows the exchange of operator state between tasks, in a consistent way, with exactly-once guarantees — Flink’s checkpointing!

You can see detail about Flink’s checkpoints in [the documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/internals/stream_checkpointing.html). In a nutshell, a checkpoint is triggered when a checkpoint coordinator injects a special event (a so-called checkpoint barrier) into a stream.

Checkpoint barriers flow downstream with the event stream from sources to sinks, and whenever an operator instance receives a barrier, the operator instance immediately snapshots its current state to a distributed storage system, e.g. HDFS.

On restore, the new tasks for the job (which potentially run on different machines now) can again pick up the state data from the distributed storage system.

&lt;br&gt;&lt;center&gt;&lt;i&gt;Figure 1&lt;/i&gt;&lt;/center&gt;
&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/stateless-stateful-streaming.svg&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;
&lt;br&gt;

We can piggyback rescaling of stateful jobs on checkpointing, as shown in **Figure 1B**. First, a checkpoint is triggered and sent to a distributed storage system. Next, the job is restarted with a changed parallelism and can access a consistent snapshot of all previous state from the distributed storage. While this solves (i) redistribution of a (ii) consistent state across machines there is still one problem: without a clear 1:1 relationship between previous state and new parallel operator instances, how can we assign the state in a (iii) meaningful way?

We could again assign the state from previous `map_1` and `map_2` to the new `map_1` and `map_2`. But this would leave `map_3` with empty state. Depending on the type of state and concrete semantics of the job, this naive approach could lead to anything from inefficiency to incorrect results.

In the following section, we’ll explain how we solved the problem of efficient, meaningful state reassignment in Flink. Each of Flink state’s two flavours, operator state and keyed state, requires a different approach to state assignment.

## Reassigning Operator State When Rescaling

First, we’ll discuss how state reassignment in rescaling works for operator state. A common real-world use-case of operator state in Flink is to maintain the current offsets for Kafka partitions in Kafka sources. Each Kafka source instance would maintain `&lt;PartitionID, Offset&gt;` pairs – one pair for each Kafka partition that the source is reading–as operator state. How would we redistribute this operator state in case of rescaling? Ideally, we would like to reassign all `&lt;PartitionID, Offset&gt;` pairs from the checkpoint in round robin across all parallel operator instances after the rescaling.

As a user, we are aware of the “meaning” of Kafka partition offsets, and we know that we can treat them as independent, redistributable units of state. The problem of how we can we share this domain-specific knowledge with Flink remains.

**Figure 2A** illustrates the previous interface for checkpointing operator state in Flink. On snapshot, each operator instance returned an object that represented its complete state. In the case of a Kafka source, this object was a list of partition offsets.

This snapshot object was then written to the distributed store. On restore, the object was read from distributed storage and passed to the operator instance as a parameter to the restore function.

This approach was problematic for rescaling: how could Flink decompose the operator state into meaningful, redistributable partitions? Even though the Kafka source was actually always a list of partition offsets, the previously-returned state object was a black box to Flink and therefore could not be redistributed.

As a generalized approach to solve this black box problem, we slightly modified the checkpointing interface, called `ListCheckpointed`. **Figure 2B** shows the new checkpointing interface, which returns and receives a list of state partitions. Introducing a list instead of a single object makes the meaningful partitioning of state explicit: each item in the list still remains a black box to Flink, but is considered an atomic, independently re-distributable part of the operator state.


&lt;br&gt;&lt;center&gt;&lt;i&gt;Figure 2&lt;/i&gt;&lt;/center&gt;
&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/list-checkpointed.svg&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;&lt;br&gt;


Our approach provides a simple API with which implementing operators can encode domain-specific knowledge about how to partition and merge units of state. With our new checkpointing interface, the Kafka source makes individual partition offsets explicit, and state reassignment becomes as easy as splitting and merging lists.

```java
public class FlinkKafkaConsumer&lt;T&gt; extends RichParallelSourceFunction&lt;T&gt; implements CheckpointedFunction {
	 // ...

   private transient ListState&lt;Tuple2&lt;KafkaTopicPartition, Long&gt;&gt; offsetsOperatorState;

   @Override
   public void initializeState(FunctionInitializationContext context) throws Exception {

      OperatorStateStore stateStore = context.getOperatorStateStore();
      // register the state with the backend
      this.offsetsOperatorState = stateStore.getSerializableListState(&quot;kafka-offsets&quot;);

      // if the job was restarted, we set the restored offsets
      if (context.isRestored()) {
         for (Tuple2&lt;KafkaTopicPartition, Long&gt; kafkaOffset : offsetsOperatorState.get()) {
            // ... restore logic
         }
      }
   }

   @Override
   public void snapshotState(FunctionSnapshotContext context) throws Exception {

      this.offsetsOperatorState.clear();

      // write the partition offsets to the list of operator states
      for (Map.Entry&lt;KafkaTopicPartition, Long&gt; partition : this.subscribedPartitionOffsets.entrySet()) {
         this.offsetsOperatorState.add(Tuple2.of(partition.getKey(), partition.getValue()));
      }
   }

   // ...

}
```

## Reassigning Keyed State When Rescaling
The second flavour of state in Flink is keyed state. In contrast to operator state, keyed state is scoped by key, where the key is extracted from each stream event.

To illustrate how keyed state differs from operator state, let’s use the following example. Assume we have a stream of events, where each event has the schema `{customer_id:int, value:int}`. We have already learned that we can use operator state to compute and emit the running sum of values for all customers.

Now assume we want to slightly modify our goal and compute a running sum of values for each individual `customer_id`. This is a use case from keyed state, as one aggregated state must be maintained for each unique key in the stream.

Note that keyed state is only available for keyed streams, which are created through the `keyBy()` operation in Flink. The `keyBy()` operation (i) specifies how to extract a key from each event and (ii) ensures that all events with the same key are always processed by the same parallel operator instance. As a result, all keyed state is transitively also bound to one parallel operator instance, because for each key, exactly one operator instance is responsible. This mapping from key to operator is deterministically computed through hash partitioning on the key.

We can see that keyed state has one clear advantage over operator state when it comes to rescaling: we can easily figure out how to correctly split and redistribute the state across parallel operator instances. State reassignment simply follows the partitioning of the keyed stream. After rescaling, the state for each key must be assigned to the operator instance that is now responsible for that key, as determined by the hash partitioning of the keyed stream.

While this automatically solves the problem of logically remapping the state to sub-tasks after rescaling, there is one more practical problem left to solve: how can we efficiently transfer the state to the subtasks’ local backends?

When we’re not rescaling, each subtask can simply read the whole state as written to the checkpoint by a previous instance in one sequential read.

When rescaling, however, this is no longer possible – the state for each subtask is now potentially scattered across the files written by all subtasks (think about what happens if you change the parallelism in `hash(key) mod parallelism`). We have illustrated this problem in **Figure 3A**. In this example, we show how keys are shuffled when rescaling from parallelism 3 to 4 for a key space of 0, 20, using identity as hash function to keep it easy to follow.

A naive approach might be to read all the previous subtask state from the checkpoint in all sub-tasks and filter out the matching keys for each sub-task. While this approach can benefit from a sequential read pattern, each subtask potentially reads a large fraction of irrelevant state data, and the distributed file system receives a huge number of parallel read requests.

Another approach could be to build an index that tracks the location of the state for each key in the checkpoint. With this approach, all sub-tasks could locate and read the matching keys very selectively. This approach would avoid reading irrelevant data, but it has two major downsides. A materialized index for all keys, i.e. a key-to-read-offset mapping, can potentially grow very large. Furthermore, this approach can also introduce a huge amount of random I/O (when seeking to the data for individual keys, see **Figure 3A**, which typically entails very bad performance in distributed file systems.

Flink’s approach sits in between those two extremes by introducing key-groups as the atomic unit of state assignment. How does this work? The number of key-groups must be determined before the job is started and (currently) cannot be changed after the fact. As key-groups are the atomic unit of state assignment, this also means that the number of key-groups is the upper limit for parallelism. In a nutshell, key-groups give us a way to trade between flexibility in rescaling (by setting an upper limit for parallelism) and the maximum overhead involved in indexing and restoring the state.

We assign key-groups to subtasks as ranges. This makes the reads on restore not only sequential within each key-group, but often also across multiple key-groups. An additional benefit: this also keeps the metadata of key-group-to-subtask assignments very small. We do not maintain explicit lists of key-groups because it is sufficient to track the range boundaries.

We have illustrated rescaling from parallelism 3 to 4 with 10 key-groups in **Figure 3B**. As we can see, introducing key-groups and assigning them as ranges greatly improves the access pattern over the naive approach. Equation 2 and 3 in **Figure 3B** also details how we compute key-groups and the range assignment.

&lt;br&gt;&lt;center&gt;&lt;i&gt;Figure 2&lt;/i&gt;&lt;/center&gt;
&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/key-groups.svg&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;&lt;br&gt;

## Wrapping Up

Thanks for staying with us, and we hope you now have a clear idea of how rescalable state works in Apache Flink and how to make use of rescaling in real-world scenarios.

Flink 1.3.0, which was released earlier this month, adds more tooling for state management and fault tolerance in Flink, including incremental checkpoints. And the community is exploring features such as…

• State replication&lt;br&gt;
• State that isn’t bound to the lifecycle of a Flink job&lt;br&gt;
• Automatic rescaling (with no savepoints required)

…for Flink 1.4.0 and beyond.

If you’d like to learn more, we recommend starting with the Apache Flink [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/state.html).

_This is an excerpt from a post that originally appeared on the data Artisans blog. If you&#39;d like to read the original post in its entirety, you can find it &lt;a href=&quot;https://data-artisans.com/blog/apache-flink-at-mediamath-rescaling-stateful-applications&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; (external link)._
</description>
<pubDate>Tue, 04 Jul 2017 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/features/2017/07/04/flink-rescalable-state.html</link>
<guid isPermaLink="true">/features/2017/07/04/flink-rescalable-state.html</guid>
</item>

<item>
<title>Apache Flink 1.3.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.3 series.

This release includes 50 fixes and minor improvements for Flink 1.3.0. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.3.1.




```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.3.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.3.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).


                            
&lt;h3&gt;        Bug
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6492&#39;&gt;FLINK-6492&lt;/a&gt;] -         Unclosed DataOutputViewStream in GenericArraySerializerConfigSnapshot#write()
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6602&#39;&gt;FLINK-6602&lt;/a&gt;] -         Table source with defined time attributes allows empty string
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6652&#39;&gt;FLINK-6652&lt;/a&gt;] -         Problem with DelimitedInputFormat
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6659&#39;&gt;FLINK-6659&lt;/a&gt;] -         RocksDBMergeIteratorTest, SavepointITCase leave temporary directories behind
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6669&#39;&gt;FLINK-6669&lt;/a&gt;] -         [Build] Scala style check errror on Windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6685&#39;&gt;FLINK-6685&lt;/a&gt;] -         SafetyNetCloseableRegistry is closed prematurely in Task::triggerCheckpointBarrier
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6772&#39;&gt;FLINK-6772&lt;/a&gt;] -         Incorrect ordering of matched state events in Flink CEP
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6775&#39;&gt;FLINK-6775&lt;/a&gt;] -         StateDescriptor cannot be shared by multiple subtasks
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6780&#39;&gt;FLINK-6780&lt;/a&gt;] -         ExternalTableSource should add time attributes in the row type
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6783&#39;&gt;FLINK-6783&lt;/a&gt;] -         Wrongly extracted TypeInformations for WindowedStream::aggregate
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6797&#39;&gt;FLINK-6797&lt;/a&gt;] -         building docs fails with bundler 1.15
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6801&#39;&gt;FLINK-6801&lt;/a&gt;] -         PojoSerializerConfigSnapshot cannot deal with missing Pojo fields
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6804&#39;&gt;FLINK-6804&lt;/a&gt;] -         Inconsistent state migration behaviour between different state backends
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6807&#39;&gt;FLINK-6807&lt;/a&gt;] -         Elasticsearch 5 connector artifact not published to maven 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6808&#39;&gt;FLINK-6808&lt;/a&gt;] -         Stream join fails when checkpointing is enabled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6809&#39;&gt;FLINK-6809&lt;/a&gt;] -         side outputs documentation: wrong variable name in java example code
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6812&#39;&gt;FLINK-6812&lt;/a&gt;] -         Elasticsearch 5 release artifacts not published to Maven central
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6815&#39;&gt;FLINK-6815&lt;/a&gt;] -         Javadocs don&amp;#39;t work anymore in Flink 1.4-SNAPSHOT
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6816&#39;&gt;FLINK-6816&lt;/a&gt;] -         Fix wrong usage of Scala string interpolation in Table API
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6833&#39;&gt;FLINK-6833&lt;/a&gt;] -         Race condition: Asynchronous checkpointing task can fail completed StreamTask
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6844&#39;&gt;FLINK-6844&lt;/a&gt;] -         TraversableSerializer should implement compatibility methods
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6848&#39;&gt;FLINK-6848&lt;/a&gt;] -         Extend the managed state docs with a Scala example
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6853&#39;&gt;FLINK-6853&lt;/a&gt;] -         Migrating from Flink 1.1 fails for FlinkCEP
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6869&#39;&gt;FLINK-6869&lt;/a&gt;] -         Scala serializers do not have the serialVersionUID specified
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6875&#39;&gt;FLINK-6875&lt;/a&gt;] -         Remote DataSet API job submission timing out
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6881&#39;&gt;FLINK-6881&lt;/a&gt;] -         Creating a table from a POJO and defining a time attribute fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6883&#39;&gt;FLINK-6883&lt;/a&gt;] -         Serializer for collection of Scala case classes are generated with different anonymous class names in 1.3
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6886&#39;&gt;FLINK-6886&lt;/a&gt;] -         Fix Timestamp field can not be selected in event time case when  toDataStream[T], `T` not a `Row` Type.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6896&#39;&gt;FLINK-6896&lt;/a&gt;] -         Creating a table from a POJO and use table sink to output fail
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6899&#39;&gt;FLINK-6899&lt;/a&gt;] -         Wrong state array size in NestedMapsStateTable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6914&#39;&gt;FLINK-6914&lt;/a&gt;] -         TrySerializer#ensureCompatibility causes StackOverflowException
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6915&#39;&gt;FLINK-6915&lt;/a&gt;] -         EnumValueSerializer broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6921&#39;&gt;FLINK-6921&lt;/a&gt;] -         EnumValueSerializer cannot properly handle appended enum values
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6922&#39;&gt;FLINK-6922&lt;/a&gt;] -         Enum(Value)SerializerConfigSnapshot uses Java serialization to store enum values
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6930&#39;&gt;FLINK-6930&lt;/a&gt;] -         Selecting window start / end on row-based Tumble/Slide window causes NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6932&#39;&gt;FLINK-6932&lt;/a&gt;] -         Update the inaccessible Dataflow Model paper link
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6941&#39;&gt;FLINK-6941&lt;/a&gt;] -         Selecting window start / end on over window causes field not resolve exception
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6948&#39;&gt;FLINK-6948&lt;/a&gt;] -         EnumValueSerializer cannot handle removed enum values
&lt;/li&gt;
&lt;/ul&gt;
                        
&lt;h3&gt;        Improvement
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5354&#39;&gt;FLINK-5354&lt;/a&gt;] -         Split up Table API documentation into multiple pages 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6038&#39;&gt;FLINK-6038&lt;/a&gt;] -         Add deep links to Apache Bahir Flink streaming connector documentations
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6796&#39;&gt;FLINK-6796&lt;/a&gt;] -         Allow setting the user code class loader for AbstractStreamOperatorTestHarness
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6803&#39;&gt;FLINK-6803&lt;/a&gt;] -         Add test for PojoSerializer when Pojo changes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6859&#39;&gt;FLINK-6859&lt;/a&gt;] -         StateCleaningCountTrigger should not delete timer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6929&#39;&gt;FLINK-6929&lt;/a&gt;] -         Add documentation for Table API OVER windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6952&#39;&gt;FLINK-6952&lt;/a&gt;] -         Add link to Javadocs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6748&#39;&gt;FLINK-6748&lt;/a&gt;] -         Table API / SQL Docs: Table API Page
&lt;/li&gt;
&lt;/ul&gt;
                                                                                        
&lt;h3&gt;        Test
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6830&#39;&gt;FLINK-6830&lt;/a&gt;] -         Add ITTests for savepoint migration from 1.3
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6320&#39;&gt;FLINK-6320&lt;/a&gt;] -         Flakey JobManagerHAJobGraphRecoveryITCase
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6744&#39;&gt;FLINK-6744&lt;/a&gt;] -         Flaky ExecutionGraphSchedulingTest
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6913&#39;&gt;FLINK-6913&lt;/a&gt;] -         Instable StatefulJobSavepointMigrationITCase.testRestoreSavepoint
&lt;/li&gt;
&lt;/ul&gt;
        </description>
<pubDate>Fri, 23 Jun 2017 16:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/06/23/release-1.3.1.html</link>
<guid isPermaLink="true">/news/2017/06/23/release-1.3.1.html</guid>
</item>

<item>
<title>Apache Flink 1.3.0 Release Announcement</title>
<description>The Apache Flink community is pleased to announce the 1.3.0 release. Over the past 4 months, the Flink community has been working hard to resolve more than 680 issues. See the [complete changelog]({{ site.baseurl }}/blog/release_1.3.0-changelog.html) for more detail.

This is the fourth major release in the 1.x.y series. It is API compatible with the other 1.x.y releases for APIs annotated with the @Public annotation.

Users can expect Flink releases now in a 4 month cycle. At the beginning of the 1.3 [release cycle](https://cwiki.apache.org/confluence/display/FLINK/Flink+Release+and+Feature+Plan), the community decided to follow a strict [time-based release model](https://cwiki.apache.org/confluence/display/FLINK/Time-based+releases).

We encourage everyone to download the release and check out the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/). Feedback through the [Flink mailing lists](http://flink.apache.org/community.html#mailing-lists) is, as always, gladly encouraged!

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html). Some highlights of the release are listed below.



# Large State Handling/Recovery

* **Incremental Checkpointing for RocksDB**: It is now possible to checkpoint only the difference from the previous successful checkpoint, rather than checkpointing the entire application state. This speeds up checkpointing and saves disk space, because the individual checkpoints are smaller. ([FLINK-5053](https://issues.apache.org/jira/browse/FLINK-5053)).

* **Asynchronous snapshots for heap-based state backends**: The filesystem and memory statebackends now also support asynchronous snapshots using a copy-on-write HashMap implementation. Asynchronous snapshotting makes Flink more resilient to slow storage systems and expensive serialization. The time an operator blocks on a snapshot is reduced to a minimum ([FLINK-6048](https://issues.apache.org/jira/browse/FLINK-6048), [FLINK-5715](https://issues.apache.org/jira/browse/FLINK-5715)).

* **Allow upgrades to state serializers:** Users can now upgrade serializers, while keeping their application state. One use case of this is upgrading custom serializers used for managed operator state/keyed state. Also, registration order for POJO types/Kryo types is now no longer fixed ([Documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/state.html#custom-serialization-for-managed-state), [FLINK-6178](https://issues.apache.org/jira/browse/FLINK-6178)).

* **Recover job state at the granularity of operator**: Before Flink 1.3, operator state was bound to Flink’s internal &quot;Task&quot; representation. This made it hard to change a job’s topology while keeping its state around. With this change, users are allowed to do more topology changes (un-chain operators) by restoring state into logical operators instead of “Tasks” ([FLINK-5892](https://issues.apache.org/jira/browse/FLINK-5892)).

* **Fine-grained recovery** (beta): Instead of restarting the complete ExecutionGraph in case of a task failure, Flink is now able to restart only the affected subgraph and thereby significantly decrease recovery time ([FLINK-4256](https://issues.apache.org/jira/browse/FLINK-4256)).

# DataStream API

* **Side Outputs**: This change allows users to have more than one output stream for an operator. Operator metadata, internal system information (debugging, performance etc.) or rejected/late elements are potential use-cases for this new API feature. **The Window operator is now using this new feature for late window elements** ([Side Outputs Documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/stream/side_output.html), [FLINK-4460](https://issues.apache.org/jira/browse/FLINK-4460)).

* **Union Operator State**: Flink 1.2.0 introduced broadcast state functionality, but this had not yet been exposed via a public API. Flink 1.3.0 provides the Union Operator State API for exposing broadcast operator state. The union state will send the entire state across all parallel instances to each instance on restore, giving each operator a full view of the state ([FLINK-5991](https://issues.apache.org/jira/browse/FLINK-5991)).

* **Per-Window State**: Previously, the state that a WindowFunction or ProcessWindowFunction could access was scoped to the key of the window but not the window itself. With this new feature, users can keep window state independent of the key ([FLINK-5929](https://issues.apache.org/jira/browse/FLINK-5929)).

# Deployment and Tooling

* **Flink HistoryServer**: Flink’s [HistoryServer](https://ci.apache.org/projects/flink/flink-docs-release-1.3/monitoring/historyserver.html) now allows you to query the status and statistics of completed jobs that have been archived by a JobManager ([FLINK-1579](https://issues.apache.org/jira/browse/FLINK-1579)).

* **Watermark Monitoring in Web Front-end**: For easier diagnosis of watermark issues, the Flink JobManager front-end now provides a new tab to track the watermark of each operator ([FLINK-3427](https://issues.apache.org/jira/browse/FLINK-3427)).

* **Datadog HTTP Metrics Reporter**: Datadog is a widely-used metrics system, and Flink now offers a [Datadog reporter](https://ci.apache.org/projects/flink/flink-docs-release-1.3/monitoring/metrics.html#datadog-orgapacheflinkmetricsdatadogdatadoghttpreporter) that contacts the Datadog http endpoint directly ([FLINK-6013](https://issues.apache.org/jira/browse/FLINK-6013)).

* **Network Buffer Configuration**: We finally got rid of the tedious network buffer configuration and replaced it with a more generic approach. First of all, you may now follow the idiom &quot;more is better&quot; without any penalty on the latency which could previously occur due to excessive buffering in incoming and outgoing channels. Secondly, instead of defining an absolute number of network buffers, we now use fractions of the available JVM memory (10% by default). This should cover more use cases by default and may also be tweaked by defining a minimum and maximum size.

  → See [Configuring the Network Buffers](https://ci.apache.org/projects/flink/flink-docs-release-1.3/setup/config.html#configuring-the-network-buffers) in the Flink documentation.

# Table API / SQL

* **Support for Retractions in Table API / SQL**: As part of our endeavor to support continuous queries on [Dynamic Tables](http://flink.apache.org/news/2017/04/04/dynamic-tables.html), Retraction is an important building block that will enable a whole range of new applications which require updating previously-emitted results. Examples for such use cases are computation of early results for long-running windows, updates due to late arriving data, or maintaining constantly changing results similar to materialized views in relational database systems. Flink 1.3.0 supports retraction for non-windowed aggregates. Results with updates can be either converted into a DataStream or materialized to external data stores using TableSinks with upsert or retraction support. 

* **Extended support for aggregations in Table API / SQL**: With Flink 1.3.0, the Table API and SQL support many more types of aggregations, including
	* GROUP BY window aggregations in SQL (via the window functions [TUMBLE, HOP, and SESSION windows](https://issues.apache.org/jira/browse/FLINK-6011)) for both batch and streaming.

	* SQL OVER window aggregations (only for streaming)

	* Non-windowed aggregations (in streaming with retractions).

	* User-defined aggregation functions for custom aggregation logic.

* **External catalog support**: The Table API &amp; SQL allows to register external catalogs. Table API and SQL queries can then have access to table sources and their schema from the external catalogs without register those tables one by one.

→ See [the Flink documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.3/dev/table_api.html#group-windows) for details about these features.

&lt;div class=&quot;alert alert-warning&quot;&gt;
  The Table API / SQL documentation is currently being reworked. The community plans to publish the updated docs in the week of June 5th.
&lt;/div&gt;

# Connectors

* **ElasticSearch 5.x support**: The ElasticSearch connectors have been restructured to have a common base module and specific modules for ES 1, 2 and 5, similar to how the Kafka connectors are organized. This will make fixes and future improvements available across all ES versions ([FLINK-4988](https://issues.apache.org/jira/browse/FLINK-4988)).

* **Allow rescaling the Kinesis Consumer**: Flink 1.2.0 introduced rescalable state for DataStream programs. With Flink 1.3, the Kinesis Consumer also makes use of that engine feature ([FLINK-4821](https://issues.apache.org/jira/browse/FLINK-4821)).

* **Transparent shard discovery for Kinesis Consumer**: The Kinesis consumer can now discover new shards without failing / restarting jobs when a resharding is happening ([FLINK-4577](https://issues.apache.org/jira/browse/FLINK-4577)).

* **Allow setting custom start positions for the Kafka consumer**: With this change, you can instruct Flink’s Kafka consumer to start reading messages from a specific offset ([FLINK-3123](https://issues.apache.org/jira/browse/FLINK-3123)) or earliest / latest offset ([FLINK-4280](https://issues.apache.org/jira/browse/FLINK-4280)) without respecting committed offsets in Kafka.

* **Allow out-opt from offset committing for the Kafka consumer**: By default, Kafka commits the offsets to the Kafka broker once a checkpoint has been completed. This change allows users to disable this mechanism ([FLINK-3398](https://issues.apache.org/jira/browse/FLINK-3398)).

# CEP Library

The CEP library has been greatly enhanced and is now able to accommodate more use-cases out-of-the-box (expressivity enhancements), make more efficient use of the available resources, adjust to changing runtime conditions--all without breaking backwards compatibility of operator state.

Please note that the API of the CEP library has been updated with this release. 

Below are some of the main features of the revamped CEP library:

* **Make CEP operators rescalable**: Flink 1.2.0 introduced rescalable state for DataStream programs. With Flink 1.3, the CEP library also makes use of that engine feature ([FLINK-5420](https://issues.apache.org/jira/browse/FLINK-5420)).


* **New operators for the CEP library**:

    * Quantifiers (*,+,?) for the pattern API ([FLINK-3318](https://issues.apache.org/jira/browse/FLINK-3318))

    * Support for different continuity requirements ([FLINK-6208](https://issues.apache.org/jira/browse/FLINK-6208))

    * Support for iterative conditions ([FLINK-6197](https://issues.apache.org/jira/browse/FLINK-6197))

# Gelly Library

* Unified driver for running Gelly examples [FLINK-4949](https://issues.apache.org/jira/browse/FLINK-4949)).
* PageRank algorithm for directed graphs ([FLINK-4896](https://issues.apache.org/jira/browse/FLINK-4896)).
* Add Circulant and Echo graph generators ([FLINK-6393](https://issues.apache.org/jira/browse/FLINK-6393)).

# Known Issues

&lt;div class=&quot;alert alert-warning&quot;&gt;
  There are two &lt;strong&gt;known issues&lt;/strong&gt; in Flink 1.3.0. Both will be addressed in the &lt;i&gt;1.3.1&lt;/i&gt; release.
  &lt;br&gt;
  &lt;ul&gt;
  	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/FLINK-6783&quot;&gt;FLINK-6783&lt;/a&gt;: Wrongly extracted TypeInformations for &lt;code&gt;WindowedStream::aggregate&lt;/code&gt;&lt;/li&gt;
  	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/FLINK-6775&quot;&gt;FLINK-6775&lt;/a&gt;: StateDescriptor cannot be shared by multiple subtasks&lt;/li&gt;
  &lt;/ul&gt; 
&lt;/div&gt;

# List of Contributors 

According to git shortlog, the following 103 people contributed to the 1.3.0 release. Thank you to all contributors!

Addison Higham, Alexey Diomin, Aljoscha Krettek, Andrea Sella, Andrey Melentyev, Anton Mushin, barcahead, biao.liub, Bowen Li, Chen Qin, Chico Sokol, David Anderson, Dawid Wysakowicz, DmytroShkvyra, Fabian Hueske, Fabian Wollert, fengyelei, Flavio Pompermaier, FlorianFan, Fokko Driesprong, Geoffrey Mon, godfreyhe, gosubpl, Greg Hogan, guowei.mgw, hamstah, Haohui Mai, Hequn Cheng, hequn.chq, heytitle, hongyuhong, Jamie Grier, Jark Wu, jingzhang, Jinkui Shi, Jin Mingjian, Joerg Schad, Joshua Griffith, Jürgen Thomann, kaibozhou, Kathleen Sharp, Ken Geis, kkloudas, Kurt Young, lincoln-lil, lingjinjiang, liuyuzhong7, Lorenz Buehmann, manuzhang, Marc Tremblay, Mauro Cortellazzi, Max Kuklinski, mengji.fy, Mike Dias, mtunique, Nico Kruber, Omar Erminy, Patrick Lucas, paul, phoenixjiangnan, rami-alisawi, Ramkrishna, Rick Cox, Robert Metzger, Rodrigo Bonifacio, rtudoran, Seth Wiesman, Shaoxuan Wang, shijinkui, shuai.xus, Shuyi Chen, spkavuly, Stefano Bortoli, Stefan Richter, Stephan Ewen, Stephen Gran, sunjincheng121, tedyu, Till Rohrmann, tonycox, Tony Wei, twalthr, Tzu-Li (Gordon) Tai, Ufuk Celebi, Ventura Del Monte, Vijay Srinivasaraghavan, WangTaoTheTonic, wenlong.lwl, xccui, xiaogang.sxg, Xpray, zcb, zentol, zhangminglei, Zhenghua Gao, Zhijiang, Zhuoluo Yang, zjureel, Zohar Mizrahi, 士远, 槿瑜, 淘江, 金竹

</description>
<pubDate>Thu, 01 Jun 2017 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/06/01/release-1.3.0.html</link>
<guid isPermaLink="true">/news/2017/06/01/release-1.3.0.html</guid>
</item>

<item>
<title>Introducing Docker Images for Apache Flink</title>
<description>For some time, the Apache Flink community has provided scripts to build a Docker image to run Flink. Now, starting with version 1.2.1, Flink will have a [Docker image](https://hub.docker.com/r/_/flink/) on the Docker Hub. This image is maintained by the Flink community and curated by the [Docker](https://github.com/docker-library/official-images) team to ensure it meets the quality standards for container images of the Docker community.

A community-maintained way to run Apache Flink on Docker and other container runtimes and orchestrators is part of the ongoing effort by the Flink community to make Flink a first-class citizen of the container world.

If you want to use the Docker image today you can get the latest version by running:

	docker pull flink

And to run a local Flink cluster with one TaskManager and the Web UI exposed on port 8081, run:

	docker run -t -p 8081:8081 flink local

With this image there are various ways to start a Flink cluster, both locally and in a distributed environment. Take a look at the [documentation](https://hub.docker.com/r/_/flink/) that shows how to run a Flink cluster with multiple TaskManagers locally using Docker Compose or across multiple machines using Docker Swarm. You can also use the examples as a reference to create configurations for other platforms like Mesos and Kubernetes.

While this announcement is an important milestone, it’s just the first step to help users run containerized Flink in production. There are [improvements](https://issues.apache.org/jira/issues/?jql=project%20%3D%20FLINK%20AND%20component%20%3D%20Docker%20AND%20resolution%20%3D%20Unresolved%20ORDER%20BY%20due%20ASC%2C%20priority%20DESC%2C%20created%20ASC) to be made in Flink itself and we will continue to improve these Docker images and for the documentation and examples surrounding them.

This is of course a team effort, so any contribution is welcome. The [docker-flink](https://github.com/docker-flink) GitHub organization hosts the source files to [generate the images](https://github.com/docker-flink/docker-flink) and the [documentation](https://github.com/docker-flink/docs/tree/master/flink) that is presented alongside the images on Docker Hub.

*Disclaimer: The docker images are provided as a community project by individuals on a best-effort basis. They are not official releases by the Apache Flink PMC.*</description>
<pubDate>Tue, 16 May 2017 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/05/16/official-docker-image.html</link>
<guid isPermaLink="true">/news/2017/05/16/official-docker-image.html</guid>
</item>

<item>
<title>Apache Flink 1.2.1 Released</title>
<description>The Apache Flink community released the first bugfix version of the Apache Flink 1.2 series.

This release includes many critical fixes for Flink 1.2.0. The list below includes a detailed list of all fixes.

We highly recommend all users to upgrade to Flink 1.2.1.

Please note that there are two unresolved major issues in Flink 1.2.1 and 1.2.0:

- [FLINK-6353](https://issues.apache.org/jira/browse/FLINK-6353) Restoring using CheckpointedRestoring does not work from 1.2 to 1.2
- [FLINK-6188](https://issues.apache.org/jira/browse/FLINK-6188) Some setParallelism() methods can&#39;t cope with default parallelism



```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.2.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.2.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.2.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).


&lt;h2&gt;Release Notes - Flink - Version 1.2.1&lt;/h2&gt;

    
&lt;h3&gt;        Sub-task
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5546&#39;&gt;FLINK-5546&lt;/a&gt;] -         java.io.tmpdir setted as project build directory in surefire plugin
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5640&#39;&gt;FLINK-5640&lt;/a&gt;] -         configure the explicit Unit Test file suffix
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5723&#39;&gt;FLINK-5723&lt;/a&gt;] -         Use &amp;quot;Used&amp;quot; instead of &amp;quot;Initial&amp;quot; to make taskmanager tag more readable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5825&#39;&gt;FLINK-5825&lt;/a&gt;] -         In yarn mode, a small pic can not be loaded
&lt;/li&gt;
&lt;/ul&gt;
                            
&lt;h3&gt;        Bug
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4813&#39;&gt;FLINK-4813&lt;/a&gt;] -         Having flink-test-utils as a dependency outside Flink fails the build
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4848&#39;&gt;FLINK-4848&lt;/a&gt;] -         keystoreFilePath should be checked against null in SSLUtils#createSSLServerContext
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5628&#39;&gt;FLINK-5628&lt;/a&gt;] -         CheckpointStatsTracker implements Serializable but isn&amp;#39;t
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5644&#39;&gt;FLINK-5644&lt;/a&gt;] -         Task#lastCheckpointSize metric broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5650&#39;&gt;FLINK-5650&lt;/a&gt;] -         Flink-python tests executing cost too long time
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5652&#39;&gt;FLINK-5652&lt;/a&gt;] -         Memory leak in AsyncDataStream
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5669&#39;&gt;FLINK-5669&lt;/a&gt;] -         flink-streaming-contrib DataStreamUtils.collect in local environment mode fails when offline
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5678&#39;&gt;FLINK-5678&lt;/a&gt;] -         User-defined TableFunctions do not support all types of parameters
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5699&#39;&gt;FLINK-5699&lt;/a&gt;] -         Cancel with savepoint fails with a NPE if savepoint target directory not set
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5701&#39;&gt;FLINK-5701&lt;/a&gt;] -         FlinkKafkaProducer should check asyncException on checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5708&#39;&gt;FLINK-5708&lt;/a&gt;] -         we should remove duplicated configuration options 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5732&#39;&gt;FLINK-5732&lt;/a&gt;] -         Java quick start mvn command line is incorrect
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5749&#39;&gt;FLINK-5749&lt;/a&gt;] -             unset HADOOP_HOME and HADOOP_CONF_DIR to avoid env in build machine failing the UT and IT
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5751&#39;&gt;FLINK-5751&lt;/a&gt;] -         404 in documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5771&#39;&gt;FLINK-5771&lt;/a&gt;] -         DelimitedInputFormat does not correctly handle multi-byte delimiters
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5773&#39;&gt;FLINK-5773&lt;/a&gt;] -         Cannot cast scala.util.Failure to org.apache.flink.runtime.messages.Acknowledge
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5806&#39;&gt;FLINK-5806&lt;/a&gt;] -         TaskExecutionState toString format have wrong key
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5814&#39;&gt;FLINK-5814&lt;/a&gt;] -         flink-dist creates wrong symlink when not used with cleaned before
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5817&#39;&gt;FLINK-5817&lt;/a&gt;] -         Fix test concurrent execution failure by test dir conflicts.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5828&#39;&gt;FLINK-5828&lt;/a&gt;] -         BlobServer create cache dir has concurrency safety problem
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5885&#39;&gt;FLINK-5885&lt;/a&gt;] -         Java code snippet instead of scala in documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5907&#39;&gt;FLINK-5907&lt;/a&gt;] -         RowCsvInputFormat bug on parsing tsv
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5934&#39;&gt;FLINK-5934&lt;/a&gt;] -         Scheduler in ExecutionGraph null if failure happens in ExecutionGraph.restoreLatestCheckpointedState
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5940&#39;&gt;FLINK-5940&lt;/a&gt;] -         ZooKeeperCompletedCheckpointStore cannot handle broken state handles
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5942&#39;&gt;FLINK-5942&lt;/a&gt;] -         Harden ZooKeeperStateHandleStore to deal with corrupted data
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5945&#39;&gt;FLINK-5945&lt;/a&gt;] -         Close function in OuterJoinOperatorBase#executeOnCollections
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5949&#39;&gt;FLINK-5949&lt;/a&gt;] -         Flink on YARN checks for Kerberos credentials for non-Kerberos authentication methods
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5962&#39;&gt;FLINK-5962&lt;/a&gt;] -         Cancel checkpoint canceller tasks in CheckpointCoordinator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5965&#39;&gt;FLINK-5965&lt;/a&gt;] -         Typo on DropWizard wrappers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5972&#39;&gt;FLINK-5972&lt;/a&gt;] -         Don&amp;#39;t allow shrinking merging windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5985&#39;&gt;FLINK-5985&lt;/a&gt;] -         Flink treats every task as stateful (making topology changes impossible)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6000&#39;&gt;FLINK-6000&lt;/a&gt;] -         Can not start HA cluster with start-cluster.sh
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6001&#39;&gt;FLINK-6001&lt;/a&gt;] -         NPE on TumblingEventTimeWindows with ContinuousEventTimeTrigger and allowedLateness
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6002&#39;&gt;FLINK-6002&lt;/a&gt;] -         Documentation: &amp;#39;MacOS X&amp;#39; under &amp;#39;Download and Start Flink&amp;#39; in Quickstart page is not rendered correctly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6006&#39;&gt;FLINK-6006&lt;/a&gt;] -         Kafka Consumer can lose state if queried partition list is incomplete on restore
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6025&#39;&gt;FLINK-6025&lt;/a&gt;] -         User code ClassLoader not used when KryoSerializer fallbacks to serialization for copying
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6051&#39;&gt;FLINK-6051&lt;/a&gt;] -         Wrong metric scope names in documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6084&#39;&gt;FLINK-6084&lt;/a&gt;] -         Cassandra connector does not declare all dependencies
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6133&#39;&gt;FLINK-6133&lt;/a&gt;] -         fix build status in README.md
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6170&#39;&gt;FLINK-6170&lt;/a&gt;] -         Some checkpoint metrics rely on latest stat snapshot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6181&#39;&gt;FLINK-6181&lt;/a&gt;] -         Zookeeper scripts use invalid regex
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6182&#39;&gt;FLINK-6182&lt;/a&gt;] -         Fix possible NPE in SourceStreamTask
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6183&#39;&gt;FLINK-6183&lt;/a&gt;] -         TaskMetricGroup may not be cleanup when Task.run() is never called or exits early
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6184&#39;&gt;FLINK-6184&lt;/a&gt;] -         Buffer metrics can cause NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6203&#39;&gt;FLINK-6203&lt;/a&gt;] -         DataSet Transformations
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6207&#39;&gt;FLINK-6207&lt;/a&gt;] -         Duplicate type serializers for async snapshots of CopyOnWriteStateTable
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6308&#39;&gt;FLINK-6308&lt;/a&gt;] -         Task managers are not attaching to job manager on macos
&lt;/li&gt;
&lt;/ul&gt;
                    
&lt;h3&gt;        Improvement
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4326&#39;&gt;FLINK-4326&lt;/a&gt;] -         Flink start-up scripts should optionally start services on the foreground
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5217&#39;&gt;FLINK-5217&lt;/a&gt;] -         Deprecated interface Checkpointed make clear suggestion
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5331&#39;&gt;FLINK-5331&lt;/a&gt;] -         PythonPlanBinderTest idling extremely long
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5581&#39;&gt;FLINK-5581&lt;/a&gt;] -         Improve Kerberos security related documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5639&#39;&gt;FLINK-5639&lt;/a&gt;] -         Clarify License implications of RabbitMQ Connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5680&#39;&gt;FLINK-5680&lt;/a&gt;] -         Document env.ssh.opts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5681&#39;&gt;FLINK-5681&lt;/a&gt;] -         Make ReaperThread for SafetyNetCloseableRegistry a singleton
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5702&#39;&gt;FLINK-5702&lt;/a&gt;] -         Kafka Producer docs should warn if using setLogFailuresOnly, at-least-once is compromised
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5705&#39;&gt;FLINK-5705&lt;/a&gt;] -         webmonitor&amp;#39;s request/response use UTF-8 explicitly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5713&#39;&gt;FLINK-5713&lt;/a&gt;] -         Protect against NPE in WindowOperator window cleanup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5721&#39;&gt;FLINK-5721&lt;/a&gt;] -         Add FoldingState to State Documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5800&#39;&gt;FLINK-5800&lt;/a&gt;] -         Make sure that the CheckpointStreamFactory is instantiated once per operator only
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5805&#39;&gt;FLINK-5805&lt;/a&gt;] -         improve docs for ProcessFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5807&#39;&gt;FLINK-5807&lt;/a&gt;] -         improved wording for doc home page
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5837&#39;&gt;FLINK-5837&lt;/a&gt;] -         improve readability of the queryable state docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5876&#39;&gt;FLINK-5876&lt;/a&gt;] -         Mention Scala type fallacies for queryable state client serializers
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5877&#39;&gt;FLINK-5877&lt;/a&gt;] -         Fix Scala snippet in Async I/O API doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5894&#39;&gt;FLINK-5894&lt;/a&gt;] -         HA docs are misleading re: state backends
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5895&#39;&gt;FLINK-5895&lt;/a&gt;] -         Reduce logging aggressiveness of FileSystemSafetyNet
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5938&#39;&gt;FLINK-5938&lt;/a&gt;] -         Replace ExecutionContext by Executor in Scheduler
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6212&#39;&gt;FLINK-6212&lt;/a&gt;] -         Missing reference to flink-avro dependency
&lt;/li&gt;
&lt;/ul&gt;
                
&lt;h3&gt;        New Feature
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6139&#39;&gt;FLINK-6139&lt;/a&gt;] -         Documentation for building / preparing Flink for MapR
&lt;/li&gt;
&lt;/ul&gt;
                                                        
&lt;h3&gt;        Task
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2883&#39;&gt;FLINK-2883&lt;/a&gt;] -         Add documentation to forbid key-modifying ReduceFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3903&#39;&gt;FLINK-3903&lt;/a&gt;] -         Homebrew Installation
&lt;/li&gt;
&lt;/ul&gt;
                    </description>
<pubDate>Wed, 26 Apr 2017 18:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/04/26/release-1.2.1.html</link>
<guid isPermaLink="true">/news/2017/04/26/release-1.2.1.html</guid>
</item>

<item>
<title>Continuous Queries on Dynamic Tables</title>
<description>#### Analyzing Data Streams with SQL

More and more companies are adopting stream processing and are migrating existing batch applications to streaming or implementing streaming solutions for new use cases. Many of those applications focus on analyzing streaming data. The data streams that are analyzed come from a wide variety of sources such as database transactions, clicks, sensor measurements, or IoT devices. 

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/streams.png&quot; style=&quot;width:45%;margin:10px&quot;&gt;
&lt;/center&gt;

Apache Flink is very well suited to power streaming analytics applications because it provides support for event-time semantics, stateful exactly-once processing, and achieves high throughput and low latency at the same time. Due to these features, Flink is able to compute exact and deterministic results from high-volume input streams in near real-time while providing exactly-once semantics in case of failures.

Flink&#39;s core API for stream processing, the [DataStream API](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/datastream_api.html), is very expressive and provides primitives for many common operations. Among other features, it offers highly customizable windowing logic, different state primitives with varying performance characteristics, hooks to register and react on timers, and tooling for efficient asynchronous requests to external systems. On the other hand, many stream analytics applications follow similar patterns and do not require the level of expressiveness as provided by the DataStream API. They could be expressed in a more natural and concise way using a domain specific language. As we all know, SQL is the de-facto standard for data analytics. For streaming analytics, SQL would enable a larger pool of people to specify applications on data streams in less time. However, no open source stream processor offers decent SQL support yet.

## Why is SQL on Streams a Big Deal?

SQL is the most widely used language for data analytics for many good reasons:

- SQL is declarative: You specify what you want but not how to compute it.
- SQL can be effectively optimized: An optimizer figures out an efficient plan to compute your result.
- SQL can be efficiently evaluated: The processing engine knows exactly what to compute and how to do so efficiently.
- And finally, everybody knows and many tools speak SQL.

So being able to process and analyze data streams with SQL makes stream processing technology available to many more users. Moreover, it significantly reduces the time and effort to define efficient stream analytics applications due to the SQL&#39;s declarative nature and potential to be automatically optimized.

However, SQL (and the relational data model and algebra) were not designed with streaming data in mind. Relations are (multi-)sets and not infinite sequences of tuples. When executing a SQL query, conventional database systems and query engines read and process a data set, which is completely available, and produce a fixed sized result. In contrast, data streams continuously provide new records such that data arrives over time. Hence, streaming queries have to continuously process the arriving data and never &quot;complete&quot;.

That being said, processing streams with SQL is not impossible. Some relational database systems feature eager maintenance of materialized views, which is similar to evaluating SQL queries on streams of data. A materialized view is defined as a SQL query just like a regular (virtual) view. However, the result of the query is actually stored (or materialized) in memory or on disk such that the view does not need to be computed on-the-fly when it is queried. In order to prevent that a materialized view becomes stale, the database system needs to update the view whenever its base relations (the tables referenced in its definition query) are modified. If we consider the changes on the view&#39;s base relations as a stream of modifications (or as a changelog stream) it becomes obvious that materialized view maintenance and SQL on streams are somehow related.

## Flink&#39;s Relational APIs: Table API and SQL

Since version 1.1.0 (released in August 2016), Flink features two semantically equivalent relational APIs, the language-embedded Table API (for Java and Scala) and standard SQL. Both APIs are designed as unified APIs for online streaming and historic batch data. This means that,

***a query produces exactly the same result regardless whether its input is static batch data or streaming data.***

Unified APIs for stream and batch processing are important for several reasons. First of all, users only need to learn a single API to process static and streaming data. Moreover, the same query can be used to analyze batch and streaming data, which allows to jointly analyze historic and live data in the same query. At the current state we haven&#39;t achieved complete unification of batch and streaming semantics yet, but the community is making very good progress towards this goal.

The following code snippet shows two equivalent Table API and SQL queries that compute a simple windowed aggregate on a stream of temperature sensor measurements. The syntax of the SQL query is based on [Apache Calcite&#39;s](https://calcite.apache.org) syntax for [grouped window functions](https://calcite.apache.org/docs/reference.html#grouped-window-functions) and will be supported in version 1.3.0 of Flink.

```scala
val env = StreamExecutionEnvironment.getExecutionEnvironment
env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)

val tEnv = TableEnvironment.getTableEnvironment(env)

// define a table source to read sensor data (sensorId, time, room, temp)
val sensorTable = ??? // can be a CSV file, Kafka topic, database, or ...
// register the table source
tEnv.registerTableSource(&quot;sensors&quot;, sensorTable)

// Table API
val tapiResult: Table = tEnv.scan(&quot;sensors&quot;)   // scan sensors table
 .window(Tumble over 1.hour on &#39;rowtime as &#39;w) // define 1-hour window
 .groupBy(&#39;w, &#39;room)                           // group by window and room
 .select(&#39;room, &#39;w.end, &#39;temp.avg as &#39;avgTemp) // compute average temperature

// SQL
val sqlResult: Table = tEnv.sql(&quot;&quot;&quot;
 |SELECT room, TUMBLE_END(rowtime, INTERVAL &#39;1&#39; HOUR), AVG(temp) AS avgTemp
 |FROM sensors
 |GROUP BY TUMBLE(rowtime, INTERVAL &#39;1&#39; HOUR), room
 |&quot;&quot;&quot;.stripMargin)
```

As you can see, both APIs are tightly integrated with each other and Flink&#39;s primary [DataStream](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/datastream_api.html) and [DataSet](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/batch/index.html) APIs. A `Table` can be generated from and converted to a `DataSet` or `DataStream`. Hence, it is easily possible to scan an external table source such as a database or [Parquet](https://parquet.apache.org) file, do some preprocessing with a Table API query, convert the result into a `DataSet` and run a [Gelly](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/libs/gelly/index.html) graph algorithm on it. The queries defined in the example above can also be used to process batch data by changing the execution environment.

Internally, both APIs are translated into the same logical representation, optimized by Apache Calcite, and compiled into DataStream or DataSet programs. In fact, the optimization and translation process does not know whether a query was defined using the Table API or SQL. If you are curious about the details of the optimization process, have a look at [a blog post](http://flink.apache.org/news/2016/05/24/stream-sql.html) that we published last year. Since the Table API and SQL are equivalent in terms of semantics and only differ in syntax, we always refer to both APIs when we talk about SQL in this post.

In its current state (version 1.2.0), Flink&#39;s relational APIs support a limited set of relational operators on data streams, including projections, filters, and windowed aggregates. All supported operators have in common that they never update result records which have been emitted. This is clearly not an issue for record-at-a-time operators such as projection and filter. However, it affects operators that collect and process multiple records as for instance windowed aggregates. Since emitted results cannot be updated, input records, which arrive after a result has been emitted, have to be discarded in Flink 1.2.0.

The limitations of the current version are acceptable for applications that emit data to storage systems such as Kafka topics, message queues, or files which only support append operations and no updates or deletes. Common use cases that follow this pattern are for example continuous ETL and stream archiving applications that persist streams to an archive or prepare data for further online (streaming) analysis or later offline analysis. Since it is not possible to update previously emitted results, these kinds of applications have to make sure that the emitted results are correct and will not need to be corrected in the future. The following figure illustrates such applications.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/query-append-out.png&quot; style=&quot;width:60%;margin:10px&quot;&gt;
&lt;/center&gt;

While queries that only support appends are useful for some kinds of applications and certain types of storage systems, there are many streaming analytics use cases that need to update results. This includes streaming applications that cannot discard late arriving records, need early results for (long-running) windowed aggregates, or require non-windowed aggregates. In each of these cases, previously emitted result records need to be updated. Result-updating queries often materialize their result to an external database or key-value store in order to make it accessible and queryable for external applications. Applications that implement this pattern are dashboards, reporting applications, or [other applications](http://2016.flink-forward.org/kb_sessions/joining-infinity-windowless-stream-processing-with-flink/), which require timely access to continuously updated results. The following figure illustrates these kind of applications.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/query-update-out.png&quot; style=&quot;width:60%;margin:10px&quot;&gt;
&lt;/center&gt;

## Continuous Queries on Dynamic Tables

Support for queries that update previously emitted results is the next big step for Flink&#39;s relational APIs. This feature is so important because it vastly increases the scope of the APIs and the range of supported use cases. Moreover, many of the newly supported use cases can be challenging to implement using the DataStream API. 

So when adding support for result-updating queries, we must of course preserve the unified semantics for stream and batch inputs. We achieve this by the concept of *Dynamic Tables*. A dynamic table is a table that is continuously updated and can be queried like a regular, static table. However, in contrast to a query on a batch table which terminates and returns a static table as result, a query on a dynamic table runs continuously and produces a table that is continuously updated depending on the modification on the input table. Hence, the resulting table is a dynamic table as well. This concept is very similar to materialized view maintenance as we discussed before. 

Assuming we can run queries on dynamic tables which produce new dynamic tables, the next question is, How do streams and dynamic tables relate to each other? The answer is that streams can be converted into dynamic tables and dynamic tables can be converted into streams. The following figure shows the conceptual model of processing a relational query on a stream.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/stream-query-stream.png&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;

First, the stream is converted into a dynamic table. The dynamic table is queried with a continuous query, which produces a new dynamic table. Finally, the resulting table is converted back into a stream. It is important to note that this is only the logical model and does not imply how the query is actually executed. In fact, a continuous query is internally translated into a conventional DataStream program.

In the following, we describe the different steps of this model:

1. Defining a dynamic table on a stream, 
2. Querying a dynamic table, and 
3. Emitting a dynamic table.

## Defining a Dynamic Table on a Stream

The first step of evaluating a SQL query on a dynamic table is to define a dynamic table on a stream. This means we have to specify how the records of a stream modify the dynamic table. The stream must carry records with a schema that is mapped to the relational schema of the table. There are two modes to define a dynamic table on a stream: *Append Mode* and *Update Mode*. 

In append mode each stream record is an insert modification to the dynamic table. Hence, all records of a stream are appended to the dynamic table such that it is ever-growing and infinite in size. The following figure illustrates the append mode.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/append-mode.png&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;

In update mode a stream record can represent an insert, update, or delete modification on the dynamic table (append mode is in fact a special case of update mode). When defining a dynamic table on a stream via update mode, we can specify a unique key attribute on the table. In that case, update and delete operations are performed with respect to the key attribute. The update mode is visualized in the following figure.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/replace-mode.png&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;

## Querying a Dynamic Table

Once we have defined a dynamic table, we can run a query on it. Since dynamic tables change over time, we have to define what it means to query a dynamic table. Let&#39;s imagine we take a snapshot of a dynamic table at a specific point in time. This snapshot can be treated as a regular static batch table. We denote a snapshot of a dynamic table *A* at a point *t* as *A[t]*. The snapshot can be queried with any SQL query. The query produces a regular static table as result. We denote the result of a query *q* on a dynamic table *A* at time *t* as *q(A[t])*. If we repeatedly compute the result of a query on snapshots of a dynamic table for progressing points in time, we obtain many static result tables which are changing over time and effectively constitute a dynamic table. We define the semantics of a query on a dynamic table as follows. 

A query *q* on a dynamic table *A* produces a dynamic table *R*, which is at each point in time *t* equivalent to the result of applying *q* on *A[t]*, i.e., *R[t] = q(A[t])*. This definition implies that running the same query on *q* on a batch table and on a streaming table produces the same result. In the following, we show two examples to illustrate the semantics of queries on dynamic tables. 

In the figure below, we see a dynamic input table *A* on the left side, which is defined in append mode. At time *t = 8*, *A* consists of six rows (colored in blue). At time *t = 9* and *t = 12*, one row is appended to *A* (visualized in green and orange, respectively). We run a simple query on table *A* which is shown in the center of the figure. The query groups by attribute *k* and counts the records per group. On the right hand side we see the result of query *q* at time *t = 8* (blue), *t = 9* (green), and *t = 12* (orange). At each point in time t, the result table is equivalent to a batch query on the dynamic table *A* at time *t*.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/query-groupBy-cnt.png&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;

The query in this example is a simple grouped (but not windowed) aggregation query. Hence, the size of the result table depends on the number of distinct grouping keys of the input table. Moreover, it is worth noticing that the query continuously updates result rows that it had previously emitted instead of merely adding new rows.

The second example shows a similar query which differs in one important aspect. In addition to grouping on the key attribute *k*, the query also groups records into tumbling windows of five seconds, which means that it computes a count for each value of *k* every five seconds. Again, we use Calcite&#39;s [group window functions](https://calcite.apache.org/docs/reference.html#grouped-window-functions) to specify this query. On the left side of the figure we see the input table *A* and how it changes over time in append mode. On the right we see the result table and how it evolves over time.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/query-groupBy-window-cnt.png&quot; style=&quot;width:80%;margin:10px&quot;&gt;
&lt;/center&gt;

In contrast to the result of the first example, the resulting table grows relative to the time, i.e., every five seconds new result rows are computed (given that the input table received more records in the last five seconds). While the non-windowed query (mostly) updates rows of the result table, the windowed aggregation query only appends new rows to the result table.

Although this blog post focuses on the semantics of SQL queries on dynamic tables and not on how to efficiently process such a query, we&#39;d like to point out that it is not possible to compute the complete result of a query from scratch whenever an input table is updated. Instead, the query is compiled into a streaming program which continuously updates its result based on the changes on its input. This implies that not all valid SQL queries are supported but only those that can be continuously, incrementally, and efficiently computed. We plan discuss details about the evaluation of SQL queries on dynamic tables in a follow up blog post. 

## Emitting a Dynamic Table

Querying a dynamic table yields another dynamic table, which represents the query&#39;s results. Depending on the query and its input tables, the result table is continuously modified by insert, update, and delete changes just like a regular database table. It might be a table with a single row, which is constantly updated, an insert-only table without update modifications, or anything in between.

Traditional database systems use logs to rebuild tables in case of failures and for replication. There are different logging techniques, such as UNDO, REDO, and UNDO/REDO logging. In a nutshell, UNDO logs record the previous value of a modified element to revert incomplete transactions, REDO logs record the new value of a modified element to redo lost changes of completed transactions, and UNDO/REDO logs record the old and the new value of a changed element to undo incomplete transactions and redo lost changes of completed transactions. Based on the principles of these logging techniques, a dynamic table can be converted into two types of changelog streams, a *REDO Stream* and a *REDO+UNDO Stream*. 

A dynamic table is converted into a redo+undo stream by converting the modifications on the table into stream messages. An insert modification is emitted as an insert message with the new row, a delete modification is emitted as a delete message with the old row, and an update modification is emitted as a delete message with the old row and an insert message with the new row. This behavior is illustrated in the following figure.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/undo-redo-mode.png&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;

The left shows a dynamic table which is maintained in append mode and serves as input to the query in the center. The result of the query converted into a redo+undo stream which is shown at the bottom. The first record *(1, A)* of the input table results in a new record in the result table and hence in an insert message *+(A, 1)* to the stream. The second input record with *k = &#39;A&#39;* *(4, A)* produces an update of the *(A, 1)* record in the result table and hence yields a delete message *-(A, 1)* and an insert message for *+(A, 2)*. All downstream operators or data sinks need to be able to correctly handle both types of messages. 

A dynamic table can be converted into a redo stream in two cases: either it is an append-only table (i.e., it only has insert modifications) or it has a unique key attribute. Each insert modification on the dynamic table results in an insert message with the new row to the redo stream. Due to the restriction of redo streams, only tables with unique keys can have update and delete modifications. If a key is removed from the keyed dynamic table, either because a row is deleted or because the key attribute of a row was modified, a delete message with the removed key is emitted to the redo stream. An update modification yields an update message with the updating, i.e., new row. Since delete and update modifications are defined with respect to the unique key, the downstream operators need to be able to access previous values by key. The figure below shows how the result table of the same query as above is converted into a redo stream.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/dynamic-tables/redo-mode.png&quot; style=&quot;width:70%;margin:10px&quot;&gt;
&lt;/center&gt;

The row *(1, A)* which yields an insert into the dynamic table results in the *+(A, 1)* insert message. The row *(4, A)* which produces an update yields the **(A, 2)* update message.

Common use cases for redo streams are to write the result of a query to an append-only storage system, like rolling files or a Kafka topic, or to a data store with keyed access, such as Cassandra, a relational DBMS, or a compacted Kafka topic. It is also possible to materialize a dynamic table as keyed state inside of the streaming application that evaluates the continuous query and make it queryable from external systems. With this design Flink itself maintains the result of a continuous SQL query on a stream and serves key lookups on the result table, for instance from a dashboard application.

## What will Change When Switching to Dynamic Tables?

In version 1.2, all streaming operators of Flink&#39;s relational APIs, like filter, project, and group window aggregates, only emit new rows and are not capable of updating previously emitted results. In contrast, dynamic table are able to handle update and delete modifications. Now you might ask yourself, How does the processing model of the current version relate to the new dynamic table model? Will the semantics of the APIs completely change and do we need to reimplement the APIs from scratch to achieve the desired semantics?

The answer to all these questions is simple. The current processing model is a subset of the dynamic table model. Using the terminology we introduced in this post, the current model converts a stream into a dynamic table in append mode, i.e., an infinitely growing table. Since all operators only accept insert changes and produce insert changes on their result table (i.e., emit new rows), all supported queries result in dynamic append tables, which are converted back into DataStreams using the redo model for append-only tables. Consequently, the semantics of the current model are completely covered and preserved by the new dynamic table model. 

## Conclusion and Outlook

Flink&#39;s relational APIs are great to implement stream analytics applications in no time and used in several production settings. In this blog post we discussed the future of the Table API and SQL. This effort will make Flink and stream processing accessible to more people. Moreover, the unified semantics for querying historic and real-time data as well as the concept of querying and maintaining dynamic tables will enable and significantly ease the implementation of many exciting use cases and applications. As this post was focusing on the semantics of relational queries on streams and dynamic tables, we did not discuss the details of how a query will be executed, which includes the internal implementation of retractions, handling of late events, support for early results, and bounding space requirements. We plan to publish a follow up blog post on this topic at a later point in time.

In recent months, many members of the Flink community have been discussing and contributing to the relational APIs. We made great progress so far. While most work has focused on processing streams in append mode, the next steps on the agenda are to work on dynamic tables to support queries that update their results. If you are excited about the idea of processing streams with SQL and would like to contribute to this effort, please give feedback, join the discussions on the mailing list, or grab a JIRA issue to work on.
</description>
<pubDate>Tue, 04 Apr 2017 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/04/04/dynamic-tables.html</link>
<guid isPermaLink="true">/news/2017/04/04/dynamic-tables.html</guid>
</item>

<item>
<title>From Streams to Tables and Back Again: An Update on Flink&#39;s Table &amp; SQL API</title>
<description>Stream processing can deliver a lot of value. Many organizations have recognized the benefit of managing large volumes of data in real-time, reacting quickly to trends, and providing customers with live services at scale. Streaming applications with well-defined business logic can deliver a competitive advantage.

Flink&#39;s [DataStream](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/datastream_api.html) abstraction is a powerful API which lets you flexibly define both basic and complex streaming pipelines. Additionally, it offers low-level operations such as [Async IO](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/stream/asyncio.html) and [ProcessFunctions](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/stream/process_function.html). However, many users do not need such a deep level of flexibility. They need an API which quickly solves 80% of their use cases where simple tasks can be defined using little code.

To deliver the power of stream processing to a broader set of users, the Apache Flink community is developing APIs that provide simpler abstractions and more concise syntax so that users can focus on their business logic instead of advanced streaming concepts. Along with other APIs (such as [CEP](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/libs/cep.html) for complex event processing on streams), Flink offers a relational API that aims to unify stream and batch processing: the [Table &amp; SQL API](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/table_api.html), often referred to as the Table API.

Recently, contributors working for companies such as Alibaba, Huawei, data Artisans, and more decided to further develop the Table API. Over the past year, the Table API has been rewritten entirely. Since Flink 1.1, its core has been based on [Apache Calcite](http://calcite.apache.org/), which parses SQL and optimizes all relational queries. Today, the Table API can address a wide range of use cases in both batch and stream environments with unified semantics.

This blog post summarizes the current status of Flink’s Table API and showcases some of the recently-added features in Apache Flink. Among the features presented here are the unified access to batch and streaming data, data transformation, and window operators.
The following paragraphs are not only supposed to give you a general overview of the Table API, but also to illustrate the potential of relational APIs in the future.

Because the Table API is built on top of Flink’s core APIs, [DataStreams](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/datastream_api.html) and [DataSets](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/batch/index.html) can be converted to a Table and vice-versa without much overhead. Hereafter, we show how to create tables from different sources and specify programs that can be executed locally or in a distributed setting. In this post, we will use the Scala version of the Table API, but there is also a Java version as well as a SQL API with an equivalent set of features.

## Data Transformation and ETL

A common task in every data processing pipeline is importing data from one or multiple systems, applying some transformations to it, then exporting the data to another system. The Table API can help to manage these recurring tasks. For reading data, the API provides a set of ready-to-use `TableSources` such as a `CsvTableSource` and `KafkaTableSource`, however, it also allows the implementation of custom `TableSources` that can hide configuration specifics (e.g. watermark generation) from users who are less familiar with streaming concepts.

Let’s assume we have a CSV file that stores customer information. The values are delimited by a “\|”-character and contain a customer identifier, name, timestamp of the last update, and preferences encoded in a comma-separated key-value string:

    42|Bob Smith|2016-07-23 16:10:11|color=12,length=200,size=200

The following example illustrates how to read a CSV file and perform some data cleansing before converting it to a regular DataStream program.

```scala
// set up execution environment
val env = StreamExecutionEnvironment.getExecutionEnvironment
val tEnv = TableEnvironment.getTableEnvironment(env)

// configure table source
val customerSource = CsvTableSource.builder()
  .path(&quot;/path/to/customer_data.csv&quot;)
  .ignoreFirstLine()
  .fieldDelimiter(&quot;|&quot;)
  .field(&quot;id&quot;, Types.LONG)
  .field(&quot;name&quot;, Types.STRING)
  .field(&quot;last_update&quot;, Types.TIMESTAMP)
  .field(&quot;prefs&quot;, Types.STRING)
  .build()

// name your table source
tEnv.registerTableSource(&quot;customers&quot;, customerSource)

// define your table program
val table = tEnv
  .scan(&quot;customers&quot;)
  .filter(&#39;name.isNotNull &amp;&amp; &#39;last_update &gt; &quot;2016-01-01 00:00:00&quot;.toTimestamp)
  .select(&#39;id, &#39;name.lowerCase(), &#39;prefs)

// convert it to a data stream
val ds = table.toDataStream[Row]

ds.print()
env.execute()
```

The Table API comes with a large set of built-in functions that make it easy to specify  business logic using a language integrated query (LINQ) syntax. In the example above, we filter out customers with invalid names and only select those that updated their preferences recently. We convert names to lowercase for normalization. For debugging purposes, we convert the table into a DataStream and print it.

The `CsvTableSource` supports both batch and stream environments. If the programmer wants to execute the program above in a batch application, all he or she has to do is to replace the environment via `ExecutionEnvironment` and change the output conversion from `DataStream` to `DataSet`. The Table API program itself doesn’t change.

In the example, we converted the table program to a data stream of `Row` objects. However, we are not limited to row data types. The Table API supports all types from the underlying APIs such as Java and Scala Tuples, Case Classes, POJOs, or generic types that are serialized using Kryo. Let’s assume that we want to have regular object (POJO) with the following format instead of generic rows:

```scala
class Customer {
  var id: Int = _
  var name: String = _
  var update: Long = _
  var prefs: java.util.Properties = _
}
```
We can use the following table program to convert the CSV file into Customer objects. Flink takes care of creating objects and mapping fields for us.

```scala
val ds = tEnv
  .scan(&quot;customers&quot;)
  .select(&#39;id, &#39;name, &#39;last_update as &#39;update, parseProperties(&#39;prefs) as &#39;prefs)
  .toDataStream[Customer]
```

You might have noticed that the query above uses a function to parse the preferences field. Even though Flink’s Table API is shipped with a large set of built-in functions, is often necessary to define custom user-defined scalar functions. In the above example we use a user-defined function `parseProperties`. The following code snippet shows how easily we can implement a scalar function.

```scala
object parseProperties extends ScalarFunction {
  def eval(str: String): Properties = {
    val props = new Properties()
    str
      .split(&quot;,&quot;)
      .map(\_.split(&quot;=&quot;))
      .foreach(split =&gt; props.setProperty(split(0), split(1)))
    props
  }
}
```

Scalar functions can be used to deserialize, extract, or convert values (and more). By overwriting the `open()` method we can even have access to runtime information such as distributed cached files or metrics. Even the `open()` method is only called once during the runtime’s [task lifecycle](https://ci.apache.org/projects/flink/flink-docs-release-1.3/internals/task_lifecycle.html).

## Unified Windowing for Static and Streaming Data

Another very common task, especially when working with continuous data, is the definition of windows to split a stream into pieces of finite size, over which we can apply computations. At the moment, the Table API supports three types of windows: sliding windows, tumbling windows, and session windows (for general definitions of the different types of windows, we recommend [Flink’s documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/windows.html)). All three window types work on [event or processing time](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/event_time.html). Session windows can be defined over time intervals, sliding and tumbling windows can be defined over time intervals or a number of rows.

Let’s assume that our customer data from the example above is an event stream of updates generated whenever the customer updated his or her preferences. We assume that events come from a TableSource that has assigned timestamps and watermarks. The definition of a window happens again in a LINQ-style fashion. The following example could be used to count the updates to the preferences during one day.

```scala
table
  .window(Tumble over 1.day on &#39;rowtime as &#39;w)
  .groupBy(&#39;id, &#39;w)
  .select(&#39;id, &#39;w.start as &#39;from, &#39;w.end as &#39;to, &#39;prefs.count as &#39;updates)
```

By using the `on()` parameter, we can specify whether the window is supposed to work on event-time or not. The Table API assumes that timestamps and watermarks are assigned correctly when using event-time. Elements with timestamps smaller than the last received watermark are dropped. Since the extraction of timestamps and generation of watermarks depends on the data source and requires some deeper knowledge of their origin, the TableSource or the upstream DataStream is usually responsible for assigning these properties.

The following code shows how to define other types of windows:

```scala
// using processing-time
table.window(Tumble over 100.rows as &#39;manyRowWindow)
// using event-time
table.window(Session withGap 15.minutes on &#39;rowtime as &#39;sessionWindow)
table.window(Slide over 1.day every 1.hour on &#39;rowtime as &#39;dailyWindow)
```

Since batch is just a special case of streaming (where a batch happens to have a defined start and end point), it is also possible to apply all of these windows in a batch execution environment. Without any modification of the table program itself, we can run the code on a DataSet given that we specified a column named “rowtime”. This is particularly interesting if we want to compute exact results from time-to-time, so that late events that are heavily out-of-order can be included in the computation.

At the moment, the Table API only supports so-called “group windows” that also exist in the DataStream API. Other windows such as SQL’s OVER clause windows are in development and [planned for Flink 1.3](https://cwiki.apache.org/confluence/display/FLINK/FLIP-11%3A+Table+API+Stream+Aggregations).

In order to demonstrate the expressiveness and capabilities of the API, here’s a snippet with a more advanced example of an exponentially decaying moving average over a sliding window of one hour which returns aggregated results every second. The table program weighs recent orders more heavily than older orders. This example is borrowed from [Apache Calcite](https://calcite.apache.org/docs/stream.html#hopping-windows) and shows what will be possible in future Flink releases for both the Table API and SQL.

```scala
table
  .window(Slide over 1.hour every 1.second as &#39;w)
  .groupBy(&#39;productId, &#39;w)
  .select(
    &#39;w.end,
    &#39;productId,
    (&#39;unitPrice * (&#39;rowtime - &#39;w.start).exp() / 1.hour).sum / ((&#39;rowtime - &#39;w.start).exp() / 1.hour).sum)
```

## User-defined Table Functions

[User-defined table functions](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/table_api.html#user-defined-table-functions) were added in Flink 1.2. These can be quite useful for table columns containing non-atomic values which need to be extracted and mapped to separate fields before processing. Table functions take an arbitrary number of scalar values and allow for returning an arbitrary number of rows as output instead of a single value, similar to a flatMap function in the DataStream or DataSet API. The output of a table function can then be joined with the original row in the table by using either a left-outer join or cross join.

Using the previously-mentioned customer table, let’s assume we want to produce a table that contains the color and size preferences as separate columns. The table program would look like this:

```scala
// create an instance of the table function
val extractPrefs = new PropertiesExtractor()

// derive rows and join them with original row
table
  .join(extractPrefs(&#39;prefs) as (&#39;color, &#39;size))
  .select(&#39;id, &#39;username, &#39;color, &#39;size)
```

The `PropertiesExtractor` is a user-defined table function that extracts the color and size. We are not interested in customers that haven’t set these preferences and thus don’t emit anything if both properties are not present in the string value. Since we are using a (cross) join in the program, customers without a result on the right side of the join will be filtered out.

```scala
class PropertiesExtractor extends TableFunction[Row] {
  def eval(prefs: String): Unit = {
    // split string into (key, value) pairs
    val pairs = prefs
      .split(&quot;,&quot;)
      .map { kv =&gt;
        val split = kv.split(&quot;=&quot;)
        (split(0), split(1))
      }

    val color = pairs.find(\_.\_1 == &quot;color&quot;).map(\_.\_2)
    val size = pairs.find(\_.\_1 == &quot;size&quot;).map(\_.\_2)

    // emit a row if color and size are specified
    (color, size) match {
      case (Some(c), Some(s)) =&gt; collect(Row.of(c, s))
      case _ =&gt; // skip
    }
  }

  override def getResultType = new RowTypeInfo(Types.STRING, Types.STRING)
}
```

## Conclusion

There is significant interest in making streaming more accessible and easier to use. Flink’s Table API development is happening quickly, and we believe that soon, you will be able to implement large batch or streaming pipelines using purely relational APIs or even convert existing Flink jobs to table programs. The Table API is already a very useful tool since you can work around limitations and missing features at any time by switching back-and-forth between the DataSet/DataStream abstraction to the Table abstraction.

Contributions like support of Apache Hive UDFs, external catalogs, more TableSources, additional windows, and more operators will make the Table API an even more useful tool. Particularly, the upcoming introduction of Dynamic Tables, which is worth a blog post of its own, shows that even in 2017, new relational APIs open the door to a number of possibilities.

Try it out, or even better, join the design discussions on the [mailing lists](http://flink.apache.org/community.html#mailing-lists) and [JIRA](https://issues.apache.org/jira/browse/FLINK/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel) and start contributing!
</description>
<pubDate>Wed, 29 Mar 2017 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/03/29/table-sql-api-update.html</link>
<guid isPermaLink="true">/news/2017/03/29/table-sql-api-update.html</guid>
</item>

<item>
<title>Apache Flink 1.1.5 Released</title>
<description>The Apache Flink community released the next bugfix version of the Apache Flink 1.1 series.

This release includes critical fixes for HA recovery robustness, fault tolerance
guarantees of the Flink Kafka Connector, as well as classloading issues with the Kryo serializer.
We highly recommend all users to upgrade to Flink 1.1.5.

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.1.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.5&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

## Release Notes - Flink - Version 1.1.5

### Bug
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5701&#39;&gt;FLINK-5701&lt;/a&gt;] -         FlinkKafkaProducer should check asyncException on checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6006&#39;&gt;FLINK-6006&lt;/a&gt;] -         Kafka Consumer can lose state if queried partition list is incomplete on restore
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5940&#39;&gt;FLINK-5940&lt;/a&gt;] -         ZooKeeperCompletedCheckpointStore cannot handle broken state handles
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5942&#39;&gt;FLINK-5942&lt;/a&gt;] -         Harden ZooKeeperStateHandleStore to deal with corrupted data
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-6025&#39;&gt;FLINK-6025&lt;/a&gt;] -         User code ClassLoader not used when KryoSerializer fallbacks to serialization for copying
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5945&#39;&gt;FLINK-5945&lt;/a&gt;] -         Close function in OuterJoinOperatorBase#executeOnCollections
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5934&#39;&gt;FLINK-5934&lt;/a&gt;] -         Scheduler in ExecutionGraph null if failure happens in ExecutionGraph.restoreLatestCheckpointedState
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5771&#39;&gt;FLINK-5771&lt;/a&gt;] -         DelimitedInputFormat does not correctly handle multi-byte delimiters
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5647&#39;&gt;FLINK-5647&lt;/a&gt;] -         Fix RocksDB Backend Cleanup
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2662&#39;&gt;FLINK-2662&lt;/a&gt;] -         CompilerException: &quot;Bug: Plan generation for Unions picked a ship strategy between binary plan operators.&quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5585&#39;&gt;FLINK-5585&lt;/a&gt;] -         NullPointer Exception in JobManager.updateAccumulators
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5484&#39;&gt;FLINK-5484&lt;/a&gt;] -         Add test for registered Kryo types
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5518&#39;&gt;FLINK-5518&lt;/a&gt;] -         HadoopInputFormat throws NPE when close() is called before open()
&lt;/li&gt;
&lt;/ul&gt;

### Improvement
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5575&#39;&gt;FLINK-5575&lt;/a&gt;] -         in old releases, warn users and guide them to the latest stable docs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5639&#39;&gt;FLINK-5639&lt;/a&gt;] -         Clarify License implications of RabbitMQ Connector
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5466&#39;&gt;FLINK-5466&lt;/a&gt;] -         Make production environment default in gulpfile
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Thu, 23 Mar 2017 18:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/03/23/release-1.1.5.html</link>
<guid isPermaLink="true">/news/2017/03/23/release-1.1.5.html</guid>
</item>

<item>
<title>Announcing Apache Flink 1.2.0</title>
<description>The Apache Flink community is pleased to announce the 1.2.0 release. Over the past months, the Flink community has been working hard to resolve 650 issues. See the [complete changelog](http://flink.apache.org/blog/release_1.2.0-changelog.html) for more detail.

This is the third major release in the 1.x.y series. It is API compatible with the other 1.x.y releases for APIs annotated with the @Public annotation.

We encourage everyone to download the release and check out the [documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/). Feedback through the [Flink mailing lists](http://flink.apache.org/community.html#mailing-lists) is, as always, gladly encouraged!

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html). Some highlights of the release are listed below.

{% toc %}

## Dynamic Scaling / Key Groups

Flink now supports changing the parallelism of a streaming job by restoring it from a savepoint with a different parallelism. Both changing the entire job’s parallelism and operator parallelism is supported.
In the `StreamExecutionEnvironment`, users can set a new per-job configuration parameter called “max parallelism”. It determines the upper limit for the parallelism.

By default, the value is set to:

+ `128` : for all parallelism &lt;= 128
+ `MIN(nextPowerOfTwo(parallelism + (parallelism / 2)), 2^15)`: for all parallelism &gt; 128

The following built-in functions and operators support rescaling:

+ Window operator
+ Rolling/Bucketing sink
+ Kafka consumers
+ Continuous File Processing source

The write-ahead log Cassandra sink and the CEP operator are currently not rescalable. Users using the keyed state interfaces can use the dynamic scaling without changing their code.

## Rescalable Non-Partitioned State

As part of the dynamic scaling effort, the community has also added rescalable non-partitioned state for operators like the Kafka consumer that don’t use keyed state but instead use operator state.

In case of rescaling, the operator state needs to be redistributed among the parallel consumer instances. In case of the Kafka consumer, the assigned partitions and their offsets are redistributed.

## ProcessFunction

The `ProcessFunction` is a low-level stream processing operation giving access to the basic building blocks of all (acyclic) streaming applications:

+ Events (stream elements)
+ State (fault tolerant, consistent)
+ Timers (event time and processing time)

The ProcessFunction can be thought of as a FlatMapFunction with access to keyed state and timers.

[ProcessFunction documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/stream/process_function.html)

## Async I/O

Flink now has a dedicated Async I/O operator for making blocking calls asynchronously and in a checkpointed fashion. For example, there are many Flink applications that need to query external datastores for each element in a stream. To avoid slowing down the stream to the speed of the external system, the async I/O operator allows requests to overlap.

[Async I/O documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/stream/asyncio.html)

## Run Flink with Apache Mesos

The latest release further extends Flink’s deployment flexibility by adding support for Apache Mesos and DC/OS. In combination with Marathon, it is now possible to run an highly available Flink cluster on Mesos.

[Mesos documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/setup/mesos.html)

## Secure Data Access

Flink is now able to authenticate against external services such as Zookeeper, Kafka, HDFS and YARN using Kerberos.
Also, experimental support for encryption over the wire has been added.

[Kerberos documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/ops/security-kerberos.html) and [SSL setup documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/setup/security-ssl.html).

## Queryable State

This experimental feature allows users to query the current state of an operator.
If you have, for example, a flatMap() operator that keeps a running aggregate per key, queryable state allows you to retrieve the current aggregate value at any time by directly connecting to the TaskManager and retrieving that value.

[Queryable State documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/stream/queryable_state.html)

## Backwards compatible savepoints

Flink 1.2.0 allows users to restart a job from an 1.1.4 savepoint. This makes major Flink version upgrades possible without losing application state. The following built-in operators are backwards compatible:

+ Window operator
+ Rolling/Bucketing sink
+ Kafka consumers
+ Continuous File Processing source

[Upgrading Flink applications documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/ops/upgrading.html)

## Table API &amp; SQL

This release significantly expanded the performance, stability, and coverage of Flink’s Table API and SQL support for batch and streaming tables.

The community added tumbling, sliding, and session group-window aggregations over streaming tables
  e.g. `table.window(Session withGap 10.minutes on &#39;rowtime as &#39;w)`

SQL supports more built-in functions and operations
  e.g. `EXISTS`, `VALUES`, `LIMIT`, `CURRENT_DATE`, `INITCAP`, `NULLIF`

Both APIs support more data types and are better integrated
  e.g. access a POJO field `myPojo.get(&#39;field&#39;)`, `myPojo.flatten()`

Users can now define their own scalar and table functions
  e.g. `table.select(&#39;uid, parse(&#39;field) as &#39;parsed).join(split(&#39;parsed) as &#39;atom)`

[Flink Table API &amp; SQL documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/table_api.html)

## Miscellaneous improvements
+ Metrics in Flink web interface: A metrics system was added in Flink 1.1, and with this release, Flink provides a new tab in the web frontend to see some of the metrics in the web UI.

+ Kafka 0.10 support: Flink 1.2 now provides a connector for Apache Kafka 0.10.0.x, including support for consuming and producing messages with a timestamp using Flink’s internal event time ([Kafka Connector Documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/connectors/kafka.html))

+ Evictor Semantics: Flink 1.2 ships with more expressive evictor semantics that allow the programmer to evict elements form a window both before and after the application of the window function, and to remove elements arbitrarily ([Evictor Semantics Documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.2/dev/windows.html#evictors))

## List of Contributors

According to git shortlog, the following 122 people contributed to the 1.2.0 release. Thank you to all contributors!

+ Abhishek R. Singh
+ Ahmad Ragab
+ Aleksandr Chermenin
+ Alexander Pivovarov
+ Alexander Shoshin
+ Alexey Diomin
+ Aljoscha Krettek
+ Andrey Melentyev
+ Anton Mushin
+ Bob Thorman
+ Boris Osipov
+ Bram Vogelaar
+ Bruno Aranda
+ David Anderson
+ Dominik
+ Evgeny_Kincharov
+ Fabian Hueske
+ Fokko Driesprong
+ Gabor Gevay
+ George
+ Gordon Tai
+ Greg Hogan
+ Gyula Fora
+ Haohui Mai
+ Holger Frydrych
+ HungUnicorn
+ Ismaël Mejía
+ Ivan Mushketyk
+ Jakub Havlik
+ Jark Wu
+ Jendrik Poloczek
+ Jincheng Sun
+ Josh
+ Joshi
+ Keiji Yoshida
+ Kirill Morozov
+ Kurt Young
+ Liwei Lin
+ Lorenz Buehmann
+ Maciek Próchniak
+ Makman2
+ Markus Müller
+ Martin Junghanns
+ Márton Balassi
+ Max Kuklinski
+ Maximilian Michels
+ Milosz Tanski
+ Nagarjun
+ Neelesh Srinivas Salian
+ Neil Derraugh
+ Nick Chadwick
+ Nico Kruber
+ Niels Basjes
+ Pattarawat Chormai
+ Piotr Godek
+ Raghav
+ Ramkrishna
+ Robert Metzger
+ Rohit Agarwal
+ Roman Maier
+ Sachin
+ Sachin Goel
+ Scott Kidder
+ Shannon Carey
+ Stefan Richter
+ Steffen Hausmann
+ Stephan Epping
+ Stephan Ewen
+ Sunny T
+ Suri
+ Theodore Vasiloudis
+ Till Rohrmann
+ Tony Wei
+ Tzu-Li (Gordon) Tai
+ Ufuk Celebi
+ Vijay Srinivasaraghavan
+ Vishnu Viswanath
+ WangTaoTheTonic
+ William-Sang
+ Yassine Marzougui
+ anton solovev
+ beyond1920
+ biao.liub
+ chobeat
+ danielblazevski
+ f7753
+ fengyelei
+ fengyelei 00406569
+ gallenvara
+ gaolun.gl
+ godfreyhe
+ heytitle
+ hzyuemeng1
+ iteblog
+ kl0u
+ larsbachmann
+ lincoln-lil
+ manuzhang
+ medale
+ miaoever
+ mtunique
+ radekg
+ renkai
+ sergey_sokur
+ shijinkui
+ shuai.xus
+ smarthi
+ swapnil-chougule
+ tedyu
+ tibor.moger
+ tonycox
+ twalthr
+ vasia
+ wenlong.lwl
+ wrighe3
+ xiaogang.sxg
+ yushi.wxg
+ yuzhongliu
+ zentol
+ zhuhaifengleon
+ 淘江
+ 魏偉哲
</description>
<pubDate>Mon, 06 Feb 2017 12:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2017/02/06/release-1.2.0.html</link>
<guid isPermaLink="true">/news/2017/02/06/release-1.2.0.html</guid>
</item>

<item>
<title>Apache Flink 1.1.4 Released</title>
<description>The Apache Flink community released the next bugfix version of the Apache Flink 1.1 series.

This release includes major robustness improvements for checkpoint cleanup on failures and consumption of intermediate streams. We highly recommend all users to upgrade to Flink 1.1.4.

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.1.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.4&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

## Note for RocksDB Backend Users

We updated Flink&#39;s RocksDB dependency version from `4.5.1` to `4.11.2`. Between these versions some of RocksDB&#39;s internal configuration defaults changed that would affect the memory footprint of running Flink with RocksDB. Therefore, we manually reset them to the previous defaults. If you want to run with the new Rocks 4.11.2 defaults, you can do this via:

```java
RocksDBStateBackend backend = new RocksDBStateBackend(&quot;...&quot;);
// Use the new default options. Otherwise, the default for RocksDB 4.5.1
// `PredefinedOptions.DEFAULT_ROCKS_4_5_1` will be used.
backend.setPredefinedOptions(PredefinedOptions.DEFAULT);
```

## Release Notes - Flink - Version 1.1.4
    
### Sub-task
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4510&#39;&gt;FLINK-4510&lt;/a&gt;] -         Always create CheckpointCoordinator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4984&#39;&gt;FLINK-4984&lt;/a&gt;] -         Add Cancellation Barriers to BarrierTracker and BarrierBuffer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4985&#39;&gt;FLINK-4985&lt;/a&gt;] -         Report Declined/Canceled Checkpoints to Checkpoint Coordinator
&lt;/li&gt;
&lt;/ul&gt;
                            
### Bug
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2662&#39;&gt;FLINK-2662&lt;/a&gt;] -         CompilerException: &amp;quot;Bug: Plan generation for Unions picked a ship strategy between binary plan operators.&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3680&#39;&gt;FLINK-3680&lt;/a&gt;] -         Remove or improve (not set) text in the Job Plan UI
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3813&#39;&gt;FLINK-3813&lt;/a&gt;] -         YARNSessionFIFOITCase.testDetachedMode failed on Travis
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4108&#39;&gt;FLINK-4108&lt;/a&gt;] -         NPE in Row.productArity
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4506&#39;&gt;FLINK-4506&lt;/a&gt;] -         CsvOutputFormat defaults allowNullValues to false, even though doc and declaration says true
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4581&#39;&gt;FLINK-4581&lt;/a&gt;] -         Table API throws &amp;quot;No suitable driver found for jdbc:calcite&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4586&#39;&gt;FLINK-4586&lt;/a&gt;] -         NumberSequenceIterator and Accumulator threading issue
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4619&#39;&gt;FLINK-4619&lt;/a&gt;] -         JobManager does not answer to client when restore from savepoint fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4727&#39;&gt;FLINK-4727&lt;/a&gt;] -         Kafka 0.9 Consumer should also checkpoint auto retrieved offsets even when no data is read
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4862&#39;&gt;FLINK-4862&lt;/a&gt;] -         NPE on EventTimeSessionWindows with ContinuousEventTimeTrigger
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4932&#39;&gt;FLINK-4932&lt;/a&gt;] -         Don&amp;#39;t let ExecutionGraph fail when in state Restarting
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4933&#39;&gt;FLINK-4933&lt;/a&gt;] -         ExecutionGraph.scheduleOrUpdateConsumers can fail the ExecutionGraph
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4977&#39;&gt;FLINK-4977&lt;/a&gt;] -         Enum serialization does not work in all cases
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4991&#39;&gt;FLINK-4991&lt;/a&gt;] -         TestTask hangs in testWatchDogInterruptsTask
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4998&#39;&gt;FLINK-4998&lt;/a&gt;] -         ResourceManager fails when num task slots &amp;gt; Yarn vcores
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5013&#39;&gt;FLINK-5013&lt;/a&gt;] -         Flink Kinesis connector doesn&amp;#39;t work on old EMR versions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5028&#39;&gt;FLINK-5028&lt;/a&gt;] -         Stream Tasks must not go through clean shutdown logic on cancellation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5038&#39;&gt;FLINK-5038&lt;/a&gt;] -         Errors in the &amp;quot;cancelTask&amp;quot; method prevent closeables from being closed early
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5039&#39;&gt;FLINK-5039&lt;/a&gt;] -         Avro GenericRecord support is broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5040&#39;&gt;FLINK-5040&lt;/a&gt;] -         Set correct input channel types with eager scheduling
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5050&#39;&gt;FLINK-5050&lt;/a&gt;] -         JSON.org license is CatX
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5057&#39;&gt;FLINK-5057&lt;/a&gt;] -         Cancellation timeouts are picked from wrong config
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5058&#39;&gt;FLINK-5058&lt;/a&gt;] -         taskManagerMemory attribute set wrong value in FlinkShell
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5063&#39;&gt;FLINK-5063&lt;/a&gt;] -         State handles are not properly cleaned up for declined or expired checkpoints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5073&#39;&gt;FLINK-5073&lt;/a&gt;] -         ZooKeeperCompleteCheckpointStore executes blocking delete operation in ZooKeeper client thread
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5075&#39;&gt;FLINK-5075&lt;/a&gt;] -         Kinesis consumer incorrectly determines shards as newly discovered when tested against Kinesalite
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5082&#39;&gt;FLINK-5082&lt;/a&gt;] -         Pull ExecutionService lifecycle management out of the JobManager
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5085&#39;&gt;FLINK-5085&lt;/a&gt;] -         Execute CheckpointCoodinator&amp;#39;s state discard calls asynchronously
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5114&#39;&gt;FLINK-5114&lt;/a&gt;] -         PartitionState update with finished execution fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5142&#39;&gt;FLINK-5142&lt;/a&gt;] -         Resource leak in CheckpointCoordinator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5149&#39;&gt;FLINK-5149&lt;/a&gt;] -         ContinuousEventTimeTrigger doesn&amp;#39;t fire at the end of the window
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5154&#39;&gt;FLINK-5154&lt;/a&gt;] -         Duplicate TypeSerializer when writing RocksDB Snapshot
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5158&#39;&gt;FLINK-5158&lt;/a&gt;] -         Handle ZooKeeperCompletedCheckpointStore exceptions in CheckpointCoordinator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5172&#39;&gt;FLINK-5172&lt;/a&gt;] -         In RocksDBStateBackend, set flink-core and flink-streaming-java to &amp;quot;provided&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5173&#39;&gt;FLINK-5173&lt;/a&gt;] -         Upgrade RocksDB dependency
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5184&#39;&gt;FLINK-5184&lt;/a&gt;] -         Error result of compareSerialized in RowComparator class
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5193&#39;&gt;FLINK-5193&lt;/a&gt;] -         Recovering all jobs fails completely if a single recovery fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5197&#39;&gt;FLINK-5197&lt;/a&gt;] -         Late JobStatusChanged messages can interfere with running jobs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5214&#39;&gt;FLINK-5214&lt;/a&gt;] -         Clean up checkpoint files when failing checkpoint operation on TM
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5215&#39;&gt;FLINK-5215&lt;/a&gt;] -         Close checkpoint streams upon cancellation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5216&#39;&gt;FLINK-5216&lt;/a&gt;] -         CheckpointCoordinator&amp;#39;s &amp;#39;minPauseBetweenCheckpoints&amp;#39; refers to checkpoint start rather then checkpoint completion
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5218&#39;&gt;FLINK-5218&lt;/a&gt;] -         Eagerly close checkpoint streams on cancellation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5228&#39;&gt;FLINK-5228&lt;/a&gt;] -         LocalInputChannel re-trigger request and release deadlock
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5229&#39;&gt;FLINK-5229&lt;/a&gt;] -         Cleanup StreamTaskStates if a checkpoint operation of a subsequent operator fails 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5246&#39;&gt;FLINK-5246&lt;/a&gt;] -         Don&amp;#39;t discard unknown checkpoint messages in the CheckpointCoordinator
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5248&#39;&gt;FLINK-5248&lt;/a&gt;] -         SavepointITCase doesn&amp;#39;t catch savepoint restore failure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5274&#39;&gt;FLINK-5274&lt;/a&gt;] -         LocalInputChannel throws NPE if partition reader is released
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5275&#39;&gt;FLINK-5275&lt;/a&gt;] -         InputChanelDeploymentDescriptors throws misleading Exception if producer failed/cancelled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5276&#39;&gt;FLINK-5276&lt;/a&gt;] -         ExecutionVertex archiving can throw NPE with many previous attempts
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5285&#39;&gt;FLINK-5285&lt;/a&gt;] -         CancelCheckpointMarker flood when using at least once mode
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5326&#39;&gt;FLINK-5326&lt;/a&gt;] -         IllegalStateException: Bug in Netty consumer logic: reader queue got notified by partition about available data,  but none was available
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5352&#39;&gt;FLINK-5352&lt;/a&gt;] -         Restore RocksDB 1.1.3 memory behavior
&lt;/li&gt;
&lt;/ul&gt;
                        
### Improvement
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3347&#39;&gt;FLINK-3347&lt;/a&gt;] -         TaskManager (or its ActorSystem) need to restart in case they notice quarantine
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3787&#39;&gt;FLINK-3787&lt;/a&gt;] -         Yarn client does not report unfulfillable container constraints
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4445&#39;&gt;FLINK-4445&lt;/a&gt;] -         Ignore unmatched state when restoring from savepoint
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4715&#39;&gt;FLINK-4715&lt;/a&gt;] -         TaskManager should commit suicide after cancellation failure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4894&#39;&gt;FLINK-4894&lt;/a&gt;] -         Don&amp;#39;t block on buffer request after broadcastEvent 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4975&#39;&gt;FLINK-4975&lt;/a&gt;] -         Add a limit for how much data may be buffered during checkpoint alignment
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4996&#39;&gt;FLINK-4996&lt;/a&gt;] -         Make CrossHint @Public
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5046&#39;&gt;FLINK-5046&lt;/a&gt;] -         Avoid redundant serialization when creating the TaskDeploymentDescriptor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5123&#39;&gt;FLINK-5123&lt;/a&gt;] -         Add description how to do proper shading to Flink docs.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5169&#39;&gt;FLINK-5169&lt;/a&gt;] -         Make consumption of input channels fair
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5192&#39;&gt;FLINK-5192&lt;/a&gt;] -         Provide better log config templates
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5194&#39;&gt;FLINK-5194&lt;/a&gt;] -         Log heartbeats on TRACE level
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5196&#39;&gt;FLINK-5196&lt;/a&gt;] -         Don&amp;#39;t log InputChannelDescriptor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5198&#39;&gt;FLINK-5198&lt;/a&gt;] -         Overwrite TaskState toString
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5199&#39;&gt;FLINK-5199&lt;/a&gt;] -         Improve logging of submitted job graph actions in HA case
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5201&#39;&gt;FLINK-5201&lt;/a&gt;] -         Promote loaded config properties to INFO
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5207&#39;&gt;FLINK-5207&lt;/a&gt;] -         Decrease HadoopFileSystem logging
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5249&#39;&gt;FLINK-5249&lt;/a&gt;] -         description of datastream rescaling doesn&amp;#39;t match the figure
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5259&#39;&gt;FLINK-5259&lt;/a&gt;] -         wrong execution environment in retry delays example
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-5278&#39;&gt;FLINK-5278&lt;/a&gt;] -         Improve Task and checkpoint logging 
&lt;/li&gt;
&lt;/ul&gt;
            
### New Feature
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4976&#39;&gt;FLINK-4976&lt;/a&gt;] -         Add a way to abort in flight checkpoints
&lt;/li&gt;
&lt;/ul&gt;
                                                        
### Task
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4778&#39;&gt;FLINK-4778&lt;/a&gt;] -         Update program example in /docs/setup/cli.md due to the change in FLINK-2021
&lt;/li&gt;
&lt;/ul&gt;
                
</description>
<pubDate>Wed, 21 Dec 2016 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/12/21/release-1.1.4.html</link>
<guid isPermaLink="true">/news/2016/12/21/release-1.1.4.html</guid>
</item>

<item>
<title>Apache Flink in 2016: Year in Review</title>
<description>&lt;p&gt;2016 was an exciting year for the Apache Flink® community, and the
  &lt;a href=&quot;http://flink.apache.org/news/2016/03/08/release-1.0.0.html&quot; target=&quot;_blank&quot;&gt;release of Flink 1.0 in March&lt;/a&gt;
   marked the first time in Flink’s history that the community guaranteed API backward compatibility for all
   versions in a series. This step forward for Flink was followed by many new and exciting production deployments
   in organizations of all shapes and sizes, all around the globe.&lt;/p&gt;

In this post, we’ll look back on the project’s progress over the course of 2016, and
we’ll also preview what 2017 has in store.

{%toc%}

## Community Growth

### Github
First, here&#39;s a summary of community statistics from &lt;a href=&quot;https://github.com/apache/flink&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;. At the time of writing:
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Contributors&lt;/b&gt; have increased from 150 in December 2015 to 258 in December 2016 (up &lt;b&gt;72%&lt;/b&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Stars&lt;/b&gt; have increased from 813 in December 2015 to 1830 in December 2016 (up &lt;b&gt;125%&lt;/b&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Forks&lt;/b&gt; have increased from 544 in December 2015 to 1255 in December 2016 (up &lt;b&gt;130%&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;

The community also welcomed &lt;b&gt;3 new committers in 2016&lt;/b&gt;: Chengxiang Li, Greg Hogan, and Tzu-Li (Gordon) Tai.

&lt;br&gt;&lt;img src=&quot;{{ site.baseurl }}/img/blog/github-stats-2016.png&quot; width=&quot;775&quot; alt=&quot;Apache Flink GitHub Stats&quot;/&gt;
&lt;br&gt;
&lt;br&gt;

Next, let&#39;s take a look at a few other project stats, starting with number of commits. If we run:

```
git log --pretty=oneline --after=12/31/2015 | wc -l
```
...inside the Flink repository, we&#39;ll see a total of **1884** commits so far in 2016, bringing the all-time total commits to **10,015**.

Now, let&#39;s go a bit deeper. And here are instructions in case you&#39;d like to take a look at this data yourself.

* Download gitstats from the [project homepage](http://gitstats.sourceforge.net/). Or, on OS X with homebrew, type:

```
brew install --HEAD homebrew/head-only/gitstats
```

* Clone the Apache Flink git repository:

```
git clone git@github.com:apache/flink.git
```

* Generate the statistics

```
gitstats flink/ flink-stats/
```

* View all the statistics as an html page using your defaulf browser:

```
open flink-stats/index.html
```
2016 is the year that Flink surpassed 1 million lines of code, now clocking in at **1,034,137** lines.

&lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-lines-of-code-2016.png&quot; align=&quot;center&quot; width=&quot;550&quot;
 alt=&quot;Flink Total Lines of Code&quot;/&gt;

Monday remains the day of the week with the most commits over the project&#39;s history:

&lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-dow-2016.png&quot; align=&quot;center&quot; width=&quot;550&quot;
 alt=&quot;Flink Commits by Day of Week&quot;/&gt;

And 5pm is still solidly the preferred commit time:

 &lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-hod-2016.png&quot; align=&quot;center&quot; width=&quot;550&quot;
  alt=&quot;Flink Commits by Hour of Day&quot;/&gt;




&lt;br&gt;

### Meetups
&lt;a href=&quot;https://www.meetup.com/topics/apache-flink/&quot; target=&quot;_blank&quot;&gt;Apache Flink Meetup membership&lt;/a&gt; grew by &lt;b&gt;240%&lt;/b&gt;
this year, and at the time of writing, there are 41 meetups comprised of 16,541 members listing Flink as a topic--up from 16 groups with 4,864 members in December 2015.
The Flink community is proud to be truly global in nature.

&lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-meetups-dec2016.png&quot; width=&quot;775&quot; alt=&quot;Apache Flink Meetup Map&quot;/&gt;

## Flink Forward 2016

The &lt;a href=&quot;http://2016.flink-forward.org/&quot; target=&quot;_blank&quot;&gt;second annual Flink Forward conference &lt;/a&gt;took place in
Berlin on September 12-14, and over 350 members of the Flink community came together for speaker sessions, training,
and discussion about Flink. &lt;a href=&quot;http://2016.flink-forward.org/program/sessions/&quot; target=&quot;_blank&quot;&gt;Slides and videos&lt;/a&gt;
 from speaker sessions are available online, and we encourage you to take a look if you’re interested in learning more
 about how Flink is used in production in a wide range of organizations.

Flink Forward will be expanding to &lt;a href=&quot;http://sf.flink-forward.org/&quot; target=&quot;_blank&quot;&gt;San Francisco in April 2017&lt;/a&gt;, and the &lt;a href=&quot;http://berlin.flink-forward.org/&quot; target=&quot;_blank&quot;&gt;third-annual Berlin event
  is scheduled for September 2017.&lt;/a&gt;

&lt;img src=&quot;{{ site.baseurl }}/img/blog/speaker-logos-ff2016.png&quot; width=&quot;775&quot; alt=&quot;Flink Forward Speakers&quot;/&gt;

## Features and Ecosystem

### Flink Ecosystem Growth

Flink was added to a selection of distributions during 2016, making it easier
for an even larger base of users to start working with Flink:

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/big-data/use-apache-flink-on-amazon-emr/&quot; target=&quot;_blank&quot;&gt;
    Amazon EMR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/dataproc/docs/release-notes/service#november_29_2016&quot; target= &quot;_blank&quot;&gt;
    Google Cloud Dataproc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lightbend.com/blog/introducing-lightbend-fast-data-platform&quot; target=&quot;_blank&quot;&gt;
    Lightbend Fast Data Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

In addition, the Apache Beam and Flink communities teamed up to build a Flink runner for Beam that, according to the Google team, is &lt;a href=&quot;https://cloud.google.com/blog/big-data/2016/05/why-apache-beam-a-google-perspective&quot;
 target=&quot;_blank&quot;&gt;&quot;sophisticated enough to be a compelling alternative to Cloud Dataflow when running on premise or on non-Google clouds&quot;&lt;/a&gt;.

### Feature Timeline in 2016

Here’s a selection of major features added to Flink over the course of 2016:

&lt;img src=&quot;{{ site.baseurl }}/img/blog/flink-releases-2016.png&quot; width=&quot;775&quot; alt=&quot;Flink Release Timeline 2016&quot;/&gt;

If you spend time in the &lt;a href=&quot;https://issues.apache.org/jira/browse/FLINK-4554?jql=project%20%3D%20FLINK%20AND%20issuetype%20%3D%20%22New%20Feature%22%20AND%20status%20%3D%20Resolved%20ORDER%20BY%20resolved%20DESC&quot; target=&quot;_blank&quot;&gt;Apache Flink JIRA project&lt;/a&gt;, you’ll see that the Flink community has addressed every single one of the roadmap items identified
in &lt;a href=&quot;http://flink.apache.org/news/2015/12/18/a-year-in-review.html&quot; target=&quot;_blank&quot;&gt;2015’s year in review post&lt;/a&gt;. Here&#39;s to making that an annual tradition. :)

## Looking ahead to 2017

A good source of information about the Flink community&#39;s roadmap is the list of
&lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/Flink+Improvement+Proposals&quot; target=&quot;_blank&quot;&gt;Flink
Improvement Proposals (FLIPs)&lt;/a&gt; in the project wiki. Below, we&#39;ll highlight a selection of FLIPs
that have been accepted by the community as well as some that are still under discussion.

We should note that work is already underway on a number of these features, and some will even be included in Flink 1.2 at the beginning of 2017.

* **A new Flink deployment and process model**, as described in &lt;a href=&quot;https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077&quot; target=&quot;_blank&quot;&gt;FLIP-6&lt;a/&gt;. This work ensures that Flink supports a wide
range of deployment types and cluster managers, making it possible to run Flink smoothly in any environment.

* **Dynamic scaling** for both key-value state &lt;a href=&quot;https://github.com/apache/flink/pull/2440&quot; target=&quot;_blank&quot;&gt;(as described in
this PR)&lt;a/&gt; *and* non-partitioned state &lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/FLIP-8%3A+Rescalable+Non-Partitioned+State&quot; target=&quot;_blank&quot;&gt;(as described in FLIP-8)&lt;a/&gt;, ensuring that it&#39;s always possible to split or merge state when scaling up or down, respectively.

* **Asynchronous I/O**, as described in &lt;a href=&quot;https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65870673&quot; target=&quot;_blank&quot;&gt;FLIP-12
&lt;/a&gt;, which makes I/O access a less time-consuming process without adding complexity or the need for extra checkpoint coordination.

* **Enhancements to the window evictor**, as described in &lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/FLIP-4+%3A+Enhance+Window+Evictor&quot; target=&quot;_blank&quot;&gt;FLIP-4&lt;/a&gt;,
to provide users with more control over how elements are evicted from a window.

* **Fined-grained recovery from task failures**, as described in &lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/FLIP-1+%3A+Fine+Grained+Recovery+from+Task+Failures&quot; target=&quot;_blank&quot;&gt;FLIP-1&lt;/a&gt;,
to make it possible to restart only what needs to be restarted during recovery, building on cached intermediate results.

* **Unified checkpoints and savepoints**, as described in &lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/FLIP-10%3A+Unify+Checkpoints+and+Savepoints&quot; target=&quot;_blank&quot;&gt;FLIP-10&lt;/a&gt;, to
allow savepoints to be triggered automatically--important for program updates for the sake of error handling because savepoints allow the user to modify both
 the job and Flink version whereas checkpoints can only be recovered with the same job.

* **Table API window aggregations**, as described in &lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLINK/FLIP-11%3A+Table+API+Stream+Aggregations&quot; target=&quot;_blank&quot;&gt;FLIP-11&lt;/a&gt;, to support group-window and row-window aggregates on streaming and batch tables.

* **Side inputs**, as described in &lt;a href=&quot;https://docs.google.com/document/d/1hIgxi2Zchww_5fWUHLoYiXwSBXjv-M5eOv-MKQYN3m4/edit&quot; target=&quot;_blank&quot;&gt;this design document&lt;/a&gt;, to
enable the joining of a main, high-throughput stream with one more more inputs with static or slowly-changing data.

If you&#39;re interested in getting involved with Flink, we encourage you to take a look at the FLIPs and to join the discussion via the [Flink mailing lists](http://flink.apache.org/community.html#mailing-lists).

Lastly, we&#39;d like to extend a sincere thank you to all of the Flink community for making 2016 a great year!
</description>
<pubDate>Mon, 19 Dec 2016 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/12/19/2016-year-in-review.html</link>
<guid isPermaLink="true">/news/2016/12/19/2016-year-in-review.html</guid>
</item>

<item>
<title>Apache Flink 1.1.3 Released</title>
<description>The Apache Flink community released the next bugfix version of the Apache Flink 1.1. series.

We recommend all users to upgrade to Flink 1.1.3.

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.1.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.3&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).

## Note for RocksDB Backend Users

It is highly recommended to use the &quot;fully async&quot; mode for the RocksDB state backend. The &quot;fully async&quot; mode will most likely allow you to easily upgrade to Flink 1.2 (via [savepoints](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/savepoints.html)) when it is released. The &quot;semi async&quot; mode will no longer be supported by Flink 1.2.

```java
RocksDBStateBackend backend = new RocksDBStateBackend(&quot;...&quot;);
backend.enableFullyAsyncSnapshots();
```

## Release Notes - Flink - Version 1.1.3

&lt;h2&gt;        Bug
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2662&#39;&gt;FLINK-2662&lt;/a&gt;] -         CompilerException: &amp;quot;Bug: Plan generation for Unions picked a ship strategy between binary plan operators.&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4311&#39;&gt;FLINK-4311&lt;/a&gt;] -         TableInputFormat fails when reused on next split
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4329&#39;&gt;FLINK-4329&lt;/a&gt;] -         Fix Streaming File Source Timestamps/Watermarks Handling
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4485&#39;&gt;FLINK-4485&lt;/a&gt;] -         Finished jobs in yarn session fill /tmp filesystem
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4513&#39;&gt;FLINK-4513&lt;/a&gt;] -         Kafka connector documentation refers to Flink 1.1-SNAPSHOT
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4514&#39;&gt;FLINK-4514&lt;/a&gt;] -         ExpiredIteratorException in Kinesis Consumer on long catch-ups to head of stream
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4540&#39;&gt;FLINK-4540&lt;/a&gt;] -         Detached job execution may prevent cluster shutdown
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4544&#39;&gt;FLINK-4544&lt;/a&gt;] -         TaskManager metrics are vulnerable to custom JMX bean installation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4566&#39;&gt;FLINK-4566&lt;/a&gt;] -         ProducerFailedException does not properly preserve Exception causes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4588&#39;&gt;FLINK-4588&lt;/a&gt;] -         Fix Merging of Covering Window in MergingWindowSet
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4589&#39;&gt;FLINK-4589&lt;/a&gt;] -         Fix Merging of Covering Window in MergingWindowSet
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4616&#39;&gt;FLINK-4616&lt;/a&gt;] -         Kafka consumer doesn&amp;#39;t store last emmited watermarks per partition in state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4618&#39;&gt;FLINK-4618&lt;/a&gt;] -         FlinkKafkaConsumer09 should start from the next record on startup from offsets in Kafka
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4619&#39;&gt;FLINK-4619&lt;/a&gt;] -         JobManager does not answer to client when restore from savepoint fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4636&#39;&gt;FLINK-4636&lt;/a&gt;] -         AbstractCEPPatternOperator fails to restore state
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4640&#39;&gt;FLINK-4640&lt;/a&gt;] -         Serialization of the initialValue of a Fold on WindowedStream fails
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4651&#39;&gt;FLINK-4651&lt;/a&gt;] -         Re-register processing time timers at the WindowOperator upon recovery.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4663&#39;&gt;FLINK-4663&lt;/a&gt;] -         Flink JDBCOutputFormat logs wrong WARN message
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4672&#39;&gt;FLINK-4672&lt;/a&gt;] -         TaskManager accidentally decorates Kill messages
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4677&#39;&gt;FLINK-4677&lt;/a&gt;] -         Jars with no job executions produces NullPointerException in ClusterClient
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4702&#39;&gt;FLINK-4702&lt;/a&gt;] -         Kafka consumer must commit offsets asynchronously
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4727&#39;&gt;FLINK-4727&lt;/a&gt;] -         Kafka 0.9 Consumer should also checkpoint auto retrieved offsets even when no data is read
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4732&#39;&gt;FLINK-4732&lt;/a&gt;] -         Maven junction plugin security threat
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4777&#39;&gt;FLINK-4777&lt;/a&gt;] -         ContinuousFileMonitoringFunction may throw IOException when files are moved
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4788&#39;&gt;FLINK-4788&lt;/a&gt;] -         State backend class cannot be loaded, because fully qualified name converted to lower-case
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;        Improvement
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4396&#39;&gt;FLINK-4396&lt;/a&gt;] -         GraphiteReporter class not found at startup of jobmanager
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4574&#39;&gt;FLINK-4574&lt;/a&gt;] -         Strengthen fetch interval implementation in Kinesis consumer
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4723&#39;&gt;FLINK-4723&lt;/a&gt;] -         Unify behaviour of committed offsets to Kafka / ZK for Kafka 0.8 and 0.9 consumer
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 12 Oct 2016 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/10/12/release-1.1.3.html</link>
<guid isPermaLink="true">/news/2016/10/12/release-1.1.3.html</guid>
</item>

<item>
<title>Apache Flink 1.1.2 Released</title>
<description>The Apache Flink community released another bugfix version of the Apache Flink 1.1. series.

We recommend all users to upgrade to Flink 1.1.2.


```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.1.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.2&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).


&lt;h2&gt;Release Notes - Flink - Version 1.1.2&lt;/h2&gt;
                                
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4236&#39;&gt;FLINK-4236&lt;/a&gt;] -         Flink Dashboard stops showing list of uploaded jars if main method cannot be looked up
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4309&#39;&gt;FLINK-4309&lt;/a&gt;] -         Potential null pointer dereference in DelegatingConfiguration#keySet()
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4334&#39;&gt;FLINK-4334&lt;/a&gt;] -         Shaded Hadoop1 jar not fully excluded in Quickstart
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4341&#39;&gt;FLINK-4341&lt;/a&gt;] -         Kinesis connector does not emit maximum watermark properly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4402&#39;&gt;FLINK-4402&lt;/a&gt;] -         Wrong metrics parameter names in documentation 
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4409&#39;&gt;FLINK-4409&lt;/a&gt;] -         class conflict between jsr305-1.3.9.jar and flink-shaded-hadoop2-1.1.1.jar
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4411&#39;&gt;FLINK-4411&lt;/a&gt;] -         [py] Chained dual input children are not properly propagated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4412&#39;&gt;FLINK-4412&lt;/a&gt;] -         [py] Chaining does not properly handle broadcast variables
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4425&#39;&gt;FLINK-4425&lt;/a&gt;] -         &amp;quot;Out Of Memory&amp;quot; during savepoint deserialization
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4454&#39;&gt;FLINK-4454&lt;/a&gt;] -         Lookups for JobManager address in config
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4480&#39;&gt;FLINK-4480&lt;/a&gt;] -         Incorrect link to elastic.co in documentation
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4486&#39;&gt;FLINK-4486&lt;/a&gt;] -         JobManager not fully running when yarn-session.sh finishes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4488&#39;&gt;FLINK-4488&lt;/a&gt;] -         Prevent cluster shutdown after job execution for non-detached jobs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4514&#39;&gt;FLINK-4514&lt;/a&gt;] -         ExpiredIteratorException in Kinesis Consumer on long catch-ups to head of stream
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4526&#39;&gt;FLINK-4526&lt;/a&gt;] -         ApplicationClient: remove redundant proxy messages
&lt;/li&gt;

&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3866&#39;&gt;FLINK-3866&lt;/a&gt;] -         StringArraySerializer claims type is immutable; shouldn&amp;#39;t
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3899&#39;&gt;FLINK-3899&lt;/a&gt;] -         Document window processing with Reduce/FoldFunction + WindowFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4302&#39;&gt;FLINK-4302&lt;/a&gt;] -         Add JavaDocs to MetricConfig
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-4495&#39;&gt;FLINK-4495&lt;/a&gt;] -         Running multiple jobs on yarn (without yarn-session)
&lt;/li&gt;
&lt;/ul&gt;

</description>
<pubDate>Mon, 05 Sep 2016 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/09/05/release-1.1.2.html</link>
<guid isPermaLink="true">/news/2016/09/05/release-1.1.2.html</guid>
</item>

<item>
<title>Flink Forward 2016: Announcing Schedule, Keynotes, and Panel Discussion</title>
<description>&lt;p&gt;An update for the Flink community: the &lt;a href=&quot;http://flink-forward.org/kb_day/day-1/&quot;&gt;Flink Forward 2016 schedule&lt;/a&gt; is now available online. This year&#39;s event will include 2 days of talks from stream processing experts at Google, MapR, Alibaba, Netflix, Cloudera, and more. Following the talks is a full day of hands-on Flink training.&lt;/p&gt;

&lt;p&gt;Ted Dunning has been announced as a keynote speaker at the event. Ted is the VP of Incubator at &lt;a href=&quot;http://www.apache.org&quot;&gt;Apache Software Foundation&lt;/a&gt;, the Chief Application Architect at &lt;a href=&quot;http://www.mapr.com&quot;&gt;MapR Technologies&lt;/a&gt;, and a mentor on many recent projects. He&#39;ll present &lt;a href=&quot;http://flink-forward.org/kb_sessions/keynote-tba/&quot;&gt;&quot;How Can We Take Flink Forward?&quot;&lt;/a&gt; on the second day of the conference.&lt;/p&gt;

&lt;p&gt;Following Ted&#39;s keynote there will be a panel discussion on &lt;a href=&quot;http://flink-forward.org/kb_sessions/panel-large-scale-streaming-in-production/&quot;&gt;&quot;Large Scale Streaming in Production&quot;&lt;/a&gt;. As stream processing systems become more mainstream, companies are looking to empower their users to take advantage of this technology. We welcome leading stream processing experts Xiaowei Jiang &lt;a href=&quot;http://www.alibaba.com&quot;&gt;(Alibaba)&lt;/a&gt;, Monal Daxini &lt;a href=&quot;http://www.netflix.com&quot;&gt;(Netflix)&lt;/a&gt;, Maxim Fateev &lt;a href=&quot;http://www.uber.com&quot;&gt;(Uber)&lt;/a&gt;, and Ted Dunning &lt;a href=&quot;http://www.mapr.com&quot;&gt;(MapR Technologies)&lt;/a&gt; on stage to talk about the challenges they have faced and the solutions they have discovered while implementing stream processing systems at very large scale. The panel will be moderated by Jamie Grier &lt;a href=&quot;http://www.data-artisans.com&quot;&gt;(data Artisans)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The welcome keynote on Monday, September 12, will be presented by data Artisans&#39; co-founders Kostas Tzoumas and Stephan Ewen. They will talk about &lt;a href=&quot;http://flink-forward.org/kb_sessions/keynote-tba-2/&quot;&gt;&quot;The maturing data streaming ecosystem and Apache Flink’s accelerated growth&quot;&lt;/a&gt;. In this talk, Kostas and Stephan discuss several large-scale stream processing use cases that the data Artisans team has seen over the past year.&lt;/p&gt;

&lt;p&gt;And one more recent addition to the program: Maxim Fateev of Uber will present &lt;a href=&quot;http://flink-forward.org/kb_sessions/beyond-the-watermark-on-demand-backfilling-in-flink/&quot;&gt;&quot;Beyond the Watermark: On-Demand Backfilling in Flink&quot;&lt;/a&gt;. Flink’s time-progress model is built around a single watermark, which is incompatible with Uber’s business need for generating aggregates retroactively. Maxim&#39;s talk covers Uber&#39;s solution for on-demand backfilling.&lt;/p&gt;

&lt;p&gt;We hope to see many community members at Flink Forward 2016. Registration is available online: &lt;a href=&quot;http://flink-forward.org/registration/&quot;&gt;flink-forward.org/registration&lt;/a&gt;
</description>
<pubDate>Wed, 24 Aug 2016 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/08/24/ff16-keynotes-panels.html</link>
<guid isPermaLink="true">/news/2016/08/24/ff16-keynotes-panels.html</guid>
</item>

<item>
<title>Flink 1.1.1 Released</title>
<description>Today, the Flink community released Flink version 1.1.1.

The Maven artifacts published on Maven central for 1.1.0 had a Hadoop dependency issue: No Hadoop 1 specific version (with version 1.1.0-hadoop1) was deployed and 1.1.0 artifacts have a dependency on Hadoop 1 instead of Hadoop 2.

This was fixed with this release and we **highly recommend** all users to use this version of Flink by bumping your Flink dependencies to version 1.1.1:

```xml
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
  &lt;version&gt;1.1.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-streaming-java_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
  &lt;artifactId&gt;flink-clients_2.10&lt;/artifactId&gt;
  &lt;version&gt;1.1.1&lt;/version&gt;
&lt;/dependency&gt;
```

You can find the binaries on the updated [Downloads page](http://flink.apache.org/downloads.html).
</description>
<pubDate>Thu, 11 Aug 2016 09:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/08/11/release-1.1.1.html</link>
<guid isPermaLink="true">/news/2016/08/11/release-1.1.1.html</guid>
</item>

<item>
<title>Announcing Apache Flink 1.1.0</title>
<description>&lt;div class=&quot;alert alert-success&quot;&gt;&lt;strong&gt;Important&lt;/strong&gt;: The Maven artifacts published with version 1.1.0 on Maven central have a Hadoop dependency issue. It is highly recommended to use &lt;strong&gt;1.1.1&lt;/strong&gt; or &lt;strong&gt;1.1.1-hadoop1&lt;/strong&gt; as the Flink version.&lt;/div&gt;

The Apache Flink community is pleased to announce the availability of Flink 1.1.0.

This release is the first major release in the 1.X.X series of releases, which maintains API compatibility with 1.0.0. This means that your applications written against stable APIs of Flink 1.0.0 will compile and run with Flink 1.1.0. 95 contributors provided bug fixes, improvements, and new features such that in total more than 450 JIRA issues could be resolved. See the [complete changelog]({{ site.baseurl }}/blog/release_1.1.0-changelog.html) for more details.

**We encourage everyone to [download the release](http://flink.apache.org/downloads.html) and [check out the documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.1/). Feedback through the Flink [mailing lists](http://flink.apache.org/community.html#mailing-lists) is, as always, very welcome!**

Some highlights of the release are listed in the following sections.

## Connectors

The [streaming connectors](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/connectors/index.html) are a major part of Flink&#39;s DataStream API. This release adds support for new external systems and further improves on the available connectors.

### Continuous File System Sources

A frequently requested feature for Flink 1.0 was to be able to monitor directories and process files continuously. Flink 1.1 now adds support for this via `FileProcessingMode`s:

```java
DataStream&lt;String&gt; stream = env.readFile(
  textInputFormat,
  &quot;hdfs:///file-path&quot;,
  FileProcessingMode.PROCESS_CONTINUOUSLY,
  5000, // monitoring interval (millis)
  FilePathFilter.createDefaultFilter()); // file path filter
```

This will monitor `hdfs:///file-path` every `5000` milliseconds. Check out the [DataSource documentation for more details](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/index.html#data-sources).

### Kinesis Source and Sink

Flink 1.1 adds a Kinesis connector for both consuming (`FlinkKinesisConsumer`) from and producing (`FlinkKinesisProduer`) to [Amazon Kinesis Streams](https://aws.amazon.com/kinesis/), which is a managed service purpose-built to make it easy to work with streaming data on AWS.

```java
DataStream&lt;String&gt; kinesis = env.addSource(
  new FlinkKinesisConsumer&lt;&gt;(&quot;stream-name&quot;, schema, config));
```

Check out the [Kinesis connector documentation for more details](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/connectors/kinesis.html).

### Cassandra Sink

The [Apache Cassandra](http://wiki.apache.org/cassandra/GettingStarted) sink allows you to write from Flink to Cassandra. Flink can provide exactly-once guarantees if the query is idempotent, meaning it can be applied multiple times without changing the result.

```java
CassandraSink.addSink(input)
```

Check out the [Cassandra Sink documentation for more details](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/connectors/cassandra.html).

## Table API and SQL

 The Table API is a SQL-like expression language for relational stream and batch processing that can be easily embedded in Flink’s DataSet and DataStream APIs (for both Java and Scala).

```java
Table custT = tableEnv
  .toTable(custDs, &quot;name, zipcode&quot;)
  .where(&quot;zipcode = &#39;12345&#39;&quot;)
  .select(&quot;name&quot;)
```

An initial version of this API was already available in Flink 1.0. For Flink 1.1, the community put a lot of work into reworking the architecture of the Table API and integrating it with [Apache Calcite](https://calcite.apache.org).

In this first version, SQL (and Table API) queries on streams are limited to selection, filter, and union operators. Compared to Flink 1.0, the revised Table API supports many more scalar functions and is able to read tables from external sources and write them back to external sinks.

```java
Table result = tableEnv.sql(
  &quot;SELECT STREAM product, amount FROM Orders WHERE product LIKE &#39;%Rubber%&#39;&quot;);
```
A more detailed introduction can be found in the [Flink blog](http://flink.apache.org/news/2016/05/24/stream-sql.html) and the [Table API documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/table.html).

## DataStream API

The DataStream API now exposes **session windows** and **allowed lateness** as first-class citizens.

### Session Windows

 Session windows are ideal for cases where the window boundaries need to adjust to the incoming data. This enables you to have windows that start at individual points in time for each key and that end once there has been a *certain period of inactivity*. The configuration parameter is the session gap that specifies how long to wait for new data before considering a session as closed.

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/session-windows.svg&quot; style=&quot;height:400px&quot;&gt;
&lt;/center&gt;

```java
input.keyBy(&lt;key selector&gt;)
    .window(EventTimeSessionWindows.withGap(Time.minutes(10)))
    .&lt;windowed transformation&gt;(&lt;window function&gt;);
```

### Support for Late Elements

You can now specify how a windowed transformation should deal with late elements and how much lateness is allowed. The parameter for this is called *allowed lateness*. This specifies by how much time elements can be late.

```java
input.keyBy(&lt;key selector&gt;).window(&lt;window assigner&gt;)
    .allowedLateness(&lt;time&gt;)
    .&lt;windowed transformation&gt;(&lt;window function&gt;);
```

Elements that arrive within the allowed lateness are still put into windows and are considered when computing window results. If elements arrive after the allowed lateness they will be dropped. Flink will also make sure that any state held by the windowing operation is garbage collected once the watermark passes the end of a window plus the allowed lateness.

Check out the [Windows documentation for more details](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/windows.html).

## Scala API for Complex Event Processing (CEP)

Flink 1.0 added the initial version of the CEP library. The core of the library is a Pattern API, which allows you to easily specify patterns to match against in your event stream. While in Flink 1.0 this API was only available for Java, Flink 1.1. now exposes the same API for Scala, allowing you to specify your event patterns in a more concise manner.

A more detailed introduction can be found in the [Flink blog]( http://flink.apache.org/news/2016/04/06/cep-monitoring.html) and the [CEP documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/streaming/libs/cep.html).

## Graph generators and new Gelly library algorithms

This release includes many enhancements and new features for graph processing. Gelly now provides a collection of scalable graph generators for common graph types, such as complete, cycle, grid, hypercube, and RMat graphs. A variety of new graph algorithms have been added to the Gelly library, including Global and Local Clustering Coefficient, HITS, and similarity measures (Jaccard and Adamic-Adar).

For a full list of new graph processing features, check out the [Gelly documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/batch/libs/gelly.html).

## Metrics

Flink’s new metrics system allows you to easily gather and expose metrics from your user application to external systems. You can add counters, gauges, and histograms to your application via the runtime context:

```java
Counter counter = getRuntimeContext()
  .getMetricGroup()
  .counter(&quot;my-counter&quot;);
```

All registered metrics will be exposed via reporters. Out of the box, Flinks comes with support for JMX, Ganglia, Graphite, and statsD. In addition to your custom metrics, Flink exposes many internal metrics like checkpoint sizes and JVM stats.

Check out the [Metrics documentation for more details](https://ci.apache.org/projects/flink/flink-docs-release-1.1/apis/metrics.html).

## List of Contributors

The following 95 people contributed to this release:

- Abdullah Ozturk
- Ajay Bhat
- Alexey Savartsov
- Aljoscha Krettek
- Andrea Sella
- Andrew Palumbo
- Chenguang He
- Chiwan Park
- David Moravek
- Dominik Bruhn
- Dyana Rose
- Fabian Hueske
- Flavio Pompermaier
- Gabor Gevay
- Gabor Horvath
- Geoffrey Mon
- Gordon Tai
- Greg Hogan
- Gyula Fora
- Henry Saputra
- Ignacio N. Lucero Ascencio
- Igor Berman
- Ismaël Mejía
- Ivan Mushketyk
- Jark Wu
- Jiri Simsa
- Jonas Traub
- Josh
- Joshi
- Joshua Herman
- Ken Krugler
- Konstantin Knauf
- Lasse Dalegaard
- Li Fanxi
- MaBiao
- Mao Wei
- Mark Reddy
- Martin Junghanns
- Martin Liesenberg
- Maximilian Michels
- Michal Fijolek
- Márton Balassi
- Nathan Howell
- Niels Basjes
- Niels Zeilemaker
- Phetsarath, Sourigna
- Robert Metzger
- Scott Kidder
- Sebastian Klemke
- Shahin
- Shannon Carey
- Shannon Quinn
- Stefan Richter
- Stefano Baghino
- Stefano Bortoli
- Stephan Ewen
- Steve Cosenza
- Sumit Chawla
- Tatu Saloranta
- Tianji Li
- Till Rohrmann
- Todd Lisonbee
- Tony Baines
- Trevor Grant
- Ufuk Celebi
- Vasudevan
- Yijie Shen
- Zack Pierce
- Zhai Jia
- chengxiang li
- chobeat
- danielblazevski
- dawid
- dawidwys
- eastcirclek
- erli ding
- gallenvara
- kl0u
- mans2singh
- markreddy
- mjsax
- nikste
- omaralvarez
- philippgrulich
- ramkrishna
- sahitya-pavurala
- samaitra
- smarthi
- spkavuly
- subhankar
- twalthr
- vasia
- xueyan.li
- zentol
- 卫乐
</description>
<pubDate>Mon, 08 Aug 2016 13:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/08/08/release-1.1.0.html</link>
<guid isPermaLink="true">/news/2016/08/08/release-1.1.0.html</guid>
</item>

<item>
<title>Stream Processing for Everyone with SQL and Apache Flink</title>
<description>The capabilities of open source systems for distributed stream processing have evolved significantly over the last years. Initially, the first systems in the field (notably [Apache Storm](https://storm.apache.org)) provided low latency processing, but were limited to at-least-once guarantees, processing-time semantics, and rather low-level APIs. Since then, several new systems emerged and pushed the state of the art of open source stream processing in several dimensions. Today, users of Apache Flink or [Apache Beam](https://beam.incubator.apache.org) can use fluent Scala and Java APIs to implement stream processing jobs that operate in event-time with exactly-once semantics at high throughput and low latency. 

In the meantime, stream processing has taken off in the industry. We are witnessing a rapidly growing interest in stream processing which is reflected by prevalent deployments of streaming processing infrastructure such as [Apache Kafka](https://kafka.apache.org) and Apache Flink. The increasing number of available data streams results in a demand for people that can analyze streaming data and turn it into real-time insights. However, stream data analysis requires a special skill set including knowledge of streaming concepts such as the characteristics of unbounded streams, windows, time, and state as well as the skills to implement stream analysis jobs usually against Java or Scala APIs. People with this skill set are rare and hard to find.

About six months ago, the Apache Flink community started an effort to add a SQL interface for stream data analysis. SQL is *the* standard language to access and process data. Everybody who occasionally analyzes data is familiar with SQL. Consequently, a SQL interface for stream data processing will make this technology accessible to a much wider audience. Moreover, SQL support for streaming data will also enable new use cases such as interactive and ad-hoc stream analysis and significantly simplify many applications including stream ingestion and simple transformations. In this blog post, we report on the current status, architectural design, and future plans of the Apache Flink community to implement support for SQL as a language for analyzing data streams.

## Where did we come from?

With the [0.9.0-milestone1](http://flink.apache.org/news/2015/04/13/release-0.9.0-milestone1.html) release, Apache Flink added an API to process relational data with SQL-like expressions called the Table API. The central concept of this API is a Table, a structured data set or stream on which relational operations can be applied. The Table API is tightly integrated with the DataSet and DataStream API. A Table can be easily created from a DataSet or DataStream and can also be converted back into a DataSet or DataStream as the following example shows

```scala
val execEnv = ExecutionEnvironment.getExecutionEnvironment
val tableEnv = TableEnvironment.getTableEnvironment(execEnv)

// obtain a DataSet from somewhere
val tempData: DataSet[(String, Long, Double)] =

// convert the DataSet to a Table
val tempTable: Table = tempData.toTable(tableEnv, &#39;location, &#39;time, &#39;tempF)
// compute your result
val avgTempCTable: Table = tempTable
 .where(&#39;location.like(&quot;room%&quot;))
 .select(
   (&#39;time / (3600 * 24)) as &#39;day, 
   &#39;Location as &#39;room, 
   ((&#39;tempF - 32) * 0.556) as &#39;tempC
  )
 .groupBy(&#39;day, &#39;room)
 .select(&#39;day, &#39;room, &#39;tempC.avg as &#39;avgTempC)
// convert result Table back into a DataSet and print it
avgTempCTable.toDataSet[Row].print()
```

Although the example shows Scala code, there is also an equivalent Java version of the Table API. The following picture depicts the original architecture of the Table API.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/stream-sql/old-table-api.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

A Table is created from a DataSet or DataStream and transformed into a new Table by applying relational transformations such as `filter`, `join`, or `select` on them. Internally, a logical table operator tree is constructed from the applied Table transformations. When a Table is translated back into a DataSet or DataStream, the respective translator translates the logical operator tree into DataSet or DataStream operators. Expressions like `&#39;location.like(&quot;room%&quot;)` are compiled into Flink functions via code generation.

However, the original Table API had a few limitations. First of all, it could not stand alone. Table API queries had to be always embedded into a DataSet or DataStream program. Queries against batch Tables did not support outer joins, sorting, and many scalar functions which are commonly used in SQL queries. Queries against streaming tables only supported filters, union, and projections and no aggregations or joins. Also, the translation process did not leverage query optimization techniques except for the physical optimization that is applied to all DataSet programs.

## Table API joining forces with SQL

The discussion about adding support for SQL came up a few times in the Flink community. With Flink 0.9 and the availability of the Table API, code generation for relational expressions, and runtime operators, the foundation for such an extension seemed to be there and SQL support the next logical step. On the other hand, the community was also well aware of the multitude of dedicated &quot;SQL-on-Hadoop&quot; solutions in the open source landscape ([Apache Hive](https://hive.apache.org), [Apache Drill](https://drill.apache.org), [Apache Impala](http://impala.io), [Apache Tajo](https://tajo.apache.org), just to name a few). Given these alternatives, we figured that time would be better spent improving Flink in other ways than implementing yet another SQL-on-Hadoop solution. 

However, with the growing popularity of stream processing and the increasing adoption of Flink in this area, the Flink community saw the need for a simpler API to enable more users to analyze streaming data. About half a year ago, we decided to take the Table API to the next level, extend the stream processing capabilities of the Table API, and add support for SQL on streaming data. What we came up with was a revised architecture for a Table API that supports SQL (and Table API) queries on streaming and static data sources. We did not want to reinvent the wheel and decided to build the new Table API on top of [Apache Calcite](https://calcite.apache.org), a popular SQL parser and optimizer framework. Apache Calcite is used by many projects including Apache Hive, Apache Drill, Cascading, and many [more](https://calcite.apache.org/docs/powered_by.html). Moreover, the Calcite community put [SQL on streams](https://calcite.apache.org/docs/stream.html) on their roadmap which makes it a perfect fit for Flink&#39;s SQL interface.

Calcite is central in the new design as the following architecture sketch shows:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/stream-sql/new-table-api.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

The new architecture features two integrated APIs to specify relational queries, the Table API and SQL. Queries of both APIs are validated against a catalog of registered tables and converted into Calcite&#39;s representation for logical plans. In this representation, stream and batch queries look exactly the same. Next, Calcite&#39;s cost-based optimizer applies transformation rules and optimizes the logical plans. Depending on the nature of the sources (streaming or static) we use different rule sets. Finally, the optimized plan is translated into a regular Flink DataStream or DataSet program. This step involves again code generation to compile relational expressions into Flink functions.

The new architecture of the Table API maintains the basic principles of the original Table API and improves it. It keeps a uniform interface for relational queries on streaming and static data. In addition, we take advantage of Calcite&#39;s query optimization framework and SQL parser. The design builds upon Flink&#39;s established APIs, i.e., the DataStream API that offers low-latency, high-throughput stream processing with exactly-once semantics and consistent results due to event-time processing, and the DataSet API with robust and efficient in-memory operators and pipelined data exchange. Any improvements to Flink&#39;s core APIs and engine will automatically improve the execution of Table API and SQL queries.

With this effort, we are adding SQL support for both streaming and static data to Flink. However, we do not want to see this as a competing solution to dedicated, high-performance SQL-on-Hadoop solutions, such as Impala, Drill, and Hive. Instead, we see the sweet spot of Flink&#39;s SQL integration primarily in providing access to streaming analytics to a wider audience. In addition, it will facilitate integrated applications that use Flink&#39;s API&#39;s as well as SQL while being executed on a single runtime engine.

## How will Flink&#39;s SQL on streams look like?

So far we discussed the motivation for and architecture of Flink&#39;s stream SQL interface, but how will it actually look like? The new SQL interface is integrated into the Table API. DataStreams, DataSets, and external data sources can be registered as tables at the `TableEnvironment` in order to make them queryable with SQL. The `TableEnvironment.sql()` method states a SQL query and returns its result as a Table. The following example shows a complete program that reads a streaming table from a JSON encoded Kafka topic, processes it with a SQL query and writes the resulting stream into another Kafka topic. Please note that the KafkaJsonSource and KafkaJsonSink are under development and not available yet. In the future, TableSources and TableSinks can be persisted to and loaded from files to ease reuse of source and sink definitions and to reduce boilerplate code.

```scala
// get environments
val execEnv = StreamExecutionEnvironment.getExecutionEnvironment
val tableEnv = TableEnvironment.getTableEnvironment(execEnv)

// configure Kafka connection
val kafkaProps = ...
// define a JSON encoded Kafka topic as external table
val sensorSource = new KafkaJsonSource[(String, Long, Double)](
    &quot;sensorTopic&quot;,
    kafkaProps,
    (&quot;location&quot;, &quot;time&quot;, &quot;tempF&quot;))

// register external table
tableEnv.registerTableSource(&quot;sensorData&quot;, sensorSource)

// define query in external table
val roomSensors: Table = tableEnv.sql(
    &quot;SELECT STREAM time, location AS room, (tempF - 32) * 0.556 AS tempC &quot; +
    &quot;FROM sensorData &quot; +
    &quot;WHERE location LIKE &#39;room%&#39;&quot;
  )

// define a JSON encoded Kafka topic as external sink
val roomSensorSink = new KafkaJsonSink(...)

// define sink for room sensor data and execute query
roomSensors.toSink(roomSensorSink)
execEnv.execute()
```

You might have noticed that this example left out the most interesting aspects of stream data processing: window aggregates and joins. How will these operations be expressed in SQL? Well, that is a very good question. The Apache Calcite community put out an excellent proposal that discusses the syntax and semantics of [SQL on streams](https://calcite.apache.org/docs/stream.html). It describes Calcite’s stream SQL as *&quot;an extension to standard SQL, not another ‘SQL-like’ language&quot;*. This has several benefits. First, people who are familiar with standard SQL will be able to analyze data streams without learning a new syntax. Queries on static tables and streams are (almost) identical and can be easily ported. Moreover it is possible to specify queries that reference static and streaming tables at the same time which goes well together with Flink’s vision to handle batch processing as a special case of stream processing, i.e., as processing finite streams. Finally, using standard SQL for stream data analysis means following a well established standard that is supported by many tools.

Although we haven’t completely fleshed out the details of how windows will be defined in Flink’s SQL syntax and Table API, the following examples show how a tumbling window query could look like in SQL and the Table API.

### SQL (following the syntax proposal of Calcite’s streaming SQL document)

```sql
SELECT STREAM 
  TUMBLE_END(time, INTERVAL &#39;1&#39; DAY) AS day, 
  location AS room, 
  AVG((tempF - 32) * 0.556) AS avgTempC
FROM sensorData
WHERE location LIKE &#39;room%&#39;
GROUP BY TUMBLE(time, INTERVAL &#39;1&#39; DAY), location
```

### Table API

```scala
val avgRoomTemp: Table = tableEnv.ingest(&quot;sensorData&quot;)
  .where(&#39;location.like(&quot;room%&quot;))
  .partitionBy(&#39;location)
  .window(Tumbling every Days(1) on &#39;time as &#39;w)
  .select(&#39;w.end, &#39;location, , ((&#39;tempF - 32) * 0.556).avg as &#39;avgTempCs)
```

## What&#39;s up next?

The Flink community is actively working on SQL support for the next minor version Flink 1.1.0. In the first version, SQL (and Table API) queries on streams will be limited to selection, filter, and union operators. Compared to Flink 1.0.0, the revised Table API will support many more scalar functions and be able to read tables from external sources and write them back to external sinks. A lot of work went into reworking the architecture of the Table API and integrating Apache Calcite. 

In Flink 1.2.0, the feature set of SQL on streams will be significantly extended. Among other things, we plan to support different types of window aggregates and maybe also streaming joins. For this effort, we want to closely collaborate with the Apache Calcite community and help extending Calcite&#39;s support for relational operations on streaming data when necessary.

If this post made you curious and you want to try out Flink’s SQL interface and the new Table API, we encourage you to do so! Simply clone the SNAPSHOT [master branch](https://github.com/apache/flink/tree/master) and check out the [Table API documentation for the SNAPSHOT version](https://ci.apache.org/projects/flink/flink-docs-master/apis/table.html). Please note that the branch is under heavy development, and hence some code examples in this blog post might not work. We are looking forward to your feedback and welcome contributions.</description>
<pubDate>Tue, 24 May 2016 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/05/24/stream-sql.html</link>
<guid isPermaLink="true">/news/2016/05/24/stream-sql.html</guid>
</item>

<item>
<title>Flink 1.0.3 Released</title>
<description>Today, the Flink community released Flink version **1.0.3**, the third bugfix release of the 1.0 series.

We **recommend all users updating to this release** by bumping the version of your Flink dependencies to `1.0.3` and updating the binaries on the server. You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

## Fixed Issues

### Bug

* [[FLINK-3790](https://issues.apache.org/jira/browse/FLINK-3790)] [streaming] Use proper hadoop config in rolling sink
* [[FLINK-3840](https://issues.apache.org/jira/browse/FLINK-3840)] Remove Testing Files in RocksDB Backend
* [[FLINK-3835](https://issues.apache.org/jira/browse/FLINK-3835)] [optimizer] Add input id to JSON plan to resolve ambiguous input names
* [hotfix] OptionSerializer.duplicate to respect stateful element serializer
* [[FLINK-3803](https://issues.apache.org/jira/browse/FLINK-3803)] [runtime] Pass CheckpointStatsTracker to ExecutionGraph
* [hotfix] [cep] Make cep window border treatment consistent

### Improvement

* [[FLINK-3678](https://issues.apache.org/jira/browse/FLINK-3678)] [dist, docs] Make Flink logs directory configurable

### Docs

* [docs] Add note about S3AFileSystem &#39;buffer.dir&#39; property
* [docs] Update AWS S3 docs

### Tests

* [[FLINK-3860](https://issues.apache.org/jira/browse/FLINK-3860)] [connector-wikiedits] Add retry loop to WikipediaEditsSourceTest
* [streaming-contrib] Fix port clash in DbStateBackend tests
</description>
<pubDate>Wed, 11 May 2016 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/05/11/release-1.0.3.html</link>
<guid isPermaLink="true">/news/2016/05/11/release-1.0.3.html</guid>
</item>

<item>
<title>Flink 1.0.2 Released</title>
<description>Today, the Flink community released Flink version **1.0.2**, the second bugfix release of the 1.0 series.

We **recommend all users updating to this release** by bumping the version of your Flink dependencies to `1.0.2` and updating the binaries on the server. You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

## Fixed Issues

### Bug

* [[FLINK-3657](https://issues.apache.org/jira/browse/FLINK-3657)] [dataSet] Change access of DataSetUtils.countElements() to &#39;public&#39;
* [[FLINK-3762](https://issues.apache.org/jira/browse/FLINK-3762)] [core] Enable Kryo reference tracking
* [[FLINK-3732](https://issues.apache.org/jira/browse/FLINK-3732)] [core] Fix potential null deference in ExecutionConfig#equals()
* [[FLINK-3760](https://issues.apache.org/jira/browse/FLINK-3760)] Fix StateDescriptor.readObject
* [[FLINK-3730](https://issues.apache.org/jira/browse/FLINK-3730)] Fix RocksDB Local Directory Initialization
* [[FLINK-3712](https://issues.apache.org/jira/browse/FLINK-3712)] Make all dynamic properties available to the CLI frontend
* [[FLINK-3688](https://issues.apache.org/jira/browse/FLINK-3688)] WindowOperator.trigger() does not emit Watermark anymore
* [[FLINK-3697](https://issues.apache.org/jira/browse/FLINK-3697)] Properly access type information for nested POJO key selection

### Improvement

- [[FLINK-3654](https://issues.apache.org/jira/browse/FLINK-3654)] Disable Write-Ahead-Log in RocksDB State

### Docs
- [[FLINK-2544](https://issues.apache.org/jira/browse/FLINK-2544)] [docs] Add Java 8 version for building PowerMock tests to docs
- [[FLINK-3469](https://issues.apache.org/jira/browse/FLINK-3469)] [docs] Improve documentation for grouping keys
- [[FLINK-3634](https://issues.apache.org/jira/browse/FLINK-3634)] [docs] Fix documentation for DataSetUtils.zipWithUniqueId()
- [[FLINK-3711](https://issues.apache.org/jira/browse/FLINK-3711)][docs] Documentation of Scala fold()() uses correct syntax

### Tests

- [[FLINK-3716](https://issues.apache.org/jira/browse/FLINK-3716)] [kafka consumer] Decreasing socket timeout so testFailOnNoBroker() will pass before JUnit timeout
</description>
<pubDate>Fri, 22 Apr 2016 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/04/22/release-1.0.2.html</link>
<guid isPermaLink="true">/news/2016/04/22/release-1.0.2.html</guid>
</item>

<item>
<title>Flink Forward 2016 Call for Submissions Is Now Open</title>
<description>We are happy to announce that the call for submissions for Flink Forward 2016 is now open! The conference will take place September 12-14, 2016 in Berlin, Germany, bringing together the open source stream processing community. Most Apache Flink committers will attend the conference, making it the ideal venue to learn more about the project and its roadmap and connect with the community.

The conference welcomes submissions on everything Flink-related, including experiences with using Flink, products based on Flink, technical talks on extending Flink, as well as connecting Flink with other open source or proprietary software.

Read more [here](http://flink-forward.org/).</description>
<pubDate>Thu, 14 Apr 2016 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/04/14/flink-forward-announce.html</link>
<guid isPermaLink="true">/news/2016/04/14/flink-forward-announce.html</guid>
</item>

<item>
<title>Introducing Complex Event Processing (CEP) with Apache Flink</title>
<description>With the ubiquity of sensor networks and smart devices continuously collecting more and more data, we face the challenge to analyze an ever growing stream of data in near real-time. 
Being able to react quickly to changing trends or to deliver up to date business intelligence can be a decisive factor for a company’s success or failure. 
A key problem in real time processing is the detection of event patterns in data streams.

Complex event processing (CEP) addresses exactly this problem of matching continuously incoming events against a pattern. 
The result of a matching are usually complex events which are derived from the input events. 
In contrast to traditional DBMSs where a query is executed on stored data, CEP executes data on a stored query. 
All data which is not relevant for the query can be immediately discarded. 
The advantages of this approach are obvious, given that CEP queries are applied on a potentially infinite stream of data. 
Furthermore, inputs are processed immediately. 
Once the system has seen all events for a matching sequence, results are emitted straight away. 
This aspect effectively leads to CEP’s real time analytics capability.

Consequently, CEP’s processing paradigm drew significant interest and found application in a wide variety of use cases. 
Most notably, CEP is used nowadays for financial applications such as stock market trend and credit card fraud detection. 
Moreover, it is used in RFID-based tracking and monitoring, for example, to detect thefts in a warehouse where items are not properly checked out. 
CEP can also be used to detect network intrusion by specifying patterns of suspicious user behaviour.

Apache Flink with its true streaming nature and its capabilities for low latency as well as high throughput stream processing is a natural fit for CEP workloads. 
Consequently, the Flink community has introduced the first version of a new [CEP library](https://ci.apache.org/projects/flink/flink-docs-master/apis/streaming/libs/cep.html) with [Flink 1.0](http://flink.apache.org/news/2016/03/08/release-1.0.0.html). 
In the remainder of this blog post, we introduce Flink’s CEP library and we illustrate its ease of use through the example of monitoring a data center.

## Monitoring and alert generation for data centers

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/cep-monitoring.svg&quot; style=&quot;width:600px;margin:15px&quot;&gt;
&lt;/center&gt;

Assume we have a data center with a number of racks. 
For each rack the power consumption and the temperature are monitored. 
Whenever such a measurement takes place, a new power or temperature event is generated, respectively. 
Based on this monitoring event stream, we want to detect racks that are about to overheat, and dynamically adapt their workload and cooling.

For this scenario we use a two staged approach. 
First, we monitor the temperature events. 
Whenever we see two consecutive events whose temperature exceeds a threshold value, we generate a temperature warning with the current average temperature. 
A temperature warning does not necessarily indicate that a rack is about to overheat. 
But whenever we see two consecutive warnings with increasing temperatures, then we want to issue an alert for this rack. 
This alert can then lead to countermeasures to cool the rack.

### Implementation with Apache Flink

First, we define the messages of the incoming monitoring event stream. 
Every monitoring message contains its originating rack ID. 
The temperature event additionally contains the current temperature and the power consumption event contains the current voltage. 
We model the events as POJOs:

```java
public abstract class MonitoringEvent {
    private int rackID;
    ...
}

public class TemperatureEvent extends MonitoringEvent {
    private double temperature;
    ...
}

public class PowerEvent extends MonitoringEvent {
    private double voltage;
    ...
}
```

Now we can ingest the monitoring event stream using one of Flink’s connectors (e.g. Kafka, RabbitMQ, etc.). 
This will give us a `DataStream&lt;MonitoringEvent&gt; inputEventStream` which we will use as the input for Flink’s CEP operator. 
But first, we have to define the event pattern to detect temperature warnings. 
The CEP library offers an intuitive [Pattern API](https://ci.apache.org/projects/flink/flink-docs-master/apis/streaming/libs/cep.html#the-pattern-api) to easily define these complex patterns.

Every pattern consists of a sequence of events which can have optional filter conditions assigned. 
A pattern always starts with a first event to which we will assign the name `“First Event”`.

```java
Pattern.&lt;MonitoringEvent&gt;begin(&quot;First Event&quot;);
```

This pattern will match every monitoring event. 
Since we are only interested in `TemperatureEvents` whose temperature is above a threshold value, we have to add an additional subtype constraint and a where clause:

```java
Pattern.&lt;MonitoringEvent&gt;begin(&quot;First Event&quot;)
    .subtype(TemperatureEvent.class)
    .where(evt -&gt; evt.getTemperature() &gt;= TEMPERATURE_THRESHOLD);
```

As stated before, we want to generate a `TemperatureWarning` if and only if we see two consecutive `TemperatureEvents` for the same rack whose temperatures are too high. 
The Pattern API offers the `next` call which allows us to add a new event to our pattern. 
This event has to follow directly the first matching event in order for the whole pattern to match.

```java
Pattern&lt;MonitoringEvent, ?&gt; warningPattern = Pattern.&lt;MonitoringEvent&gt;begin(&quot;First Event&quot;)
    .subtype(TemperatureEvent.class)
    .where(evt -&gt; evt.getTemperature() &gt;= TEMPERATURE_THRESHOLD)
    .next(&quot;Second Event&quot;)
    .subtype(TemperatureEvent.class)
    .where(evt -&gt; evt.getTemperature() &gt;= TEMPERATURE_THRESHOLD)
    .within(Time.seconds(10));
```

The final pattern definition also contains the `within` API call which defines that two consecutive `TemperatureEvents` have to occur within a time interval of 10 seconds for the pattern to match. 
Depending on the time characteristic setting, this can either be processing, ingestion or event time.

Having defined the event pattern, we can now apply it on the `inputEventStream`.

```java
PatternStream&lt;MonitoringEvent&gt; tempPatternStream = CEP.pattern(
    inputEventStream.keyBy(&quot;rackID&quot;),
    warningPattern);
```

Since we want to generate our warnings for each rack individually, we `keyBy` the input event stream by the `“rackID”` POJO field. 
This enforces that matching events of our pattern will all have the same rack ID.

The `PatternStream&lt;MonitoringEvent&gt;` gives us access to successfully matched event sequences. 
They can be accessed using the `select` API call. 
The `select` API call takes a `PatternSelectFunction` which is called for every matching event sequence. 
The event sequence is provided as a `Map&lt;String, MonitoringEvent&gt;` where each `MonitoringEvent` is identified by its assigned event name. 
Our pattern select function generates for each matching pattern a `TemperatureWarning` event.

```java
public class TemperatureWarning {
    private int rackID;
    private double averageTemperature;
    ...
}

DataStream&lt;TemperatureWarning&gt; warnings = tempPatternStream.select(
    (Map&lt;String, MonitoringEvent&gt; pattern) -&gt; {
        TemperatureEvent first = (TemperatureEvent) pattern.get(&quot;First Event&quot;);
        TemperatureEvent second = (TemperatureEvent) pattern.get(&quot;Second Event&quot;);

        return new TemperatureWarning(
            first.getRackID(), 
            (first.getTemperature() + second.getTemperature()) / 2);
    }
);
```

Now we have generated a new complex event stream `DataStream&lt;TemperatureWarning&gt; warnings` from the initial monitoring event stream. 
This complex event stream can again be used as the input for another round of complex event processing. 
We use the `TemperatureWarnings` to generate `TemperatureAlerts` whenever we see two consecutive `TemperatureWarnings` for the same rack with increasing temperatures. 
The `TemperatureAlerts` have the following definition:

```java
public class TemperatureAlert {
    private int rackID;
    ...
}
```

At first, we have to define our alert event pattern:

```java
Pattern&lt;TemperatureWarning, ?&gt; alertPattern = Pattern.&lt;TemperatureWarning&gt;begin(&quot;First Event&quot;)
    .next(&quot;Second Event&quot;)
    .within(Time.seconds(20));
```

This definition says that we want to see two `TemperatureWarnings` within 20 seconds. 
The first event has the name `“First Event”` and the second consecutive event has the name `“Second Event”`. 
The individual events don’t have a where clause assigned, because we need access to both events in order to decide whether the temperature is increasing. 
Therefore, we apply the filter condition in the select clause. 
But first, we obtain again a `PatternStream`.

```java
PatternStream&lt;TemperatureWarning&gt; alertPatternStream = CEP.pattern(
    warnings.keyBy(&quot;rackID&quot;),
    alertPattern);
```

Again, we `keyBy` the warnings input stream by the `&quot;rackID&quot;` so that we generate our alerts for each rack individually. 
Next we apply the `flatSelect` method which will give us access to matching event sequences and allows us to output an arbitrary number of complex events. 
Thus, we will only generate a `TemperatureAlert` if and only if the temperature is increasing.

```java
DataStream&lt;TemperatureAlert&gt; alerts = alertPatternStream.flatSelect(
    (Map&lt;String, TemperatureWarning&gt; pattern, Collector&lt;TemperatureAlert&gt; out) -&gt; {
        TemperatureWarning first = pattern.get(&quot;First Event&quot;);
        TemperatureWarning second = pattern.get(&quot;Second Event&quot;);

        if (first.getAverageTemperature() &lt; second.getAverageTemperature()) {
            out.collect(new TemperatureAlert(first.getRackID()));
        }
    });
```

The `DataStream&lt;TemperatureAlert&gt; alerts` is the data stream of temperature alerts for each rack. 
Based on these alerts we can now adapt the workload or cooling for overheating racks.

The full source code for the presented example as well as an example data source which generates randomly monitoring events can be found in [this repository](https://github.com/tillrohrmann/cep-monitoring).

## Conclusion

In this blog post we have seen how easy it is to reason about event streams using Flink’s CEP library. 
Using the example of monitoring and alert generation for a data center, we have implemented a short program which notifies us when a rack is about to overheat and potentially to fail.

In the future, the Flink community will further extend the CEP library’s functionality and expressiveness. 
Next on the road map is support for a regular expression-like pattern specification, including Kleene star, lower and upper bounds, and negation. 
Furthermore, it is planned to allow the where-clause to access fields of previously matched events. 
This feature will allow to prune unpromising event sequences early.

&lt;hr /&gt;

*Note:* The example code requires Flink 1.0.1 or higher.

</description>
<pubDate>Wed, 06 Apr 2016 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/04/06/cep-monitoring.html</link>
<guid isPermaLink="true">/news/2016/04/06/cep-monitoring.html</guid>
</item>

<item>
<title>Flink 1.0.1 Released</title>
<description>Today, the Flink community released Flink version **1.0.1**, the first bugfix release of the 1.0 series.

We **recommend all users updating to this release** by bumping the version of your Flink dependencies to `1.0.1` and updating the binaries on the server. You can find the binaries on the updated [Downloads page]({{ site.baseurl }}/downloads.html).

## Fixed Issues

&lt;h3&gt;Bug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3179&#39;&gt;FLINK-3179&lt;/a&gt;] -         Combiner is not injected if Reduce or GroupReduce input is explicitly partitioned
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3472&#39;&gt;FLINK-3472&lt;/a&gt;] -         JDBCInputFormat.nextRecord(..) has misleading message on NPE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3491&#39;&gt;FLINK-3491&lt;/a&gt;] -         HDFSCopyUtilitiesTest fails on Windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3495&#39;&gt;FLINK-3495&lt;/a&gt;] -         RocksDB Tests can&amp;#39;t run on Windows
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3533&#39;&gt;FLINK-3533&lt;/a&gt;] -         Update the Gelly docs wrt examples and cluster execution
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3563&#39;&gt;FLINK-3563&lt;/a&gt;] -         .returns() doesn&amp;#39;t compile when using .map() with a custom MapFunction
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3566&#39;&gt;FLINK-3566&lt;/a&gt;] -         Input type validation often fails on custom TypeInfo implementations
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3578&#39;&gt;FLINK-3578&lt;/a&gt;] -         Scala DataStream API does not support Rich Window Functions
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3595&#39;&gt;FLINK-3595&lt;/a&gt;] -         Kafka09 consumer thread does not interrupt when stuck in record emission
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3602&#39;&gt;FLINK-3602&lt;/a&gt;] -         Recursive Types are not supported / crash TypeExtractor
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3621&#39;&gt;FLINK-3621&lt;/a&gt;] -         Misleading documentation of memory configuration parameters
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3629&#39;&gt;FLINK-3629&lt;/a&gt;] -         In wikiedits Quick Start example, &amp;quot;The first call, .window()&amp;quot; should be &amp;quot;The first call, .timeWindow()&amp;quot;
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3651&#39;&gt;FLINK-3651&lt;/a&gt;] -         Fix faulty RollingSink Restore
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3653&#39;&gt;FLINK-3653&lt;/a&gt;] -         recovery.zookeeper.storageDir is not documented on the configuration page
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3663&#39;&gt;FLINK-3663&lt;/a&gt;] -         FlinkKafkaConsumerBase.logPartitionInfo is missing a log marker
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3681&#39;&gt;FLINK-3681&lt;/a&gt;] -         CEP library does not support Java 8 lambdas as select function
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3682&#39;&gt;FLINK-3682&lt;/a&gt;] -         CEP operator does not set the processing timestamp correctly
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3684&#39;&gt;FLINK-3684&lt;/a&gt;] -         CEP operator does not forward watermarks properly
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Improvement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3570&#39;&gt;FLINK-3570&lt;/a&gt;] -         Replace random NIC selection heuristic by InetAddress.getLocalHost
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3575&#39;&gt;FLINK-3575&lt;/a&gt;] -         Update Working With State Section in Doc
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3591&#39;&gt;FLINK-3591&lt;/a&gt;] -         Replace Quickstart K-Means Example by Streaming Example
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2444&#39;&gt;FLINK-2444&lt;/a&gt;] -         Add tests for HadoopInputFormats
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2445&#39;&gt;FLINK-2445&lt;/a&gt;] -         Add tests for HadoopOutputFormats
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 06 Apr 2016 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/04/06/release-1.0.1.html</link>
<guid isPermaLink="true">/news/2016/04/06/release-1.0.1.html</guid>
</item>

<item>
<title>Announcing Apache Flink 1.0.0</title>
<description>The Apache Flink community is pleased to announce the availability of the 1.0.0 release. The community put significant effort into improving and extending Apache Flink since the last release, focusing on improving the experience of writing and executing data stream processing pipelines in production. 

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/flink-1.0.png&quot; style=&quot;height:200px;margin:15px&quot;&gt;
&lt;/center&gt;

Flink version 1.0.0 marks the beginning of the 1.X.X series of releases, which will maintain backwards compatibility with 1.0.0. This means that applications written against stable APIs of Flink 1.0.0 will compile and run with all Flink versions in the 1. series. This is the first time we are formally guaranteeing compatibility in Flink&#39;s history, and we therefore see this release as a major milestone of the project, perhaps the most important since graduation as a top-level project.

Apart from backwards compatibility, Flink 1.0.0 brings a variety of new user-facing features, as well as tons of bug fixes. About 64 contributors provided bug fixes, improvements, and new features such that in total more than 450 JIRA issues could be resolved.

We encourage everyone to [download the release](http://flink.apache.org/downloads.html) and [check out the documentation](https://ci.apache.org/projects/flink/flink-docs-release-1.0/). Feedback through the Flink [mailing lists](http://flink.apache.org/community.html#mailing-lists) is, as always, very welcome!

## Interface stability annotations

Flink 1.0.0 introduces interface stability annotations for API classes and methods. Interfaces defined as `@Public` are guaranteed to remain stable across all releases of the 1.x series. The `@PublicEvolving` annotation marks API features that may be subject to change in future versions.

Flink&#39;s stability annotations will help users to implement applications that compile and execute unchanged against future versions of Flink 1.x. This greatly reduces the complexity for users when upgrading to a newer Flink release.

## Out-of-core state support

Flink 1.0.0 adds a new state backend that uses RocksDB to store state (both windows and user-defined key-value state). [RocksDB](http://rocksdb.org/) is an embedded key/value store database, originally developed by Facebook.
When using this backend, active state in streaming programs can grow well beyond memory. The RocksDB files are stored in a distributed file system such as HDFS or S3 for backups.

## Savepoints and version upgrades

Savepoints are checkpoints of the state of a running streaming job that can be manually triggered by the user while the job is running. Savepoints solve several production headaches, including code upgrades (both application and framework), cluster maintenance and migration, A/B testing and what-if scenarios, as well as testing and debugging. Read more about savepoints at the [data Artisans blog](http://data-artisans.com/how-apache-flink-enables-new-streaming-applications/).

## Library for Complex Event Processing (CEP)

Complex Event Processing has been one of the oldest and more important use cases from stream processing. The new CEP functionality in Flink allows you to use a distributed general-purpose stream processor instead of a specialized CEP system to detect complex patterns in event streams. Get started with [CEP on Flink](https://ci.apache.org/projects/flink/flink-docs-master/apis/streaming/libs/cep.html).

## Enhanced monitoring interface: job submission, checkpoint statistics and backpressure monitoring

The web interface now allows users to submit jobs. Previous Flink releases had a separate service for submitting jobs. The new interface is part of the JobManager frontend. It also works on YARN now.

Backpressure monitoring allows users to trigger a sampling mechanism which analyzes the time operators are waiting for new network buffers. When senders are spending most of their time for new network buffers, they are experiencing backpressure from their downstream operators. Many users requested this feature for understanding bottlenecks in both batch and streaming applications.

## Improved checkpointing control and monitoring

The checkpointing has been extended by a more fine-grained control mechanism: In previous versions, new checkpoints were triggered independent of the speed at which old checkpoints completed. This can lead to situations where new checkpoints are piling up, because they are triggered too frequently.

The checkpoint coordinator now exposes statistics through our REST monitoring API and the web interface. Users can review the checkpoint size and duration on a per-operator basis and see the last completed checkpoints. This is helpful for identifying performance issues, such as processing slowdown by the checkpoints. 

## Improved Kafka connector and support for Kafka 0.9

Flink 1.0 supports both Kafka 0.8 and 0.9. With the new release, Flink exposes Kafka metrics for the producers and the 0.9 consumer through Flink’s accumulator system. We also enhanced the existing connector for Kafka 0.8, allowing users to subscribe to multiple topics in one source.

## Changelog and known issues

This release resolves more than 450 issues, including bug fixes, improvements, and new features. See the [complete changelog]({{ site.baseurl }}/blog/release_1.0.0-changelog_known_issues.html#changelog) and [known issues]({{ site.baseurl }}/blog/release_1.0.0-changelog_known_issues.html#known-issues).

## List of contributors

- Abhishek Agarwal
- Ajay Bhat
- Aljoscha Krettek
- Andra Lungu
- Andrea Sella
- Chesnay Schepler
- Chiwan Park
- Daniel Pape
- Fabian Hueske
- Filipe Correia
- Frederick F. Kautz IV
- Gabor Gevay
- Gabor Horvath
- Georgios Andrianakis
- Greg Hogan
- Gyula Fora
- Henry Saputra
- Hilmi Yildirim
- Hubert Czerpak
- Jark Wu
- Johannes
- Jun Aoki
- Jun Aoki
- Kostas Kloudas
- Li Chengxiang
- Lun Gao
- Martin Junghanns
- Martin Liesenberg
- Matthias J. Sax
- Maximilian Michels
- Márton Balassi
- Nick Dimiduk
- Niels Basjes
- Omer Katz
- Paris Carbone
- Patrice Freydiere
- Peter Vandenabeele
- Piotr Godek
- Prez Cannady
- Robert Metzger
- Romeo Kienzler
- Sachin Goel
- Saumitra Shahapure
- Sebastian Klemke
- Stefano Baghino
- Stephan Ewen
- Stephen Samuel
- Subhobrata Dey
- Suneel Marthi
- Ted Yu
- Theodore Vasiloudis
- Till Rohrmann
- Timo Walther
- Trevor Grant
- Ufuk Celebi
- Ulf Karlsson
- Vasia Kalavri
- fversaci
- madhukar
- qingmeng.wyh
- ramkrishna
- rtudoran
- sahitya-pavurala
- zhangminglei
</description>
<pubDate>Tue, 08 Mar 2016 13:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/03/08/release-1.0.0.html</link>
<guid isPermaLink="true">/news/2016/03/08/release-1.0.0.html</guid>
</item>

<item>
<title>Flink 0.10.2 Released</title>
<description>Today, the Flink community released Flink version **0.10.2**, the second bugfix release of the 0.10 series.

We **recommend all users updating to this release** by bumping the version of your Flink dependencies to `0.10.2` and updating the binaries on the server.

## Issues fixed

* [FLINK-3242](https://issues.apache.org/jira/browse/FLINK-3242): Adjust StateBackendITCase for 0.10 signatures of state backends
* [FLINK-3236](https://issues.apache.org/jira/browse/FLINK-3236): Flink user code classloader as parent classloader from Flink core classes
* [FLINK-2962](https://issues.apache.org/jira/browse/FLINK-2962): Cluster startup script refers to unused variable
* [FLINK-3151](https://issues.apache.org/jira/browse/FLINK-3151): Downgrade to Netty version 4.0.27.Final
* [FLINK-3224](https://issues.apache.org/jira/browse/FLINK-3224): Call setInputType() on output formats that implement InputTypeConfigurable
* [FLINK-3218](https://issues.apache.org/jira/browse/FLINK-3218): Fix overriding of user parameters when merging Hadoop configurations
* [FLINK-3189](https://issues.apache.org/jira/browse/FLINK-3189): Fix argument parsing of CLI client INFO action
* [FLINK-3176](https://issues.apache.org/jira/browse/FLINK-3176): Improve documentation for window apply
* [FLINK-3185](https://issues.apache.org/jira/browse/FLINK-3185): Log error on failure during recovery
* [FLINK-3185](https://issues.apache.org/jira/browse/FLINK-3185): Don&#39;t swallow test failure Exception
* [FLINK-3147](https://issues.apache.org/jira/browse/FLINK-3147): Expose HadoopOutputFormatBase fields as protected
* [FLINK-3145](https://issues.apache.org/jira/browse/FLINK-3145): Pin Kryo version of transitive dependencies
* [FLINK-3143](https://issues.apache.org/jira/browse/FLINK-3143): Update Closure Cleaner&#39;s ASM references to ASM5
* [FLINK-3136](https://issues.apache.org/jira/browse/FLINK-3136): Fix shaded imports in ClosureCleaner.scala
* [FLINK-3108](https://issues.apache.org/jira/browse/FLINK-3108): JoinOperator&#39;s with() calls the wrong TypeExtractor method
* [FLINK-3125](https://issues.apache.org/jira/browse/FLINK-3125): Web server starts also when JobManager log files cannot be accessed.
* [FLINK-3080](https://issues.apache.org/jira/browse/FLINK-3080): Relax restrictions of DataStream.union()
* [FLINK-3081](https://issues.apache.org/jira/browse/FLINK-3081): Properly stop periodic Kafka committer
* [FLINK-3082](https://issues.apache.org/jira/browse/FLINK-3082): Fixed confusing error about an interface that no longer exists
* [FLINK-3067](https://issues.apache.org/jira/browse/FLINK-3067): Enforce zkclient 0.7 for Kafka
* [FLINK-3020](https://issues.apache.org/jira/browse/FLINK-3020): Set number of task slots to maximum parallelism in local execution
</description>
<pubDate>Thu, 11 Feb 2016 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2016/02/11/release-0.10.2.html</link>
<guid isPermaLink="true">/news/2016/02/11/release-0.10.2.html</guid>
</item>

<item>
<title>Flink 2015: A year in review, and a lookout to 2016</title>
<description>With 2015 ending, we thought that this would be good time to reflect
on the amazing work done by the Flink community over this past year,
and how much this community has grown.

Overall, we have seen Flink grow in terms of functionality from an
engine to one of the most complete open-source stream processing
frameworks available. The community grew from a relatively small and
geographically focused team, to a truly global, and one of the largest
big data communities in the the Apache Software Foundation.

We will also look at some interesting stats, including that the
busiest days for Flink are Mondays (who would have thought :-).

# Community growth

Let us start with some simple statistics from [Flink&#39;s
github repository](https://github.com/apache/flink). During 2015, the
Flink community **doubled** in size, from about 75 contributors to
over 150. Forks of the repository more than **tripled** from 160 in
February 2015 to 544 in December 2015, and the number of stars of the
repository almost tripled from 289 to 813.

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/community-growth.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

Although Flink started out geographically in Berlin, Germany, the
community is by now spread all around the globe, with many
contributors from North America, Europe, and Asia. A simple search at
meetup.com for groups that mention Flink as a focus area reveals [16
meetups around the globe](http://apache-flink.meetup.com/):

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/meetup-map.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

# Flink Forward 2015

One of the highlights of the year for Flink was undoubtedly the [Flink
Forward](http://2015.flink-forward.org/) conference, the first conference
on Apache Flink that was held in October in Berlin. More than 250
participants (roughly half based outside Germany where the conference
was held) attended more than 33 technical talks from organizations
including Google, MongoDB, Bouygues Telecom, NFLabs, Euranova, RedHat,
IBM, Huawei, Intel, Ericsson, Capital One, Zalando, Amadeus, the Otto
Group, and ResearchGate. If you have not yet watched their talks,
check out the [slides](http://2015.flink-forward.org/?post_type=day) and
[videos](https://www.youtube.com/playlist?list=PLDX4T_cnKjD31JeWR1aMOi9LXPRQ6nyHO)
from Flink Forward.

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/ff-speakers.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

# Media coverage

And of course, interest in Flink was picked up by the tech
media. During 2015, articles about Flink appeared in
[InfoQ](http://www.infoq.com/Apache-Flink/news/),
[ZDNet](http://www.zdnet.com/article/five-open-source-big-data-projects-to-watch/),
[Datanami](http://www.datanami.com/tag/apache-flink/),
[Infoworld](http://www.infoworld.com/article/2919602/hadoop/flink-hadoops-new-contender-for-mapreduce-spark.html)
(including being one of the [best open source big data tools of
2015](http://www.infoworld.com/article/2982429/open-source-tools/bossie-awards-2015-the-best-open-source-big-data-tools.html)),
the [Gartner
blog](http://blogs.gartner.com/nick-heudecker/apache-flink-offers-a-challenge-to-spark/),
[Dataconomy](http://dataconomy.com/tag/apache-flink/),
[SDTimes](http://sdtimes.com/tag/apache-flink/), the [MapR
blog](https://www.mapr.com/blog/apache-flink-new-way-handle-streaming-data),
[KDnuggets](http://www.kdnuggets.com/2015/08/apache-flink-stream-processing.html),
and
[HadoopSphere](http://www.hadoopsphere.com/2015/02/distributed-data-processing-with-apache.html).

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/appeared-in.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

It is interesting to see that Hadoop Summit EMEA 2016 had a whopping
number of 17 (!) talks submitted that are mentioning Flink in their
title and abstract:

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/hadoop-summit.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

# Fun with stats: when do committers commit?

To get some deeper insight on what is happening in the Flink
community, let us do some analytics on the git log of the project :-)
The easiest thing we can do is count the number of commits at the
repository in 2015. Running

```
git log --pretty=oneline --after=1/1/2015  | wc -l
```

on the Flink repository yields a total of **2203 commits** in 2015.

To dig deeper, we will use an open source tool called gitstats that
will give us some interesting statistics on the committer
behavior. You can create these also yourself and see many more by
following four easy steps:

1. Download gitstats from the [project homepage](http://gitstats.sourceforge.net/).. E.g., on OS X with homebrew, type

```
brew install --HEAD homebrew/head-only/gitstats
```

2. Clone the Apache Flink git repository:

```
git clone git@github.com:apache/flink.git
```

3. Generate the statistics

```
gitstats flink/ flink-stats/
```

4. View all the statistics as an html page using your favorite browser (e.g., chrome):

```
chrome flink-stats/index.html
```

First, we can see a steady growth of lines of code in Flink since the
initial Apache incubator project. During 2015, the codebase almost
**doubled** from 500,000 LOC to 900,000 LOC.

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/code-growth.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

It is interesting to see when committers commit. For Flink, Monday
afternoons are by far the most popular times to commit to the
repository:

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/commit-stats.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

# Feature timeline

So, what were the major features added to Flink and the Flink
ecosystem during 2015? Here is a (non-exhaustive) chronological list:

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/feature-timeline.png&quot; style=&quot;height:400px;margin:15px&quot;&gt;
&lt;/center&gt;

# Roadmap for 2016

With 2015 coming to a close, the Flink community has already started
discussing Flink&#39;s roadmap for the future. Some highlights
are:

* **Runtime scaling of streaming jobs:** streaming jobs are running
    forever, and need to react to a changing environment. Runtime
    scaling means dynamically increasing and decreasing the
    parallelism of a job to sustain certain SLAs, or react to changing
    input throughput.

* **SQL queries for static data sets and streams:** building on top of
    Flink&#39;s Table API, users should be able to write SQL
    queries for static data sets, as well as SQL queries on data
    streams that continuously produce new results.

* **Streaming operators backed by managed memory:** currently,
    streaming operators like user-defined state and windows are backed
    by JVM heap objects. Moving those to Flink managed memory will add
    the ability to spill to disk, GC efficiency, as well as better
    control over memory utilization.

* **Library for detecting temporal event patterns:** a common use case
    for stream processing is detecting patterns in an event stream
    with timestamps. Flink makes this possible with its support for
    event time, so many of these operators can be surfaced in the form
    of a library.

* **Support for Apache Mesos, and resource-dynamic YARN support:**
    support for both Mesos and YARN, including dynamic allocation and
    release of resource for more resource elasticity (for both batch
    and stream processing).

* **Security:** encrypt both the messages exchanged between
    TaskManagers and JobManager, as well as the connections for data
    exchange between workers.

* **More streaming connectors, more runtime metrics, and continuous
    DataStream API enhancements:** add support for more sources and
    sinks (e.g., Amazon Kinesis, Cassandra, Flume, etc), expose more
    metrics to the user, and provide continuous improvements to the
    DataStream API.

If you are interested in these features, we highly encourage you to
take a look at the [current
draft](https://docs.google.com/document/d/1ExmtVpeVVT3TIhO1JoBpC5JKXm-778DAD7eqw5GANwE/edit),
and [join the
discussion](https://mail-archives.apache.org/mod_mbox/flink-dev/201512.mbox/browser)
on the Flink mailing lists.

</description>
<pubDate>Fri, 18 Dec 2015 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2015/12/18/a-year-in-review.html</link>
<guid isPermaLink="true">/news/2015/12/18/a-year-in-review.html</guid>
</item>

<item>
<title>Storm Compatibility in Apache Flink: How to run existing Storm topologies on Flink</title>
<description>[Apache Storm](https://storm.apache.org) was one of the first distributed and scalable stream processing systems available in the open source space offering (near) real-time tuple-by-tuple processing semantics.
Initially released by the developers at Backtype in 2011 under the Eclipse open-source license, it became popular very quickly.
Only shortly afterwards, Twitter acquired Backtype.
Since then, Storm has been growing in popularity, is used in production at many big companies, and is the de-facto industry standard for big data stream processing.
In 2013, Storm entered the Apache incubator program, followed by its graduation to top-level in 2014.

Apache Flink is a stream processing engine that improves upon older technologies like Storm in several dimensions,
including [strong consistency guarantees](https://ci.apache.org/projects/flink/flink-docs-master/internals/stream_checkpointing.html) (&quot;exactly once&quot;),
a higher level [DataStream API](https://ci.apache.org/projects/flink/flink-docs-master/apis/streaming_guide.html),
support for [event time and a rich windowing system](http://flink.apache.org/news/2015/12/04/Introducing-windows.html),
as well as [superior throughput with competitive low latency](https://data-artisans.com/high-throughput-low-latency-and-exactly-once-stream-processing-with-apache-flink/).

While Flink offers several technical benefits over Storm, an existing investment on a codebase of applications developed for Storm often makes it difficult to switch engines.
For these reasons, as part of the Flink 0.10 release, Flink ships with a Storm compatibility package that allows users to:

* Run **unmodified** Storm topologies using Apache Flink benefiting from superior performance.
* **Embed** Storm code (spouts and bolts) as operators inside Flink DataStream programs.

Only minor code changes are required in order to submit the program to Flink instead of Storm.
This minimizes the work for developers to run existing Storm topologies while leveraging Apache Flink’s fast and robust execution engine.

We note that the Storm compatibility package is continuously improving and does not cover the full spectrum of Storm’s API.
However, it is powerful enough to cover many use cases.

## Executing Storm topologies with Flink

&lt;center&gt;
&lt;img src=&quot;{{site.baseurl}}/img/blog/flink-storm.png&quot; style=&quot;height:200px;margin:15px&quot;&gt;
&lt;/center&gt;

The easiest way to use the Storm compatibility package is by executing a whole Storm topology in Flink.
For this, you only need to replace the dependency `storm-core` by `flink-storm` in your Storm project and **change two lines of code** in your original Storm program.

The following example shows a simple Storm-Word-Count-Program that can be executed in Flink.
First, the program is assembled the Storm way without any code change to Spouts, Bolts, or the topology itself.

```java
// assemble topology, the Storm way
TopologyBuilder builder = new TopologyBuilder();
builder.setSpout(&quot;source&quot;, new StormFileSpout(inputFilePath));
builder.setBolt(&quot;tokenizer&quot;, new StormBoltTokenizer())
       .shuffleGrouping(&quot;source&quot;);
builder.setBolt(&quot;counter&quot;, new StormBoltCounter())
       .fieldsGrouping(&quot;tokenizer&quot;, new Fields(&quot;word&quot;));
builder.setBolt(&quot;sink&quot;, new StormBoltFileSink(outputFilePath))
       .shuffleGrouping(&quot;counter&quot;);
```

In order to execute the topology, we need to translate it to a `FlinkTopology` and submit it to a local or remote Flink cluster, very similar to submitting the application to a Storm cluster.&lt;sup&gt;&lt;a href=&quot;#fn1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;

```java
// transform Storm topology to Flink program
// replaces: StormTopology topology = builder.createTopology();
FlinkTopology topology = FlinkTopology.createTopology(builder);

Config conf = new Config();
if(runLocal) {
	// use FlinkLocalCluster instead of LocalCluster
	FlinkLocalCluster cluster = FlinkLocalCluster.getLocalCluster();
	cluster.submitTopology(&quot;WordCount&quot;, conf, topology);
} else {
	// use FlinkSubmitter instead of StormSubmitter
	FlinkSubmitter.submitTopology(&quot;WordCount&quot;, conf, topology);
}
```

As a shorter Flink-style alternative that replaces the Storm-style submission code, you can also use context-based job execution:

```java
// transform Storm topology to Flink program (as above)
FlinkTopology topology = FlinkTopology.createTopology(builder);

// executes locally by default or remotely if submitted with Flink&#39;s command-line client
topology.execute()
```

After the code is packaged in a jar file (e.g., `StormWordCount.jar`), it can be easily submitted to Flink via

```
bin/flink run StormWordCount.jar
```

The used Spouts and Bolts as well as the topology assemble code is not changed at all!
Only the translation and submission step have to be changed to the Storm-API compatible Flink pendants.
This allows for minimal code changes and easy adaption to Flink.

### Embedding Spouts and Bolts in Flink programs

It is also possible to use Spouts and Bolts within a regular Flink DataStream program.
The compatibility package provides wrapper classes for Spouts and Bolts which are implemented as a Flink `SourceFunction` and `StreamOperator` respectively.
Those wrappers automatically translate incoming Flink POJO and `TupleXX` records into Storm&#39;s `Tuple` type and emitted `Values` back into either POJOs or `TupleXX` types for further processing by Flink operators.
As Storm is type agnostic, it is required to specify the output type of embedded Spouts/Bolts manually to get a fully typed Flink streaming program.

```java
// use regular Flink streaming environment
StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

// use Spout as source
DataStream&lt;Tuple1&lt;String&gt;&gt; source = 
  env.addSource(// Flink provided wrapper including original Spout
                new SpoutWrapper&lt;String&gt;(new FileSpout(localFilePath)), 
                // specify output type manually
                TypeExtractor.getForObject(new Tuple1&lt;String&gt;(&quot;&quot;)));
// FileSpout cannot be parallelized
DataStream&lt;Tuple1&lt;String&gt;&gt; text = source.setParallelism(1);

// further processing with Flink
DataStream&lt;Tuple2&lt;String,Integer&gt; tokens = text.flatMap(new Tokenizer()).keyBy(0);

// use Bolt for counting
DataStream&lt;Tuple2&lt;String,Integer&gt; counts =
  tokens.transform(&quot;Counter&quot;,
                   // specify output type manually
                   TypeExtractor.getForObject(new Tuple2&lt;String,Integer&gt;(&quot;&quot;,0))
                   // Flink provided wrapper including original Bolt
                   new BoltWrapper&lt;String,Tuple2&lt;String,Integer&gt;&gt;(new BoltCounter()));

// write result to file via Flink sink
counts.writeAsText(outputPath);

// start Flink job
env.execute(&quot;WordCount with Spout source and Bolt counter&quot;);
```

Although some boilerplate code is needed (we plan to address this soon!), the actual embedded Spout and Bolt code can be used unmodified.
We also note that the resulting program is fully typed, and type errors will be found by Flink&#39;s type extractor even if the original Spouts and Bolts are not.

## Outlook

The Storm compatibility package is currently in beta and undergoes continuous development.
We are currently working on providing consistency guarantees for stateful Bolts.
Furthermore, we want to provide a better API integration for embedded Spouts and Bolts by providing a &quot;StormExecutionEnvironment&quot; as a special extension of Flink&#39;s `StreamExecutionEnvironment`.
We are also investigating the integration of Storm&#39;s higher-level programming API Trident.

## Summary

Flink&#39;s compatibility package for Storm allows using unmodified Spouts and Bolts within Flink.
This enables you to even embed third-party Spouts and Bolts where the source code is not available.
While you can embed Spouts/Bolts in a Flink program and mix-and-match them with Flink operators, running whole topologies is the easiest way to get started and can be achieved with almost no code changes.

If you want to try out Flink&#39;s Storm compatibility package checkout our [Documentation](https://ci.apache.org/projects/flink/flink-docs-master/apis/streaming/storm_compatibility.html).

&lt;hr /&gt;

&lt;sup id=&quot;fn1&quot;&gt;1. We confess, there are three lines changed compared to a Storm project &lt;img class=&quot;emoji&quot; style=&quot;width:16px;height:16px;align:absmiddle&quot; src=&quot;{{site.baseurl}}/img/blog/smirk.png&quot;&gt;---because the example covers local *and* remote execution. &lt;a href=&quot;#ref1&quot; title=&quot;Back to text.&quot;&gt;↩&lt;/a&gt;&lt;/sup&gt;

</description>
<pubDate>Fri, 11 Dec 2015 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2015/12/11/storm-compatibility.html</link>
<guid isPermaLink="true">/news/2015/12/11/storm-compatibility.html</guid>
</item>

<item>
<title>Introducing Stream Windows in Apache Flink</title>
<description>The data analysis space is witnessing an evolution from batch to stream processing for many use cases. Although batch can be handled as a special case of stream processing, analyzing never-ending streaming data often requires a shift in the mindset and comes with its own terminology (for example, “windowing” and “at-least-once”/”exactly-once” processing). This shift and the new terminology can be quite confusing for people being new to the space of stream processing. Apache Flink is a production-ready stream processor with an easy-to-use yet very expressive API to define advanced stream analysis programs. Flink&#39;s API features very flexible window definitions on data streams which let it stand out among other open source stream processors. 

In this blog post, we discuss the concept of windows for stream processing, present Flink&#39;s built-in windows, and explain its support for custom windowing semantics.

## What are windows and what are they good for?

Consider the example of a traffic sensor that counts every 15 seconds the number of vehicles passing a certain location. The resulting stream could look like:

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/window-intro/window-stream.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

If you would like to know, how many vehicles passed that location, you would simply sum the individual counts. However, the nature of a sensor stream is that it continuously produces data. Such a stream never ends and it is not possible to compute a final sum that can be returned. Instead, it is possible to compute rolling sums, i.e., return for each input event an updated sum record. This would yield a new stream of partial sums.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/window-intro/window-rolling-sum.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

However, a stream of partial sums might not be what we are looking for, because it constantly updates the count and even more important, some information such as variation over time is lost. Hence, we might want to rephrase our question and ask for the number of cars that pass the location every minute. This requires us to group the elements of the stream into finite sets, each set corresponding to sixty seconds. This operation is called a *tumbling windows* operation.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/window-intro/window-tumbling-window.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

Tumbling windows discretize a stream into non-overlapping windows. For certain applications it is important that windows are not disjunct because an application might require smoothed aggregates. For example, we can compute every thirty seconds the number of cars passed in the last minute. Such windows are called *sliding windows*.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/window-intro/window-sliding-window.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

Defining windows on a data stream as discussed before is a non-parallel operation. This is because each element of a stream must be processed by the same window operator that decides which windows the element should be added to. Windows on a full stream are called *AllWindows* in Flink. For many applications, a data stream needs to be grouped into multiple logical streams on each of which a window operator can be applied. Think for example about a stream of vehicle counts from multiple traffic sensors (instead of only one sensor as in our previous example), where each sensor monitors a different location. By grouping the stream by sensor id, we can compute windowed traffic statistics for each location in parallel. In Flink, we call such partitioned windows simply *Windows*, as they are the common case for distributed streams. The following figure shows tumbling windows that collect two elements over a stream of `(sensorId, count)` pair elements.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/window-intro/windows-keyed.png&quot; style=&quot;width:75%;margin:15px&quot;&gt;
&lt;/center&gt;

Generally speaking, a window defines a finite set of elements on an unbounded stream. This set can be based on time (as in our previous examples), element counts, a combination of counts and time, or some custom logic to assign elements to windows. Flink&#39;s DataStream API provides concise operators for the most common window operations as well as a generic windowing mechanism that allows users to define very custom windowing logic. In the following we present Flink&#39;s time and count windows before discussing its windowing mechanism in detail.

## Time Windows

As their name suggests, time windows group stream elements by time. For example, a tumbling time window of one minute collects elements for one minute and applies a function on all elements in the window after one minute passed.

Defining tumbling and sliding time windows in Apache Flink is very easy:


```scala
// Stream of (sensorId, carCnt)
val vehicleCnts: DataStream[(Int, Int)] = ...

val tumblingCnts: DataStream[(Int, Int)] = vehicleCnts
  // key stream by sensorId
  .keyBy(0) 
  // tumbling time window of 1 minute length
  .timeWindow(Time.minutes(1))
  // compute sum over carCnt
  .sum(1) 

val slidingCnts: DataStream[(Int, Int)] = vehicleCnts
  .keyBy(0) 
  // sliding time window of 1 minute length and 30 secs trigger interval
  .timeWindow(Time.minutes(1), Time.seconds(30))
  .sum(1)
```


 There is one aspect that we haven&#39;t discussed yet, namely the exact meaning of &quot;*collects elements for one minute*&quot; which boils down to the question, &quot;*How does the stream processor interpret time?*&quot;.

Apache Flink features three different notions of time, namely *processing time*, *event time*, and *ingestion time*. 

1. In **processing time**, windows are defined with respect to the wall clock of the machine that builds and processes a window, i.e., a one minute processing time window collects elements for exactly one minute. 
1. In **event time**, windows are defined with respect to timestamps that are attached to each event record. This is common for many types of events, such as log entries, sensor data, etc, where the timestamp usually represents the time at which the event occurred. Event time has several benefits over processing time. First of all, it decouples the program semantics from the actual serving speed of the source and the processing performance of system. Hence you can process historic data, which is served at maximum speed, and continuously produced data with the same program. It also prevents semantically incorrect results in case of backpressure or delays due to failure recovery. Second, event time windows compute correct results, even if events arrive out-of-order of their timestamp which is common if a data stream gathers events from distributed sources. 
1. **Ingestion time** is a hybrid of processing and event time. It assigns wall clock timestamps to records as soon as they arrive in the system (at the source) and continues processing with event time semantics based on the attached timestamps.

## Count Windows

Apache Flink also features count windows. A tumbling count window of 100 will collect 100 events in a window and evaluate the window when the 100th element has been added. 

In Flink&#39;s DataStream API, tumbling and sliding count windows are defined as follows:

```scala
// Stream of (sensorId, carCnt)
val vehicleCnts: DataStream[(Int, Int)] = ...

val tumblingCnts: DataStream[(Int, Int)] = vehicleCnts
  // key stream by sensorId
  .keyBy(0)
  // tumbling count window of 100 elements size
  .countWindow(100)
  // compute the carCnt sum 
  .sum(1)

val slidingCnts: DataStream[(Int, Int)] = vehicleCnts
  .keyBy(0)
  // sliding count window of 100 elements size and 10 elements trigger interval
  .countWindow(100, 10)
  .sum(1)
```

## Dissecting Flink&#39;s windowing mechanics

Flink&#39;s built-in time and count windows cover a wide range of common window use cases. However, there are of course applications that require custom windowing logic that cannot be addressed by Flink&#39;s built-in windows. In order to support also applications that need very specific windowing semantics, the DataStream API exposes interfaces for the internals of its windowing mechanics. These interfaces give very fine-grained control about the way that windows are built and evaluated. 

The following figure depicts Flink&#39;s windowing mechanism and introduces the components being involved.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/window-intro/window-mechanics.png&quot; style=&quot;width:90%;margin:15px&quot;&gt;
&lt;/center&gt;

Elements that arrive at a window operator are handed to a `WindowAssigner`. The WindowAssigner assigns elements to one or more windows, possibly creating new windows. A `Window` itself is just an identifier for a list of elements and may provide some optional meta information, such as begin and end time in case of a `TimeWindow`. Note that an element can be added to multiple windows, which also means that multiple windows can exist at the same time.

Each window owns a `Trigger` that decides when the window is evaluated or purged. The trigger is called for each element that is inserted into the window and when a previously registered timer times out. On each event, a trigger can decide to fire (i.e., evaluate), purge (remove the window and discard its content), or fire and then purge the window. A trigger that just fires evaluates the window and keeps it as it is, i.e., all elements remain in the window and are evaluated again when the triggers fires the next time. A window can be evaluated several times and exists until it is purged. Note that a window consumes memory until it is purged.

When a Trigger fires, the list of window elements can be given to an optional `Evictor`. The evictor can iterate through the list and decide to cut off some elements from the start of the list, i.e., remove some of the elements that entered the window first. The remaining elements are given to an evaluation function. If no Evictor was defined, the Trigger hands all the window elements directly to the evaluation function.

The evaluation function receives the elements of a window (possibly filtered by an Evictor) and computes one or more result elements for the window. The DataStream API accepts different types of evaluation functions, including predefined aggregation functions such as `sum()`, `min()`, `max()`, as well as a `ReduceFunction`, `FoldFunction`, or `WindowFunction`. A WindowFunction is the most generic evaluation function and receives the window object (i.e, the meta data of the window), the list of window elements, and the window key (in case of a keyed window) as parameters.

These are the components that constitute Flink&#39;s windowing mechanics. We now show step-by-step how to implement custom windowing logic with the DataStream API. We start with a stream of type `DataStream[IN]` and key it using a key selector function that extracts a key of type `KEY` to obtain a `KeyedStream[IN, KEY]`.

```scala
val input: DataStream[IN] = ...

// created a keyed stream using a key selector function
val keyed: KeyedStream[IN, KEY] = input
  .keyBy(myKeySel: (IN) =&gt; KEY)
```

We apply a `WindowAssigner[IN, WINDOW]` that creates windows of type `WINDOW` resulting in a `WindowedStream[IN, KEY, WINDOW]`. In addition, a `WindowAssigner` also provides a default `Trigger` implementation.

```scala
// create windowed stream using a WindowAssigner
var windowed: WindowedStream[IN, KEY, WINDOW] = keyed
  .window(myAssigner: WindowAssigner[IN, WINDOW])
```

We can explicitly specify a `Trigger` to overwrite the default `Trigger` provided by the `WindowAssigner`. Note that specifying a triggers does not add an additional trigger condition but replaces the current trigger.

```scala
// override the default trigger of the WindowAssigner
windowed = windowed
  .trigger(myTrigger: Trigger[IN, WINDOW])
```

We may want to specify an optional `Evictor` as follows.

```scala
// specify an optional evictor
windowed = windowed
  .evictor(myEvictor: Evictor[IN, WINDOW])
```

Finally, we apply a `WindowFunction` that returns elements of type `OUT` to obtain a `DataStream[OUT]`.

```scala
// apply window function to windowed stream
val output: DataStream[OUT] = windowed
  .apply(myWinFunc: WindowFunction[IN, OUT, KEY, WINDOW])
```

With Flink&#39;s internal windowing mechanics and its exposure through the DataStream API it is possible to implement very custom windowing logic such as session windows or windows that emit early results if the values exceed a certain threshold.

## Conclusion

Support for various types of windows over continuous data streams is a must-have for modern stream processors. Apache Flink is a stream processor with a very strong feature set, including a very flexible mechanism to build and evaluate windows over continuous data streams. Flink provides pre-defined window operators for common uses cases as well as a toolbox that allows to define very custom windowing logic. The Flink community will add more pre-defined window operators as we learn the requirements from our users.</description>
<pubDate>Fri, 04 Dec 2015 10:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2015/12/04/Introducing-windows.html</link>
<guid isPermaLink="true">/news/2015/12/04/Introducing-windows.html</guid>
</item>

<item>
<title>Flink 0.10.1 released</title>
<description>Today, the Flink community released the first bugfix release of the 0.10 series of Flink.

We recommend all users updating to this release, by bumping the version of your Flink dependencies and updating the binaries on the server.

## Issues fixed

&lt;ul class=&quot;list-unstyled&quot;&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2879&#39;&gt;FLINK-2879&lt;/a&gt;] -         Links in documentation are broken
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2938&#39;&gt;FLINK-2938&lt;/a&gt;] -         Streaming docs not in sync with latest state changes
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2942&#39;&gt;FLINK-2942&lt;/a&gt;] -         Dangling operators in web UI&amp;#39;s program visualization (non-deterministic)
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2967&#39;&gt;FLINK-2967&lt;/a&gt;] -         TM address detection might not always detect the right interface on slow networks / overloaded JMs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2977&#39;&gt;FLINK-2977&lt;/a&gt;] -         Cannot access HBase in a Kerberos secured Yarn cluster
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2987&#39;&gt;FLINK-2987&lt;/a&gt;] -         Flink 0.10 fails to start on YARN 2.6.0
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2989&#39;&gt;FLINK-2989&lt;/a&gt;] -         Job Cancel button doesn&amp;#39;t work on Yarn
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3005&#39;&gt;FLINK-3005&lt;/a&gt;] -         Commons-collections object deserialization remote command execution vulnerability
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3011&#39;&gt;FLINK-3011&lt;/a&gt;] -         Cannot cancel failing/restarting streaming job from the command line
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3019&#39;&gt;FLINK-3019&lt;/a&gt;] -         CLI does not list running/restarting jobs
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3020&#39;&gt;FLINK-3020&lt;/a&gt;] -         Local streaming execution: set number of task manager slots to the maximum parallelism
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3024&#39;&gt;FLINK-3024&lt;/a&gt;] -         TimestampExtractor Does not Work When returning Long.MIN_VALUE
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3032&#39;&gt;FLINK-3032&lt;/a&gt;] -         Flink does not start on Hadoop 2.7.1 (HDP), due to class conflict
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3043&#39;&gt;FLINK-3043&lt;/a&gt;] -         Kafka Connector description in Streaming API guide is wrong/outdated
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3047&#39;&gt;FLINK-3047&lt;/a&gt;] -         Local batch execution: set number of task manager slots to the maximum parallelism
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3052&#39;&gt;FLINK-3052&lt;/a&gt;] -         Optimizer does not push properties out of bulk iterations
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2966&#39;&gt;FLINK-2966&lt;/a&gt;] -         Improve the way job duration is reported on web frontend.
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-2974&#39;&gt;FLINK-2974&lt;/a&gt;] -         Add periodic offset commit to Kafka Consumer if checkpointing is disabled
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3028&#39;&gt;FLINK-3028&lt;/a&gt;] -         Cannot cancel restarting job via web frontend
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3040&#39;&gt;FLINK-3040&lt;/a&gt;] -         Add docs describing how to configure State Backends
&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#39;https://issues.apache.org/jira/browse/FLINK-3041&#39;&gt;FLINK-3041&lt;/a&gt;] -         Twitter Streaming Description section of Streaming Programming guide refers to an incorrect example &amp;#39;TwitterLocal&amp;#39;
&lt;/li&gt;
&lt;/ul&gt;
                                                                                    
</description>
<pubDate>Fri, 27 Nov 2015 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2015/11/27/release-0.10.1.html</link>
<guid isPermaLink="true">/news/2015/11/27/release-0.10.1.html</guid>
</item>

<item>
<title>Announcing Apache Flink 0.10.0</title>
<description>The Apache Flink community is pleased to announce the availability of the 0.10.0 release. The community put significant effort into improving and extending Apache Flink since the last release, focusing on data stream processing and operational features. About 80 contributors provided bug fixes, improvements, and new features such that in total more than 400 JIRA issues could be resolved.

For Flink 0.10.0, the focus of the community was to graduate the DataStream API from beta and to evolve Apache Flink into a production-ready stream data processor with a competitive feature set. These efforts resulted in support for event-time and out-of-order streams, exactly-once guarantees in the case of failures, a very flexible windowing mechanism, sophisticated operator state management, and a highly-available cluster operation mode. Flink 0.10.0 also brings a new monitoring dashboard with real-time system and job monitoring capabilities. Both batch and streaming modes of Flink benefit from the new high availability and improved monitoring features. Needless to say that Flink 0.10.0 includes many more features, improvements, and bug fixes. 

We encourage everyone to [download the release]({{ site.baseurl }}/downloads.html) and [check out the documentation](https://ci.apache.org/projects/flink/flink-docs-release-0.10/). Feedback through the Flink [mailing lists]({{ site.baseurl }}/community.html#mailing-lists) is, as always, very welcome!

## New Features

### Event-time Stream Processing

Many stream processing applications consume data from sources that produce events with associated timestamps such as sensor or user-interaction events. Very often, events have to be collected from several sources such that it is usually not guaranteed that events arrive in the exact order of their timestamps at the stream processor. Consequently, stream processors must take out-of-order elements into account in order to produce results which are correct and consistent with respect to the timestamps of the events. With release 0.10.0, Apache Flink supports event-time processing as well as ingestion-time and processing-time processing. See [FLINK-2674](https://issues.apache.org/jira/browse/FLINK-2674) for details.

### Stateful Stream Processing 

Operators that maintain and update state are a common pattern in many stream processing applications. Since streaming applications tend to run for a very long time, operator state can become very valuable and impossible to recompute. In order to enable fault-tolerance, operator state must be backed up to persistent storage in regular intervals. Flink 0.10.0 offers flexible interfaces to define, update, and query operator state and hooks to connect various state backends.

### Highly-available Cluster Operations

Stream processing applications may be live for months. Therefore, a production-ready stream processor must be highly-available and continue to process data even in the face of failures. With release 0.10.0, Flink supports high availability modes for standalone cluster and [YARN](https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html) setups, eliminating any single point of failure. In this mode, Flink relies on [Apache Zookeeper](https://zookeeper.apache.org) for leader election and persisting small sized meta-data of running jobs. You can [check out the documentation](https://ci.apache.org/projects/flink/flink-docs-release-0.10/setup/jobmanager_high_availability.html) to see how to enable high availability. See [FLINK-2287](https://issues.apache.org/jira/browse/FLINK-2287) for details.

### Graduated DataStream API

The DataStream API was revised based on user feedback and with foresight for upcoming features and graduated from beta status to fully supported. The most obvious changes are related to the methods for stream partitioning and window operations. The new windowing system is based on the concepts of window assigners, triggers, and evictors, inspired by the [Dataflow Model](http://www.vldb.org/pvldb/vol8/p1792-Akidau.pdf). The new API is fully described in the [DataStream API documentation](https://ci.apache.org/projects/flink/flink-docs-release-0.10/apis/streaming_guide.html). This [migration guide](https://cwiki.apache.org/confluence/display/FLINK/Migration+Guide%3A+0.9.x+to+0.10.x) will help to port your Flink 0.9 DataStream programs to the revised API of Flink 0.10.0. See [FLINK-2674](https://issues.apache.org/jira/browse/FLINK-2674) and [FLINK-2877](https://issues.apache.org/jira/browse/FLINK-2877) for details.

### New Connectors for Data Streams

Apache Flink 0.10.0 features DataStream sources and sinks for many common data producers and stores. This includes an exactly-once rolling file sink which supports any file system, including HDFS, local FS, and S3. We also updated the [Apache Kafka](https://kafka.apache.org) producer to use the new producer API, and added a connectors for [ElasticSearch](https://github.com/elastic/elasticsearch) and [Apache Nifi](https://nifi.apache.org). More connectors for DataStream programs will be added by the community in the future. See the following JIRA issues for details [FLINK-2583](https://issues.apache.org/jira/browse/FLINK-2583), [FLINK-2386](https://issues.apache.org/jira/browse/FLINK-2386), [FLINK-2372](https://issues.apache.org/jira/browse/FLINK-2372), [FLINK-2740](https://issues.apache.org/jira/browse/FLINK-2740), and [FLINK-2558](https://issues.apache.org/jira/browse/FLINK-2558).

### New Web Dashboard &amp; Real-time Monitoring

The 0.10.0 release features a newly designed and significantly improved monitoring dashboard for Apache Flink. The new dashboard visualizes the progress of running jobs and shows real-time statistics of processed data volumes and record counts. Moreover, it gives access to resource usage and JVM statistics of TaskManagers including JVM heap usage and garbage collection details. The following screenshot shows the job view of the new dashboard.

&lt;center&gt;
&lt;img src=&quot;{{ site.baseurl }}/img/blog/new-dashboard-screenshot.png&quot; style=&quot;width:90%;margin:15px&quot;&gt;
&lt;/center&gt;

The web server that provides all monitoring statistics has been designed with a REST interface allowing other systems to also access the internal system metrics. See [FLINK-2357](https://issues.apache.org/jira/browse/FLINK-2357) for details.

### Off-heap Managed Memory

Flink’s internal operators (such as its sort algorithm and hash tables) write data to and read data from managed memory to achieve memory-safe operations and reduce garbage collection overhead. Until version 0.10.0, managed memory was allocated only from JVM heap memory. With this release, managed memory can also be allocated from off-heap memory. This will facilitate shorter TaskManager start-up times as well as reduce garbage collection pressure. See [the documentation](https://ci.apache.org/projects/flink/flink-docs-release-0.10/setup/config.html#managed-memory) to learn how to configure managed memory on off-heap memory. JIRA issue [FLINK-1320](https://issues.apache.org/jira/browse/FLINK-1320) contains further details.

### Outer Joins

Outer joins have been one of the most frequently requested features for Flink’s [DataSet API](https://ci.apache.org/projects/flink/flink-docs-release-0.10/apis/programming_guide.html). Although there was a workaround to implement outer joins as CoGroup function, it had significant drawbacks including added code complexity and not being fully memory-safe. With release 0.10.0, Flink adds native support for [left, right, and full outer joins](https://ci.apache.org/projects/flink/flink-docs-release-0.10/apis/dataset_transformations.html#outerjoin) to the DataSet API. All outer joins are backed by a memory-safe operator implementation that leverages Flink’s managed memory. See [FLINK-687](https://issues.apache.org/jira/browse/FLINK-687) and [FLINK-2107](https://issues.apache.org/jira/browse/FLINK-2107) for details.

### Gelly: Major Improvements and Scala API

[Gelly](https://ci.apache.org/projects/flink/flink-docs-release-0.10/libs/gelly_guide.html) is Flink’s API and library for processing and analyzing large-scale graphs. Gelly was introduced with release 0.9.0 and has been very well received by users and contributors. Based on user feedback, Gelly has been improved since then. In addition, Flink 0.10.0 introduces a Scala API for Gelly. See [FLINK-2857](https://issues.apache.org/jira/browse/FLINK-2857) and [FLINK-1962](https://issues.apache.org/jira/browse/FLINK-1962) for details.

## More Improvements and Fixes

The Flink community resolved more than 400 issues. The following list is a selection of new features and fixed bugs.

- [FLINK-1851](https://issues.apache.org/jira/browse/FLINK-1851) Java Table API does not support Casting
- [FLINK-2152](https://issues.apache.org/jira/browse/FLINK-2152) Provide zipWithIndex utility in flink-contrib
- [FLINK-2158](https://issues.apache.org/jira/browse/FLINK-2158) NullPointerException in DateSerializer.
- [FLINK-2240](https://issues.apache.org/jira/browse/FLINK-2240) Use BloomFilter to minimize probe side records which are spilled to disk in Hybrid-Hash-Join
- [FLINK-2533](https://issues.apache.org/jira/browse/FLINK-2533) Gap based random sample optimization
- [FLINK-2555](https://issues.apache.org/jira/browse/FLINK-2555) Hadoop Input/Output Formats are unable to access secured HDFS clusters
- [FLINK-2565](https://issues.apache.org/jira/browse/FLINK-2565) Support primitive arrays as keys
- [FLINK-2582](https://issues.apache.org/jira/browse/FLINK-2582) Document how to build Flink with other Scala versions
- [FLINK-2584](https://issues.apache.org/jira/browse/FLINK-2584) ASM dependency is not shaded away
- [FLINK-2689](https://issues.apache.org/jira/browse/FLINK-2689) Reusing null object for joins with SolutionSet
- [FLINK-2703](https://issues.apache.org/jira/browse/FLINK-2703) Remove log4j classes from fat jar / document how to use Flink with logback
- [FLINK-2763](https://issues.apache.org/jira/browse/FLINK-2763) Bug in Hybrid Hash Join: Request to spill a partition with less than two buffers.
- [FLINK-2767](https://issues.apache.org/jira/browse/FLINK-2767) Add support Scala 2.11 to Scala shell
- [FLINK-2774](https://issues.apache.org/jira/browse/FLINK-2774) Import Java API classes automatically in Flink&#39;s Scala shell
- [FLINK-2782](https://issues.apache.org/jira/browse/FLINK-2782) Remove deprecated features for 0.10
- [FLINK-2800](https://issues.apache.org/jira/browse/FLINK-2800) kryo serialization problem
- [FLINK-2834](https://issues.apache.org/jira/browse/FLINK-2834) Global round-robin for temporary directories
- [FLINK-2842](https://issues.apache.org/jira/browse/FLINK-2842) S3FileSystem is broken
- [FLINK-2874](https://issues.apache.org/jira/browse/FLINK-2874) Certain Avro generated getters/setters not recognized
- [FLINK-2895](https://issues.apache.org/jira/browse/FLINK-2895) Duplicate immutable object creation
- [FLINK-2964](https://issues.apache.org/jira/browse/FLINK-2964) MutableHashTable fails when spilling partitions without overflow segments

## Notice 

As previously announced, Flink 0.10.0 no longer supports Java 6. If you are still using Java 6, please consider upgrading to Java 8 (Java 7 ended its free support in April 2015).
Also note that some methods in the DataStream API had to be renamed as part of the API rework. For example the `groupBy` method has been renamed to `keyBy` and the windowing API changed. This [migration guide](https://cwiki.apache.org/confluence/display/FLINK/Migration+Guide%3A+0.9.x+to+0.10.x) will help to port your Flink 0.9 DataStream programs to the revised API of Flink 0.10.0.

## Contributors

- Alexander Alexandrov
- Marton Balassi
- Enrique Bautista
- Faye Beligianni
- Bryan Bende
- Ajay Bhat
- Chris Brinkman
- Dmitry Buzdin
- Kun Cao
- Paris Carbone
- Ufuk Celebi
- Shivani Chandna
- Liang Chen
- Felix Cheung
- Hubert Czerpak
- Vimal Das
- Behrouz Derakhshan
- Suminda Dharmasena
- Stephan Ewen
- Fengbin Fang
- Gyula Fora
- Lun Gao
- Gabor Gevay
- Piotr Godek
- Sachin Goel
- Anton Haglund
- Gábor Hermann
- Greg Hogan
- Fabian Hueske
- Martin Junghanns
- Vasia Kalavri
- Ulf Karlsson
- Frederick F. Kautz
- Samia Khalid
- Johannes Kirschnick
- Kostas Kloudas
- Alexander Kolb
- Johann Kovacs
- Aljoscha Krettek
- Sebastian Kruse
- Andreas Kunft
- Chengxiang Li
- Chen Liang
- Andra Lungu
- Suneel Marthi
- Tamara Mendt
- Robert Metzger
- Maximilian Michels
- Chiwan Park
- Sahitya Pavurala
- Pietro Pinoli
- Ricky Pogalz
- Niraj Rai
- Lokesh Rajaram
- Johannes Reifferscheid
- Till Rohrmann
- Henry Saputra
- Matthias Sax
- Shiti Saxena
- Chesnay Schepler
- Peter Schrott
- Saumitra Shahapure
- Nikolaas Steenbergen
- Thomas Sun
- Peter Szabo
- Viktor Taranenko
- Kostas Tzoumas
- Pieter-Jan Van Aeken
- Theodore Vasiloudis
- Timo Walther
- Chengxuan Wang
- Huang Wei
- Dawid Wysakowicz
- Rerngvit Yanggratoke
- Nezih Yigitbasi
- Ted Yu
- Rucong Zhang
- Vyacheslav Zholudev
- Zoltán Zvara

</description>
<pubDate>Mon, 16 Nov 2015 08:00:00 +0000</pubDate>
<link>https://flink.apache.org/news/2015/11/16/release-0.10.0.html</link>
<guid isPermaLink="true">/news/2015/11/16/release-0.10.0.html</guid>
</item>

</channel>
</rss>
